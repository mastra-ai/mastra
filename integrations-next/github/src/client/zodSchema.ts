// Generated by ts-to-zod
import { z } from 'zod';

export const importSchema = z.object({
  authors_count: z.number().optional().nullable(),
  authors_url: z.string(),
  commit_count: z.number().optional().nullable(),
  error_message: z.string().optional().nullable(),
  failed_step: z.string().optional().nullable(),
  has_large_files: z.boolean().optional(),
  html_url: z.string(),
  import_percent: z.number().optional().nullable(),
  large_files_count: z.number().optional(),
  large_files_size: z.number().optional(),
  message: z.string().optional(),
  project_choices: z
    .array(
      z.object({
        human_name: z.string().optional(),
        tfvc_project: z.string().optional(),
        vcs: z.string().optional(),
      }),
    )
    .optional(),
  push_percent: z.number().optional().nullable(),
  repository_url: z.string(),
  status: z.union([
    z.literal('auth'),
    z.literal('error'),
    z.literal('none'),
    z.literal('detecting'),
    z.literal('choose'),
    z.literal('auth_failed'),
    z.literal('importing'),
    z.literal('mapping'),
    z.literal('waiting_to_push'),
    z.literal('pushing'),
    z.literal('complete'),
    z.literal('setup'),
    z.literal('unknown'),
    z.literal('detection_found_multiple'),
    z.literal('detection_found_nothing'),
    z.literal('detection_needs_auth'),
  ]),
  status_text: z.string().optional().nullable(),
  svc_root: z.string().optional(),
  svn_root: z.string().optional(),
  tfvc_project: z.string().optional(),
  url: z.string(),
  use_lfs: z.boolean().optional(),
  vcs: z.string().nullable(),
  vcs_url: z.string(),
});

export const statusSchema = z.union([
  z.literal('auth'),
  z.literal('error'),
  z.literal('none'),
  z.literal('detecting'),
  z.literal('choose'),
  z.literal('auth_failed'),
  z.literal('importing'),
  z.literal('mapping'),
  z.literal('waiting_to_push'),
  z.literal('pushing'),
  z.literal('complete'),
  z.literal('setup'),
  z.literal('unknown'),
  z.literal('detection_found_multiple'),
  z.literal('detection_found_nothing'),
  z.literal('detection_needs_auth'),
]);

export const nullableSimpleUserSchema = z
  .object({
    avatar_url: z.string(),
    email: z.string().optional().nullable(),
    events_url: z.string(),
    followers_url: z.string(),
    following_url: z.string(),
    gists_url: z.string(),
    gravatar_id: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    login: z.string(),
    name: z.string().optional().nullable(),
    node_id: z.string(),
    organizations_url: z.string(),
    received_events_url: z.string(),
    repos_url: z.string(),
    site_admin: z.boolean(),
    starred_at: z.string().optional(),
    starred_url: z.string(),
    subscriptions_url: z.string(),
    type: z.string(),
    url: z.string(),
  })
  .nullable();

export const packageTypeSchema = z.union([
  z.literal('npm'),
  z.literal('maven'),
  z.literal('rubygems'),
  z.literal('docker'),
  z.literal('nuget'),
  z.literal('container'),
]);

export const visibilitySchema = z.union([z.literal('private'), z.literal('public')]);

export const actionsBillingUsageSchema = z.object({
  included_minutes: z.number(),
  minutes_used_breakdown: z.object({
    MACOS: z.number().optional(),
    UBUNTU: z.number().optional(),
    WINDOWS: z.number().optional(),
    macos_12_core: z.number().optional(),
    total: z.number().optional(),
    ubuntu_16_core: z.number().optional(),
    ubuntu_32_core: z.number().optional(),
    ubuntu_4_core: z.number().optional(),
    ubuntu_64_core: z.number().optional(),
    ubuntu_8_core: z.number().optional(),
    windows_16_core: z.number().optional(),
    windows_32_core: z.number().optional(),
    windows_4_core: z.number().optional(),
    windows_64_core: z.number().optional(),
    windows_8_core: z.number().optional(),
  }),
  total_minutes_used: z.number(),
  total_paid_minutes_used: z.number(),
});

export const actionsCacheListSchema = z.object({
  actions_caches: z.array(
    z.object({
      created_at: z.string().optional(),
      id: z.number().optional(),
      key: z.string().optional(),
      last_accessed_at: z.string().optional(),
      ref: z.string().optional(),
      size_in_bytes: z.number().optional(),
      version: z.string().optional(),
    }),
  ),
  total_count: z.number(),
});

export const actionsCacheUsageByRepositorySchema = z.object({
  active_caches_count: z.number(),
  active_caches_size_in_bytes: z.number(),
  full_name: z.string(),
});

export const actionsCacheUsageOrgEnterpriseSchema = z.object({
  total_active_caches_count: z.number(),
  total_active_caches_size_in_bytes: z.number(),
});

export const actionsCanApprovePullRequestReviewsSchema = z.boolean();

export const actionsDefaultWorkflowPermissionsSchema = z.union([z.literal('read'), z.literal('write')]);

export const actionsEnabledSchema = z.boolean();

export const actionsGetDefaultWorkflowPermissionsSchema = z.object({
  can_approve_pull_request_reviews: actionsCanApprovePullRequestReviewsSchema,
  default_workflow_permissions: actionsDefaultWorkflowPermissionsSchema,
});

export const allowedActionsSchema = z.union([z.literal('all'), z.literal('local_only'), z.literal('selected')]);

export const enabledRepositoriesSchema = z.union([z.literal('all'), z.literal('none'), z.literal('selected')]);

export const selectedActionsUrlSchema = z.string();

export const actionsPublicKeySchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  key: z.string(),
  key_id: z.string(),
  title: z.string().optional(),
  url: z.string().optional(),
});

export const actionsRepositoryPermissionsSchema = z.object({
  allowed_actions: allowedActionsSchema.optional(),
  enabled: actionsEnabledSchema,
  selected_actions_url: selectedActionsUrlSchema.optional(),
});

export const actionsSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  updated_at: z.string(),
});

export const actionsSetDefaultWorkflowPermissionsSchema = z.object({
  can_approve_pull_request_reviews: actionsCanApprovePullRequestReviewsSchema.optional(),
  default_workflow_permissions: actionsDefaultWorkflowPermissionsSchema.optional(),
});

export const actionsVariableSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  updated_at: z.string(),
  value: z.string(),
});

export const actionsWorkflowAccessToRepositorySchema = z.object({
  access_level: z.union([z.literal('none'), z.literal('user'), z.literal('organization')]),
});

export const accessLevelSchema = z.union([z.literal('none'), z.literal('user'), z.literal('organization')]);

export const actorSchema = z.object({
  avatar_url: z.string(),
  display_login: z.string().optional(),
  gravatar_id: z.string().nullable(),
  id: z.number(),
  login: z.string(),
  url: z.string(),
});

export const simpleUserSchema = z.object({
  avatar_url: z.string(),
  email: z.string().optional().nullable(),
  events_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  gravatar_id: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  login: z.string(),
  name: z.string().optional().nullable(),
  node_id: z.string(),
  organizations_url: z.string(),
  received_events_url: z.string(),
  repos_url: z.string(),
  site_admin: z.boolean(),
  starred_at: z.string().optional(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  type: z.string(),
  url: z.string(),
});

export const nullableIntegrationSchema = z
  .object({
    client_id: z.string().optional(),
    client_secret: z.string().optional(),
    created_at: z.string(),
    description: z.string().nullable(),
    events: z.array(z.string()),
    external_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    installations_count: z.number().optional(),
    name: z.string(),
    node_id: z.string(),
    owner: nullableSimpleUserSchema,
    pem: z.string().optional(),
    permissions: z.record(z.union([z.string(), z.undefined()])).and(
      z.object({
        checks: z.string().optional(),
        contents: z.string().optional(),
        deployments: z.string().optional(),
        issues: z.string().optional(),
        metadata: z.string().optional(),
      }),
    ),
    slug: z.string().optional(),
    updated_at: z.string(),
    webhook_secret: z.string().optional().nullable(),
  })
  .nullable();

export const alertCreatedAtSchema = z.string();

export const alertDismissedAtSchema = z.string().nullable();

export const alertFixedAtSchema = z.string().nullable();

export const alertHtmlUrlSchema = z.string();

export const alertInstancesUrlSchema = z.string();

export const alertNumberSchema = z.number();

export const alertUpdatedAtSchema = z.string();

export const alertUrlSchema = z.string();

export const apiOverviewSchema = z.object({
  actions: z.array(z.string()).optional(),
  api: z.array(z.string()).optional(),
  dependabot: z.array(z.string()).optional(),
  git: z.array(z.string()).optional(),
  hooks: z.array(z.string()).optional(),
  importer: z.array(z.string()).optional(),
  packages: z.array(z.string()).optional(),
  pages: z.array(z.string()).optional(),
  ssh_key_fingerprints: z
    .object({
      SHA256_DSA: z.string().optional(),
      SHA256_ECDSA: z.string().optional(),
      SHA256_ED25519: z.string().optional(),
      SHA256_RSA: z.string().optional(),
    })
    .optional(),
  ssh_keys: z.array(z.string()).optional(),
  verifiable_password_authentication: z.boolean(),
  web: z.array(z.string()).optional(),
});

export const appPermissionsSchema = z.object({
  actions: z.union([z.literal('read'), z.literal('write')]).optional(),
  administration: z.union([z.literal('read'), z.literal('write')]).optional(),
  checks: z.union([z.literal('read'), z.literal('write')]).optional(),
  contents: z.union([z.literal('read'), z.literal('write')]).optional(),
  deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
  environments: z.union([z.literal('read'), z.literal('write')]).optional(),
  issues: z.union([z.literal('read'), z.literal('write')]).optional(),
  members: z.union([z.literal('read'), z.literal('write')]).optional(),
  metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_announcement_banners: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_custom_roles: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_plan: z.literal('read').optional(),
  organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
  organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
  organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
  packages: z.union([z.literal('read'), z.literal('write')]).optional(),
  pages: z.union([z.literal('read'), z.literal('write')]).optional(),
  pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
  repository_announcement_banners: z.union([z.literal('read'), z.literal('write')]).optional(),
  repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
  repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
  secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
  secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
  security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
  single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
  statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
  team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
  vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
  workflows: z.literal('write').optional(),
});

export const actionsSchema = z.union([z.literal('read'), z.literal('write')]);

export const administrationSchema = z.union([z.literal('read'), z.literal('write')]);

export const checksSchema = z.union([z.literal('read'), z.literal('write')]);

export const contentsSchema = z.union([z.literal('read'), z.literal('write')]);

export const deploymentsSchema = z.union([z.literal('read'), z.literal('write')]);

export const environmentsSchema = z.union([z.literal('read'), z.literal('write')]);

export const issuesSchema = z.union([z.literal('read'), z.literal('write')]);

export const membersSchema = z.union([z.literal('read'), z.literal('write')]);

export const metadataSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationAdministrationSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationAnnouncementBannersSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationCustomRolesSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationHooksSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationPackagesSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationPlanSchema = z.literal('read');

export const organizationProjectsSchema = z.union([z.literal('read'), z.literal('write'), z.literal('admin')]);

export const organizationSecretsSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationSelfHostedRunnersSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationUserBlockingSchema = z.union([z.literal('read'), z.literal('write')]);

export const packagesSchema = z.union([z.literal('read'), z.literal('write')]);

export const pagesSchema = z.union([z.literal('read'), z.literal('write')]);

export const pullRequestsSchema = z.union([z.literal('read'), z.literal('write')]);

export const repositoryAnnouncementBannersSchema = z.union([z.literal('read'), z.literal('write')]);

export const repositoryHooksSchema = z.union([z.literal('read'), z.literal('write')]);

export const repositoryProjectsSchema = z.union([z.literal('read'), z.literal('write'), z.literal('admin')]);

export const secretScanningAlertsSchema = z.union([z.literal('read'), z.literal('write')]);

export const secretsSchema = z.union([z.literal('read'), z.literal('write')]);

export const securityEventsSchema = z.union([z.literal('read'), z.literal('write')]);

export const singleFileSchema = z.union([z.literal('read'), z.literal('write')]);

export const statusesSchema = z.union([z.literal('read'), z.literal('write')]);

export const teamDiscussionsSchema = z.union([z.literal('read'), z.literal('write')]);

export const vulnerabilityAlertsSchema = z.union([z.literal('read'), z.literal('write')]);

export const workflowsSchema = z.literal('write');

export const artifactSchema = z.object({
  archive_download_url: z.string(),
  created_at: z.string().nullable(),
  expired: z.boolean(),
  expires_at: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  size_in_bytes: z.number(),
  updated_at: z.string().nullable(),
  url: z.string(),
  workflow_run: z
    .object({
      head_branch: z.string().optional(),
      head_repository_id: z.number().optional(),
      head_sha: z.string().optional(),
      id: z.number().optional(),
      repository_id: z.number().optional(),
    })
    .optional()
    .nullable(),
});

export const integrationSchema = z.object({
  client_id: z.string().optional(),
  client_secret: z.string().optional(),
  created_at: z.string(),
  description: z.string().nullable(),
  events: z.array(z.string()),
  external_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  installations_count: z.number().optional(),
  name: z.string(),
  node_id: z.string(),
  owner: nullableSimpleUserSchema,
  pem: z.string().optional(),
  permissions: z.record(z.union([z.string(), z.undefined()])).and(
    z.object({
      checks: z.string().optional(),
      contents: z.string().optional(),
      deployments: z.string().optional(),
      issues: z.string().optional(),
      metadata: z.string().optional(),
    }),
  ),
  slug: z.string().optional(),
  updated_at: z.string(),
  webhook_secret: z.string().optional().nullable(),
});

export const repositorySelectionSchema = z.union([z.literal('all'), z.literal('selected')]);

export const authorAssociationSchema = z.union([
  z.literal('COLLABORATOR'),
  z.literal('CONTRIBUTOR'),
  z.literal('FIRST_TIMER'),
  z.literal('FIRST_TIME_CONTRIBUTOR'),
  z.literal('MANNEQUIN'),
  z.literal('MEMBER'),
  z.literal('NONE'),
  z.literal('OWNER'),
]);

export const nullableScopedInstallationSchema = z
  .object({
    account: simpleUserSchema,
    has_multiple_single_files: z.boolean().optional(),
    permissions: appPermissionsSchema,
    repositories_url: z.string(),
    repository_selection: z.union([z.literal('all'), z.literal('selected')]),
    single_file_name: z.string().nullable(),
    single_file_paths: z.array(z.string()).optional(),
  })
  .nullable();

export const autoMergeSchema = z
  .object({
    commit_message: z.string(),
    commit_title: z.string(),
    enabled_by: simpleUserSchema,
    merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
  })
  .nullable();

export const mergeMethodSchema = z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]);

export const autolinkSchema = z.object({
  id: z.number(),
  is_alphanumeric: z.boolean(),
  key_prefix: z.string(),
  url_template: z.string(),
});

export const baseGistSchema = z.object({
  comments: z.number(),
  comments_url: z.string(),
  commits_url: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  files: z.record(
    z.object({
      filename: z.string().optional(),
      language: z.string().optional(),
      raw_url: z.string().optional(),
      size: z.number().optional(),
      type: z.string().optional(),
    }),
  ),
  forks: z.array(z.unknown()).optional(),
  forks_url: z.string(),
  git_pull_url: z.string(),
  git_push_url: z.string(),
  history: z.array(z.unknown()).optional(),
  html_url: z.string(),
  id: z.string(),
  node_id: z.string(),
  owner: simpleUserSchema.optional(),
  public: z.boolean(),
  truncated: z.boolean().optional(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const basicErrorSchema = z.object({
  documentation_url: z.string().optional(),
  message: z.string().optional(),
  status: z.string().optional(),
  url: z.string().optional(),
});

export const blobSchema = z.object({
  content: z.string(),
  encoding: z.string(),
  highlighted_content: z.string().optional(),
  node_id: z.string(),
  sha: z.string(),
  size: z.number().nullable(),
  url: z.string(),
});

export const protectedBranchAdminEnforcedSchema = z.object({
  enabled: z.boolean(),
  url: z.string(),
});

export const protectedBranchRequiredStatusCheckSchema = z.object({
  checks: z.array(
    z.object({
      app_id: z.number().nullable(),
      context: z.string(),
    }),
  ),
  contexts: z.array(z.string()),
  contexts_url: z.string().optional(),
  enforcement_level: z.string().optional(),
  strict: z.boolean().optional(),
  url: z.string().optional(),
});

export const branchRestrictionPolicySchema = z.object({
  apps: z.array(
    z.object({
      created_at: z.string().optional(),
      description: z.string().optional(),
      events: z.array(z.string()).optional(),
      external_url: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          description: z.string().optional(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          hooks_url: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          issues_url: z.string().optional(),
          login: z.string().optional(),
          members_url: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          public_members_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      permissions: z
        .object({
          contents: z.string().optional(),
          issues: z.string().optional(),
          metadata: z.string().optional(),
          single_file: z.string().optional(),
        })
        .optional(),
      slug: z.string().optional(),
      updated_at: z.string().optional(),
    }),
  ),
  apps_url: z.string(),
  teams: z.array(
    z.object({
      description: z.string().optional().nullable(),
      html_url: z.string().optional(),
      id: z.number().optional(),
      members_url: z.string().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      parent: z.string().optional().nullable(),
      permission: z.string().optional(),
      privacy: z.string().optional(),
      repositories_url: z.string().optional(),
      slug: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  teams_url: z.string(),
  url: z.string(),
  users: z.array(
    z.object({
      avatar_url: z.string().optional(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number().optional(),
      login: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  users_url: z.string(),
});

export const branchShortSchema = z.object({
  commit: z.object({
    sha: z.string(),
    url: z.string(),
  }),
  name: z.string(),
  protected: z.boolean(),
});

export const checkAnnotationSchema = z.object({
  annotation_level: z.string().nullable(),
  blob_href: z.string(),
  end_column: z.number().nullable(),
  end_line: z.number(),
  message: z.string().nullable(),
  path: z.string(),
  raw_details: z.string().nullable(),
  start_column: z.number().nullable(),
  start_line: z.number(),
  title: z.string().nullable(),
});

export const deploymentSimpleSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  environment: z.string(),
  id: z.number(),
  node_id: z.string(),
  original_environment: z.string().optional(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  production_environment: z.boolean().optional(),
  repository_url: z.string(),
  statuses_url: z.string(),
  task: z.string(),
  transient_environment: z.boolean().optional(),
  updated_at: z.string(),
  url: z.string(),
});

export const pullRequestMinimalSchema = z.object({
  base: z.object({
    ref: z.string(),
    repo: z.object({
      id: z.number(),
      name: z.string(),
      url: z.string(),
    }),
    sha: z.string(),
  }),
  head: z.object({
    ref: z.string(),
    repo: z.object({
      id: z.number(),
      name: z.string(),
      url: z.string(),
    }),
    sha: z.string(),
  }),
  id: z.number(),
  number: z.number(),
  url: z.string(),
});

export const conclusionSchema = z.union([
  z.literal('success'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('cancelled'),
  z.literal('skipped'),
  z.literal('timed_out'),
  z.literal('action_required'),
]);

export const status2Schema = z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]);

export const conclusion2Schema = z.union([
  z.literal('waiting'),
  z.literal('pending'),
  z.literal('startup_failure'),
  z.literal('stale'),
  z.literal('success'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('cancelled'),
  z.literal('skipped'),
  z.literal('timed_out'),
  z.literal('action_required'),
]);

export const status3Schema = z.union([
  z.literal('queued'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('pending'),
]);

export const simpleCommitSchema = z.object({
  author: z
    .object({
      email: z.string(),
      name: z.string(),
    })
    .nullable(),
  committer: z
    .object({
      email: z.string(),
      name: z.string(),
    })
    .nullable(),
  id: z.string(),
  message: z.string(),
  timestamp: z.string(),
  tree_id: z.string(),
});

export const conclusion3Schema = z.union([
  z.literal('success'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('cancelled'),
  z.literal('skipped'),
  z.literal('timed_out'),
  z.literal('action_required'),
  z.literal('startup_failure'),
  z.literal('stale'),
]);

export const trafficSchema = z.object({
  count: z.number(),
  timestamp: z.string(),
  uniques: z.number(),
});

export const codeFrequencyStatSchema = z.array(z.number());

export const codeOfConductSchema = z.object({
  body: z.string().optional(),
  html_url: z.string().nullable(),
  key: z.string(),
  name: z.string(),
  url: z.string(),
});

export const codeOfConductSimpleSchema = z.object({
  html_url: z.string().nullable(),
  key: z.string(),
  name: z.string(),
  url: z.string(),
});

export const codeScanningAlertDismissedCommentSchema = z.string().nullable();

export const codeScanningAlertDismissedReasonSchema = z.union([
  z.literal('false positive'),
  z.literal("won't fix"),
  z.literal('used in tests'),
]);

export const codeScanningAlertRuleSchema = z.object({
  description: z.string().optional(),
  full_description: z.string().optional(),
  help: z.string().optional().nullable(),
  help_uri: z.string().optional().nullable(),
  id: z.string().optional().nullable(),
  name: z.string().optional(),
  security_severity_level: z
    .union([z.literal('low'), z.literal('medium'), z.literal('high'), z.literal('critical')])
    .optional()
    .nullable(),
  severity: z
    .union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')])
    .optional()
    .nullable(),
  tags: z.array(z.string()).optional().nullable(),
});

export const codeScanningAlertStateSchema = z.union([
  z.literal('open'),
  z.literal('closed'),
  z.literal('dismissed'),
  z.literal('fixed'),
]);

export const codeScanningAlertClassificationSchema = z.union([
  z.literal('source'),
  z.literal('generated'),
  z.literal('test'),
  z.literal('library'),
]);

export const codeScanningAlertEnvironmentSchema = z.string();

export const codeScanningAnalysisAnalysisKeySchema = z.string();

export const codeScanningAnalysisCategorySchema = z.string();

export const codeScanningAlertLocationSchema = z.object({
  end_column: z.number().optional(),
  end_line: z.number().optional(),
  path: z.string().optional(),
  start_column: z.number().optional(),
  start_line: z.number().optional(),
});

export const codeScanningRefSchema = z.string();

export const codeScanningAlertInstanceSchema = z.object({
  analysis_key: codeScanningAnalysisAnalysisKeySchema.optional(),
  category: codeScanningAnalysisCategorySchema.optional(),
  classifications: z.array(codeScanningAlertClassificationSchema).optional(),
  commit_sha: z.string().optional(),
  environment: codeScanningAlertEnvironmentSchema.optional(),
  html_url: z.string().optional(),
  location: codeScanningAlertLocationSchema.optional(),
  message: z
    .object({
      text: z.string().optional(),
    })
    .optional(),
  ref: codeScanningRefSchema.optional(),
  state: codeScanningAlertStateSchema.optional(),
});

export const codeScanningAlertRuleSummarySchema = z.object({
  description: z.string().optional(),
  id: z.string().optional().nullable(),
  name: z.string().optional(),
  severity: z
    .union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')])
    .optional()
    .nullable(),
  tags: z.array(z.string()).optional().nullable(),
});

export const securitySeverityLevelSchema = z.union([
  z.literal('low'),
  z.literal('medium'),
  z.literal('high'),
  z.literal('critical'),
]);

export const severitySchema = z.union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')]);

export const codeScanningAlertSetStateSchema = z.union([z.literal('open'), z.literal('dismissed')]);

export const codeScanningAlertSeveritySchema = z.union([
  z.literal('critical'),
  z.literal('high'),
  z.literal('medium'),
  z.literal('low'),
  z.literal('warning'),
  z.literal('note'),
  z.literal('error'),
]);

export const codeScanningAnalysisCommitShaSchema = z.string();

export const codeScanningAnalysisCreatedAtSchema = z.string();

export const codeScanningAnalysisEnvironmentSchema = z.string();

export const codeScanningAnalysisSarifIdSchema = z.string();

export const codeScanningAnalysisUrlSchema = z.string();

export const codeScanningAnalysisDeletionSchema = z.object({
  confirm_delete_url: z.string().nullable(),
  next_analysis_url: z.string().nullable(),
});

export const codeScanningAnalysisSarifFileSchema = z.string();

export const codeScanningAnalysisToolGuidSchema = z.string().nullable();

export const codeScanningAnalysisToolNameSchema = z.string();

export const codeScanningAnalysisToolVersionSchema = z.string().nullable();

export const codeScanningCodeqlDatabaseSchema = z.object({
  content_type: z.string(),
  created_at: z.string(),
  id: z.number(),
  language: z.string(),
  name: z.string(),
  size: z.number(),
  updated_at: z.string(),
  uploader: simpleUserSchema,
  url: z.string(),
});

export const simpleRepositorySchema = z.object({
  archive_url: z.string(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  languages_url: z.string(),
  merges_url: z.string(),
  milestones_url: z.string(),
  name: z.string(),
  node_id: z.string(),
  notifications_url: z.string(),
  owner: simpleUserSchema,
  private: z.boolean(),
  pulls_url: z.string(),
  releases_url: z.string(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  trees_url: z.string(),
  url: z.string(),
});

export const codeScanningAnalysisToolSchema = z.object({
  guid: codeScanningAnalysisToolGuidSchema.optional(),
  name: codeScanningAnalysisToolNameSchema.optional(),
  version: codeScanningAnalysisToolVersionSchema.optional(),
});

export const codeScanningSarifsReceiptSchema = z.object({
  id: codeScanningAnalysisSarifIdSchema.optional(),
  url: z.string().optional(),
});

export const codeScanningSarifsStatusSchema = z.object({
  analyses_url: z.string().optional().nullable(),
  errors: z.array(z.string()).optional().nullable(),
  processing_status: z.union([z.literal('pending'), z.literal('complete'), z.literal('failed')]).optional(),
});

export const processingStatusSchema = z.union([z.literal('pending'), z.literal('complete'), z.literal('failed')]);

export const searchResultTextMatchesSchema = z.array(
  z.object({
    fragment: z.string().optional(),
    matches: z
      .array(
        z.object({
          indices: z.array(z.number()).optional(),
          text: z.string().optional(),
        }),
      )
      .optional(),
    object_type: z.string().optional().nullable(),
    object_url: z.string().optional(),
    property: z.string().optional(),
  }),
);

export const codeownersErrorsSchema = z.object({
  errors: z.array(
    z.object({
      column: z.number(),
      kind: z.string(),
      line: z.number(),
      message: z.string(),
      path: z.string(),
      source: z.string().optional(),
      suggestion: z.string().optional().nullable(),
    }),
  ),
});

export const nullableCodespaceMachineSchema = z
  .object({
    cpus: z.number(),
    display_name: z.string(),
    memory_in_bytes: z.number(),
    name: z.string(),
    operating_system: z.string(),
    prebuild_availability: z.union([z.literal('none'), z.literal('ready'), z.literal('in_progress')]).nullable(),
    storage_in_bytes: z.number(),
  })
  .nullable();

export const locationSchema = z.union([
  z.literal('EastUs'),
  z.literal('SouthEastAsia'),
  z.literal('WestEurope'),
  z.literal('WestUs2'),
]);

export const stateSchema = z.union([
  z.literal('Unknown'),
  z.literal('Created'),
  z.literal('Queued'),
  z.literal('Provisioning'),
  z.literal('Available'),
  z.literal('Awaiting'),
  z.literal('Unavailable'),
  z.literal('Deleted'),
  z.literal('Moved'),
  z.literal('Shutdown'),
  z.literal('Archived'),
  z.literal('Starting'),
  z.literal('ShuttingDown'),
  z.literal('Failed'),
  z.literal('Exporting'),
  z.literal('Updating'),
  z.literal('Rebuilding'),
]);

export const codespaceExportDetailsSchema = z.object({
  branch: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  export_url: z.string().optional(),
  html_url: z.string().optional().nullable(),
  id: z.string().optional(),
  sha: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
});

export const codespaceMachineSchema = z.object({
  cpus: z.number(),
  display_name: z.string(),
  memory_in_bytes: z.number(),
  name: z.string(),
  operating_system: z.string(),
  prebuild_availability: z.union([z.literal('none'), z.literal('ready'), z.literal('in_progress')]).nullable(),
  storage_in_bytes: z.number(),
});

export const prebuildAvailabilitySchema = z.union([z.literal('none'), z.literal('ready'), z.literal('in_progress')]);

export const codespacesOrgSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  selected_repositories_url: z.string().optional(),
  updated_at: z.string(),
  visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
});

export const visibility2Schema = z.union([z.literal('all'), z.literal('private'), z.literal('selected')]);

export const codespacesPublicKeySchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  key: z.string(),
  key_id: z.string(),
  title: z.string().optional(),
  url: z.string().optional(),
});

export const codespacesSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  selected_repositories_url: z.string(),
  updated_at: z.string(),
  visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
});

export const codespacesUserPublicKeySchema = z.object({
  key: z.string(),
  key_id: z.string(),
});

export const collaboratorSchema = z.object({
  avatar_url: z.string(),
  email: z.string().optional().nullable(),
  events_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  gravatar_id: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  login: z.string(),
  name: z.string().optional().nullable(),
  node_id: z.string(),
  organizations_url: z.string(),
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  received_events_url: z.string(),
  repos_url: z.string(),
  role_name: z.string(),
  site_admin: z.boolean(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  type: z.string(),
  url: z.string(),
});

export const combinedBillingUsageSchema = z.object({
  days_left_in_billing_cycle: z.number(),
  estimated_paid_storage_for_month: z.number(),
  estimated_storage_for_month: z.number(),
});

export const simpleCommitStatusSchema = z.object({
  avatar_url: z.string().nullable(),
  context: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  node_id: z.string(),
  required: z.boolean().optional().nullable(),
  state: z.string(),
  target_url: z.string().nullable(),
  updated_at: z.string(),
  url: z.string(),
});

export const nullableGitUserSchema = z
  .object({
    date: z.string().optional(),
    email: z.string().optional(),
    name: z.string().optional(),
  })
  .nullable();

export const verificationSchema = z.object({
  payload: z.string().nullable(),
  reason: z.string(),
  signature: z.string().nullable(),
  verified: z.boolean(),
});

export const diffEntrySchema = z.object({
  additions: z.number(),
  blob_url: z.string(),
  changes: z.number(),
  contents_url: z.string(),
  deletions: z.number(),
  filename: z.string(),
  patch: z.string().optional(),
  previous_filename: z.string().optional(),
  raw_url: z.string(),
  sha: z.string(),
  status: z.union([
    z.literal('added'),
    z.literal('removed'),
    z.literal('modified'),
    z.literal('renamed'),
    z.literal('copied'),
    z.literal('changed'),
    z.literal('unchanged'),
  ]),
});

export const commitActivitySchema = z.object({
  days: z.array(z.number()),
  total: z.number(),
  week: z.number(),
});

export const reactionRollupSchema = z.object({
  '+1': z.number(),
  '-1': z.number(),
  confused: z.number(),
  eyes: z.number(),
  heart: z.number(),
  hooray: z.number(),
  laugh: z.number(),
  rocket: z.number(),
  total_count: z.number(),
  url: z.string(),
});

export const commitSchema = z.object({
  author: nullableSimpleUserSchema,
  comments_url: z.string(),
  commit: z.object({
    author: nullableGitUserSchema,
    comment_count: z.number(),
    committer: nullableGitUserSchema,
    message: z.string(),
    tree: z.object({
      sha: z.string(),
      url: z.string(),
    }),
    url: z.string(),
    verification: verificationSchema.optional(),
  }),
  committer: nullableSimpleUserSchema,
  files: z.array(diffEntrySchema).optional(),
  html_url: z.string(),
  node_id: z.string(),
  parents: z.array(
    z.object({
      html_url: z.string().optional(),
      sha: z.string(),
      url: z.string(),
    }),
  ),
  sha: z.string(),
  stats: z
    .object({
      additions: z.number().optional(),
      deletions: z.number().optional(),
      total: z.number().optional(),
    })
    .optional(),
  url: z.string(),
});

export const status4Schema = z.union([
  z.literal('diverged'),
  z.literal('ahead'),
  z.literal('behind'),
  z.literal('identical'),
]);

export const nullableCodeOfConductSimpleSchema = z
  .object({
    html_url: z.string().nullable(),
    key: z.string(),
    name: z.string(),
    url: z.string(),
  })
  .nullable();

export const nullableCommunityHealthFileSchema = z
  .object({
    html_url: z.string(),
    url: z.string(),
  })
  .nullable();

export const nullableLicenseSimpleSchema = z
  .object({
    html_url: z.string().optional(),
    key: z.string(),
    name: z.string(),
    node_id: z.string(),
    spdx_id: z.string().nullable(),
    url: z.string().nullable(),
  })
  .nullable();

export const contentDirectorySchema = z.array(
  z.object({
    _links: z.object({
      git: z.string().nullable(),
      html: z.string().nullable(),
      self: z.string(),
    }),
    content: z.string().optional(),
    download_url: z.string().nullable(),
    git_url: z.string().nullable(),
    html_url: z.string().nullable(),
    name: z.string(),
    path: z.string(),
    sha: z.string(),
    size: z.number(),
    type: z.union([z.literal('dir'), z.literal('file'), z.literal('submodule'), z.literal('symlink')]),
    url: z.string(),
  }),
);

export const contentFileSchema = z.object({
  _links: z.object({
    git: z.string().nullable(),
    html: z.string().nullable(),
    self: z.string(),
  }),
  content: z.string(),
  download_url: z.string().nullable(),
  encoding: z.string(),
  git_url: z.string().nullable(),
  html_url: z.string().nullable(),
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  size: z.number(),
  submodule_git_url: z.string().optional(),
  target: z.string().optional(),
  type: z.literal('file'),
  url: z.string(),
});

export const typeSchema = z.literal('file');

export const contentSubmoduleSchema = z.object({
  _links: z.object({
    git: z.string().nullable(),
    html: z.string().nullable(),
    self: z.string(),
  }),
  download_url: z.string().nullable(),
  git_url: z.string().nullable(),
  html_url: z.string().nullable(),
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  size: z.number(),
  submodule_git_url: z.string(),
  type: z.literal('submodule'),
  url: z.string(),
});

export const type2Schema = z.literal('submodule');

export const contentSymlinkSchema = z.object({
  _links: z.object({
    git: z.string().nullable(),
    html: z.string().nullable(),
    self: z.string(),
  }),
  download_url: z.string().nullable(),
  git_url: z.string().nullable(),
  html_url: z.string().nullable(),
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  size: z.number(),
  target: z.string(),
  type: z.literal('symlink'),
  url: z.string(),
});

export const type3Schema = z.literal('symlink');

export const contentTrafficSchema = z.object({
  count: z.number(),
  path: z.string(),
  title: z.string(),
  uniques: z.number(),
});

export const contentTreeSchema = z.object({
  _links: z.object({
    git: z.string().nullable(),
    html: z.string().nullable(),
    self: z.string(),
  }),
  download_url: z.string().nullable(),
  entries: z
    .array(
      z.object({
        _links: z.object({
          git: z.string().nullable(),
          html: z.string().nullable(),
          self: z.string(),
        }),
        content: z.string().optional(),
        download_url: z.string().nullable(),
        git_url: z.string().nullable(),
        html_url: z.string().nullable(),
        name: z.string(),
        path: z.string(),
        sha: z.string(),
        size: z.number(),
        type: z.string(),
        url: z.string(),
      }),
    )
    .optional(),
  git_url: z.string().nullable(),
  html_url: z.string().nullable(),
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  size: z.number(),
  type: z.string(),
  url: z.string(),
});

export const contributorSchema = z.object({
  avatar_url: z.string().optional(),
  contributions: z.number(),
  email: z.string().optional(),
  events_url: z.string().optional(),
  followers_url: z.string().optional(),
  following_url: z.string().optional(),
  gists_url: z.string().optional(),
  gravatar_id: z.string().optional().nullable(),
  html_url: z.string().optional(),
  id: z.number().optional(),
  login: z.string().optional(),
  name: z.string().optional(),
  node_id: z.string().optional(),
  organizations_url: z.string().optional(),
  received_events_url: z.string().optional(),
  repos_url: z.string().optional(),
  site_admin: z.boolean().optional(),
  starred_url: z.string().optional(),
  subscriptions_url: z.string().optional(),
  type: z.string(),
  url: z.string().optional(),
});

export const contributorActivitySchema = z.object({
  author: nullableSimpleUserSchema,
  total: z.number(),
  weeks: z.array(
    z.object({
      a: z.number().optional(),
      c: z.number().optional(),
      d: z.number().optional(),
      w: z.number().optional(),
    }),
  ),
});

export const convertedNoteToIssueIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: integrationSchema,
  project_card: z
    .object({
      column_name: z.string(),
      id: z.number(),
      previous_column_name: z.string().optional(),
      project_id: z.number(),
      project_url: z.string(),
      url: z.string(),
    })
    .optional(),
  url: z.string(),
});

export const demilestonedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  milestone: z.object({
    title: z.string(),
  }),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const dependabotAlertPackageSchema = z.object({
  ecosystem: z.string(),
  name: z.string(),
});

export const dependabotAlertSecurityVulnerabilitySchema = z.object({
  first_patched_version: z
    .object({
      identifier: z.string(),
    })
    .nullable(),
  package: dependabotAlertPackageSchema,
  severity: z.union([z.literal('low'), z.literal('medium'), z.literal('high'), z.literal('critical')]),
  vulnerable_version_range: z.string(),
});

export const scopeSchema = z.union([z.literal('development'), z.literal('runtime')]);

export const dismissedReasonSchema = z.union([
  z.literal('fix_started'),
  z.literal('inaccurate'),
  z.literal('no_bandwidth'),
  z.literal('not_used'),
  z.literal('tolerable_risk'),
]);

export const state2Schema = z.union([z.literal('dismissed'), z.literal('fixed'), z.literal('open')]);

export const dependabotAlertSecurityAdvisorySchema = z.object({
  cve_id: z.string().nullable(),
  cvss: z.object({
    score: z.number(),
    vector_string: z.string().nullable(),
  }),
  cwes: z.array(
    z.object({
      cwe_id: z.string(),
      name: z.string(),
    }),
  ),
  description: z.string(),
  ghsa_id: z.string(),
  identifiers: z.array(
    z.object({
      type: z.union([z.literal('CVE'), z.literal('GHSA')]),
      value: z.string(),
    }),
  ),
  published_at: z.string(),
  references: z.array(
    z.object({
      url: z.string(),
    }),
  ),
  severity: z.union([z.literal('low'), z.literal('medium'), z.literal('high'), z.literal('critical')]),
  summary: z.string(),
  updated_at: z.string(),
  vulnerabilities: z.array(dependabotAlertSecurityVulnerabilitySchema),
  withdrawn_at: z.string().nullable(),
});

export const severity2Schema = z.union([
  z.literal('low'),
  z.literal('medium'),
  z.literal('high'),
  z.literal('critical'),
]);

export const dependabotAlertWithRepositorySchema = z.object({
  created_at: alertCreatedAtSchema,
  dependency: z.object({
    manifest_path: z.string().optional(),
    package: dependabotAlertPackageSchema.optional(),
    scope: z
      .union([z.literal('development'), z.literal('runtime')])
      .optional()
      .nullable(),
  }),
  dismissed_at: alertDismissedAtSchema,
  dismissed_by: nullableSimpleUserSchema,
  dismissed_comment: z.string().nullable(),
  dismissed_reason: z
    .union([
      z.literal('fix_started'),
      z.literal('inaccurate'),
      z.literal('no_bandwidth'),
      z.literal('not_used'),
      z.literal('tolerable_risk'),
    ])
    .nullable(),
  fixed_at: alertFixedAtSchema,
  html_url: alertHtmlUrlSchema,
  number: alertNumberSchema,
  repository: simpleRepositorySchema,
  security_advisory: dependabotAlertSecurityAdvisorySchema,
  security_vulnerability: dependabotAlertSecurityVulnerabilitySchema,
  state: z.union([z.literal('dismissed'), z.literal('fixed'), z.literal('open')]),
  updated_at: alertUpdatedAtSchema,
  url: alertUrlSchema,
});

export const dependabotPublicKeySchema = z.object({
  key: z.string(),
  key_id: z.string(),
});

export const dependabotSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  updated_at: z.string(),
});

export const dependencySchema = z.object({
  dependencies: z.array(z.string()).optional(),
  metadata: metadataSchema.optional(),
  package_url: z.string().optional(),
  relationship: z.union([z.literal('direct'), z.literal('indirect')]).optional(),
  scope: z.union([z.literal('runtime'), z.literal('development')]).optional(),
});

export const relationshipSchema = z.union([z.literal('direct'), z.literal('indirect')]);

export const dependencyGraphDiffSchema = z.array(
  z.object({
    change_type: z.union([z.literal('added'), z.literal('removed')]),
    ecosystem: z.string(),
    license: z.string().nullable(),
    manifest: z.string(),
    name: z.string(),
    package_url: z.string().nullable(),
    scope: z.union([z.literal('unknown'), z.literal('runtime'), z.literal('development')]),
    source_repository_url: z.string().nullable(),
    version: z.string(),
    vulnerabilities: z.array(
      z.object({
        advisory_ghsa_id: z.string(),
        advisory_summary: z.string(),
        advisory_url: z.string(),
        severity: z.string(),
      }),
    ),
  }),
);

export const deployKeySchema = z.object({
  added_by: z.string().optional().nullable(),
  created_at: z.string(),
  id: z.number(),
  key: z.string(),
  last_used: z.string().optional().nullable(),
  read_only: z.boolean(),
  title: z.string(),
  url: z.string(),
  verified: z.boolean(),
});

export const deploymentSchema = z.object({
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  description: z.string().nullable(),
  environment: z.string(),
  id: z.number(),
  node_id: z.string(),
  original_environment: z.string().optional(),
  payload: z.union([z.record(z.unknown()), z.string()]),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  production_environment: z.boolean().optional(),
  ref: z.string(),
  repository_url: z.string(),
  sha: z.string(),
  statuses_url: z.string(),
  task: z.string(),
  transient_environment: z.boolean().optional(),
  updated_at: z.string(),
  url: z.string(),
});

export const deploymentBranchPolicySchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  node_id: z.string().optional(),
});

export const deploymentBranchPolicyNamePatternSchema = z.object({
  name: z.string(),
});

export const deploymentBranchPolicySettingsSchema = z
  .object({
    custom_branch_policies: z.boolean(),
    protected_branches: z.boolean(),
  })
  .nullable();

export const deploymentReviewerTypeSchema = z.union([z.literal('User'), z.literal('Team')]);

export const deploymentStatusSchema = z.object({
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  deployment_url: z.string(),
  description: z.string(),
  environment: z.string().optional(),
  environment_url: z.string().optional(),
  id: z.number(),
  log_url: z.string().optional(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  repository_url: z.string(),
  state: z.union([
    z.literal('error'),
    z.literal('failure'),
    z.literal('inactive'),
    z.literal('pending'),
    z.literal('success'),
    z.literal('queued'),
    z.literal('in_progress'),
  ]),
  target_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const state3Schema = z.union([
  z.literal('error'),
  z.literal('failure'),
  z.literal('inactive'),
  z.literal('pending'),
  z.literal('success'),
  z.literal('queued'),
  z.literal('in_progress'),
]);

export const status5Schema = z.union([
  z.literal('added'),
  z.literal('removed'),
  z.literal('modified'),
  z.literal('renamed'),
  z.literal('copied'),
  z.literal('changed'),
  z.literal('unchanged'),
]);

export const discussionSchema = z.object({
  active_lock_reason: z.string().nullable(),
  answer_chosen_at: z.string().nullable(),
  answer_chosen_by: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  answer_html_url: z.string().nullable(),
  author_association: z.union([
    z.literal('COLLABORATOR'),
    z.literal('CONTRIBUTOR'),
    z.literal('FIRST_TIMER'),
    z.literal('FIRST_TIME_CONTRIBUTOR'),
    z.literal('MANNEQUIN'),
    z.literal('MEMBER'),
    z.literal('NONE'),
    z.literal('OWNER'),
  ]),
  body: z.string(),
  category: z.object({
    created_at: z.string(),
    description: z.string(),
    emoji: z.string(),
    id: z.number(),
    is_answerable: z.boolean(),
    name: z.string(),
    node_id: z.string().optional(),
    repository_id: z.number(),
    slug: z.string(),
    updated_at: z.string(),
  }),
  comments: z.number(),
  created_at: z.string(),
  html_url: z.string(),
  id: z.number(),
  locked: z.boolean(),
  node_id: z.string(),
  number: z.number(),
  reactions: z
    .object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    })
    .optional(),
  repository_url: z.string(),
  state: z.union([z.literal('open'), z.literal('locked'), z.literal('converting'), z.literal('transferring')]),
  timeline_url: z.string().optional(),
  title: z.string(),
  updated_at: z.string(),
  user: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
});

export const type4Schema = z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]);

export const authorAssociation2Schema = z.union([
  z.literal('COLLABORATOR'),
  z.literal('CONTRIBUTOR'),
  z.literal('FIRST_TIMER'),
  z.literal('FIRST_TIME_CONTRIBUTOR'),
  z.literal('MANNEQUIN'),
  z.literal('MEMBER'),
  z.literal('NONE'),
  z.literal('OWNER'),
]);

export const state4Schema = z.union([
  z.literal('open'),
  z.literal('locked'),
  z.literal('converting'),
  z.literal('transferring'),
]);

export const emailSchema = z.object({
  email: z.string(),
  primary: z.boolean(),
  verified: z.boolean(),
  visibility: z.string().nullable(),
});

export const emptyObjectSchema = z.record(z.unknown());

export const enterpriseSchema = z.object({
  avatar_url: z.string(),
  created_at: z.string().nullable(),
  description: z.string().optional().nullable(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  slug: z.string(),
  updated_at: z.string().nullable(),
  website_url: z.string().optional().nullable(),
});

export const waitTimerSchema = z.number();

export const environmentApprovalsSchema = z.object({
  comment: z.string(),
  environments: z.array(
    z.object({
      created_at: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      updated_at: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  state: z.union([z.literal('approved'), z.literal('rejected'), z.literal('pending')]),
  user: simpleUserSchema,
});

export const state5Schema = z.union([z.literal('approved'), z.literal('rejected'), z.literal('pending')]);

export const issueCommentSchema = z.object({
  author_association: authorAssociationSchema,
  body: z.string().optional(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  created_at: z.string(),
  html_url: z.string(),
  id: z.number(),
  issue_url: z.string(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  reactions: reactionRollupSchema.optional(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const linkWithTypeSchema = z.object({
  href: z.string(),
  type: z.string(),
});

export const fileCommitSchema = z.object({
  commit: z.object({
    author: z
      .object({
        date: z.string().optional(),
        email: z.string().optional(),
        name: z.string().optional(),
      })
      .optional(),
    committer: z
      .object({
        date: z.string().optional(),
        email: z.string().optional(),
        name: z.string().optional(),
      })
      .optional(),
    html_url: z.string().optional(),
    message: z.string().optional(),
    node_id: z.string().optional(),
    parents: z
      .array(
        z.object({
          html_url: z.string().optional(),
          sha: z.string().optional(),
          url: z.string().optional(),
        }),
      )
      .optional(),
    sha: z.string().optional(),
    tree: z
      .object({
        sha: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    url: z.string().optional(),
    verification: z
      .object({
        payload: z.string().optional().nullable(),
        reason: z.string().optional(),
        signature: z.string().optional().nullable(),
        verified: z.boolean().optional(),
      })
      .optional(),
  }),
  content: z
    .object({
      _links: z
        .object({
          git: z.string().optional(),
          html: z.string().optional(),
          self: z.string().optional(),
        })
        .optional(),
      download_url: z.string().optional(),
      git_url: z.string().optional(),
      html_url: z.string().optional(),
      name: z.string().optional(),
      path: z.string().optional(),
      sha: z.string().optional(),
      size: z.number().optional(),
      type: z.string().optional(),
      url: z.string().optional(),
    })
    .nullable(),
});

export const repositorySchema = z.object({
  allow_auto_merge: z.boolean().optional(),
  allow_forking: z.boolean().optional(),
  allow_merge_commit: z.boolean().optional(),
  allow_rebase_merge: z.boolean().optional(),
  allow_squash_merge: z.boolean().optional(),
  allow_update_branch: z.boolean().optional(),
  anonymous_access_enabled: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string().nullable(),
  default_branch: z.string(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number(),
  forks_count: z.number(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  has_discussions: z.boolean().optional(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().nullable(),
  languages_url: z.string(),
  license: nullableLicenseSimpleSchema,
  master_branch: z.string().optional(),
  merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
  merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().nullable(),
  name: z.string(),
  network_count: z.number().optional(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number(),
  open_issues_count: z.number(),
  organization: nullableSimpleUserSchema.optional(),
  owner: simpleUserSchema,
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string().nullable(),
  releases_url: z.string(),
  size: z.number(),
  squash_merge_commit_message: z
    .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
    .optional(),
  squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string(),
  starred_at: z.string().optional(),
  statuses_url: z.string(),
  subscribers_count: z.number().optional(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional(),
  template_repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string().optional(),
      archived: z.boolean().optional(),
      assignees_url: z.string().optional(),
      blobs_url: z.string().optional(),
      branches_url: z.string().optional(),
      clone_url: z.string().optional(),
      collaborators_url: z.string().optional(),
      comments_url: z.string().optional(),
      commits_url: z.string().optional(),
      compare_url: z.string().optional(),
      contents_url: z.string().optional(),
      contributors_url: z.string().optional(),
      created_at: z.string().optional(),
      default_branch: z.string().optional(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string().optional(),
      description: z.string().optional(),
      disabled: z.boolean().optional(),
      downloads_url: z.string().optional(),
      events_url: z.string().optional(),
      fork: z.boolean().optional(),
      forks_count: z.number().optional(),
      forks_url: z.string().optional(),
      full_name: z.string().optional(),
      git_commits_url: z.string().optional(),
      git_refs_url: z.string().optional(),
      git_tags_url: z.string().optional(),
      git_url: z.string().optional(),
      has_downloads: z.boolean().optional(),
      has_issues: z.boolean().optional(),
      has_pages: z.boolean().optional(),
      has_projects: z.boolean().optional(),
      has_wiki: z.boolean().optional(),
      homepage: z.string().optional(),
      hooks_url: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number().optional(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string().optional(),
      issue_events_url: z.string().optional(),
      issues_url: z.string().optional(),
      keys_url: z.string().optional(),
      labels_url: z.string().optional(),
      language: z.string().optional(),
      languages_url: z.string().optional(),
      merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
      merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
      merges_url: z.string().optional(),
      milestones_url: z.string().optional(),
      mirror_url: z.string().optional(),
      name: z.string().optional(),
      network_count: z.number().optional(),
      node_id: z.string().optional(),
      notifications_url: z.string().optional(),
      open_issues_count: z.number().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          login: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      permissions: z
        .object({
          admin: z.boolean().optional(),
          maintain: z.boolean().optional(),
          pull: z.boolean().optional(),
          push: z.boolean().optional(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean().optional(),
      pulls_url: z.string().optional(),
      pushed_at: z.string().optional(),
      releases_url: z.string().optional(),
      size: z.number().optional(),
      squash_merge_commit_message: z
        .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
        .optional(),
      squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
      ssh_url: z.string().optional(),
      stargazers_count: z.number().optional(),
      stargazers_url: z.string().optional(),
      statuses_url: z.string().optional(),
      subscribers_count: z.number().optional(),
      subscribers_url: z.string().optional(),
      subscription_url: z.string().optional(),
      svn_url: z.string().optional(),
      tags_url: z.string().optional(),
      teams_url: z.string().optional(),
      temp_clone_token: z.string().optional(),
      topics: z.array(z.string()).optional(),
      trees_url: z.string().optional(),
      updated_at: z.string().optional(),
      url: z.string().optional(),
      use_squash_pr_title_as_default: z.boolean().optional(),
      visibility: z.string().optional(),
      watchers_count: z.number().optional(),
    })
    .optional()
    .nullable(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string().nullable(),
  url: z.string(),
  use_squash_pr_title_as_default: z.boolean().optional(),
  visibility: z.string().optional(),
  watchers: z.number(),
  watchers_count: z.number(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const securityAndAnalysisSchema = z
  .object({
    advanced_security: z
      .object({
        status: z.union([z.literal('enabled'), z.literal('disabled')]).optional(),
      })
      .optional(),
    secret_scanning: z
      .object({
        status: z.union([z.literal('enabled'), z.literal('disabled')]).optional(),
      })
      .optional(),
    secret_scanning_push_protection: z
      .object({
        status: z.union([z.literal('enabled'), z.literal('disabled')]).optional(),
      })
      .optional(),
  })
  .nullable();

export const nullableRepositorySchema = z
  .object({
    allow_auto_merge: z.boolean().optional(),
    allow_forking: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_rebase_merge: z.boolean().optional(),
    allow_squash_merge: z.boolean().optional(),
    allow_update_branch: z.boolean().optional(),
    anonymous_access_enabled: z.boolean().optional(),
    archive_url: z.string(),
    archived: z.boolean(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    clone_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string(),
    created_at: z.string().nullable(),
    default_branch: z.string(),
    delete_branch_on_merge: z.boolean().optional(),
    deployments_url: z.string(),
    description: z.string().nullable(),
    disabled: z.boolean(),
    downloads_url: z.string(),
    events_url: z.string(),
    fork: z.boolean(),
    forks: z.number(),
    forks_count: z.number(),
    forks_url: z.string(),
    full_name: z.string(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    has_discussions: z.boolean().optional(),
    has_downloads: z.boolean(),
    has_issues: z.boolean(),
    has_pages: z.boolean(),
    has_projects: z.boolean(),
    has_wiki: z.boolean(),
    homepage: z.string().nullable(),
    hooks_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    is_template: z.boolean().optional(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    language: z.string().nullable(),
    languages_url: z.string(),
    license: nullableLicenseSimpleSchema,
    master_branch: z.string().optional(),
    merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
    merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
    merges_url: z.string(),
    milestones_url: z.string(),
    mirror_url: z.string().nullable(),
    name: z.string(),
    network_count: z.number().optional(),
    node_id: z.string(),
    notifications_url: z.string(),
    open_issues: z.number(),
    open_issues_count: z.number(),
    organization: nullableSimpleUserSchema.optional(),
    owner: simpleUserSchema,
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean().optional(),
        pull: z.boolean(),
        push: z.boolean(),
        triage: z.boolean().optional(),
      })
      .optional(),
    private: z.boolean(),
    pulls_url: z.string(),
    pushed_at: z.string().nullable(),
    releases_url: z.string(),
    size: z.number(),
    squash_merge_commit_message: z
      .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
      .optional(),
    squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
    ssh_url: z.string(),
    stargazers_count: z.number(),
    stargazers_url: z.string(),
    starred_at: z.string().optional(),
    statuses_url: z.string(),
    subscribers_count: z.number().optional(),
    subscribers_url: z.string(),
    subscription_url: z.string(),
    svn_url: z.string(),
    tags_url: z.string(),
    teams_url: z.string(),
    temp_clone_token: z.string().optional(),
    template_repository: z
      .object({
        allow_auto_merge: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string().optional(),
        archived: z.boolean().optional(),
        assignees_url: z.string().optional(),
        blobs_url: z.string().optional(),
        branches_url: z.string().optional(),
        clone_url: z.string().optional(),
        collaborators_url: z.string().optional(),
        comments_url: z.string().optional(),
        commits_url: z.string().optional(),
        compare_url: z.string().optional(),
        contents_url: z.string().optional(),
        contributors_url: z.string().optional(),
        created_at: z.string().optional(),
        default_branch: z.string().optional(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string().optional(),
        description: z.string().optional(),
        disabled: z.boolean().optional(),
        downloads_url: z.string().optional(),
        events_url: z.string().optional(),
        fork: z.boolean().optional(),
        forks_count: z.number().optional(),
        forks_url: z.string().optional(),
        full_name: z.string().optional(),
        git_commits_url: z.string().optional(),
        git_refs_url: z.string().optional(),
        git_tags_url: z.string().optional(),
        git_url: z.string().optional(),
        has_downloads: z.boolean().optional(),
        has_issues: z.boolean().optional(),
        has_pages: z.boolean().optional(),
        has_projects: z.boolean().optional(),
        has_wiki: z.boolean().optional(),
        homepage: z.string().optional(),
        hooks_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string().optional(),
        issue_events_url: z.string().optional(),
        issues_url: z.string().optional(),
        keys_url: z.string().optional(),
        labels_url: z.string().optional(),
        language: z.string().optional(),
        languages_url: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string().optional(),
        milestones_url: z.string().optional(),
        mirror_url: z.string().optional(),
        name: z.string().optional(),
        network_count: z.number().optional(),
        node_id: z.string().optional(),
        notifications_url: z.string().optional(),
        open_issues_count: z.number().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        permissions: z
          .object({
            admin: z.boolean().optional(),
            maintain: z.boolean().optional(),
            pull: z.boolean().optional(),
            push: z.boolean().optional(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean().optional(),
        pulls_url: z.string().optional(),
        pushed_at: z.string().optional(),
        releases_url: z.string().optional(),
        size: z.number().optional(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string().optional(),
        stargazers_count: z.number().optional(),
        stargazers_url: z.string().optional(),
        statuses_url: z.string().optional(),
        subscribers_count: z.number().optional(),
        subscribers_url: z.string().optional(),
        subscription_url: z.string().optional(),
        svn_url: z.string().optional(),
        tags_url: z.string().optional(),
        teams_url: z.string().optional(),
        temp_clone_token: z.string().optional(),
        topics: z.array(z.string()).optional(),
        trees_url: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.string().optional(),
        watchers_count: z.number().optional(),
      })
      .optional()
      .nullable(),
    topics: z.array(z.string()).optional(),
    trees_url: z.string(),
    updated_at: z.string().nullable(),
    url: z.string(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    visibility: z.string().optional(),
    watchers: z.number(),
    watchers_count: z.number(),
    web_commit_signoff_required: z.boolean().optional(),
  })
  .nullable();

export const mergeCommitMessageSchema = z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]);

export const mergeCommitTitleSchema = z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]);

export const squashMergeCommitMessageSchema = z.union([
  z.literal('PR_BODY'),
  z.literal('COMMIT_MESSAGES'),
  z.literal('BLANK'),
]);

export const squashMergeCommitTitleSchema = z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]);

export const gistCommentSchema = z.object({
  author_association: authorAssociationSchema,
  body: z.string(),
  created_at: z.string(),
  id: z.number(),
  node_id: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const gistCommitSchema = z.object({
  change_status: z.object({
    additions: z.number().optional(),
    deletions: z.number().optional(),
    total: z.number().optional(),
  }),
  committed_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
  version: z.string(),
});

export const gistHistorySchema = z.object({
  change_status: z
    .object({
      additions: z.number().optional(),
      deletions: z.number().optional(),
      total: z.number().optional(),
    })
    .optional(),
  committed_at: z.string().optional(),
  url: z.string().optional(),
  user: nullableSimpleUserSchema.optional(),
  version: z.string().optional(),
});

export const publicUserSchema = z.object({
  avatar_url: z.string(),
  bio: z.string().nullable(),
  blog: z.string().nullable(),
  collaborators: z.number().optional(),
  company: z.string().nullable(),
  created_at: z.string(),
  disk_usage: z.number().optional(),
  email: z.string().nullable(),
  events_url: z.string(),
  followers: z.number(),
  followers_url: z.string(),
  following: z.number(),
  following_url: z.string(),
  gists_url: z.string(),
  gravatar_id: z.string().nullable(),
  hireable: z.boolean().nullable(),
  html_url: z.string(),
  id: z.number(),
  location: z.string().nullable(),
  login: z.string(),
  name: z.string().nullable(),
  node_id: z.string(),
  organizations_url: z.string(),
  owned_private_repos: z.number().optional(),
  plan: z
    .object({
      collaborators: z.number(),
      name: z.string(),
      private_repos: z.number(),
      space: z.number(),
    })
    .optional(),
  private_gists: z.number().optional(),
  public_gists: z.number(),
  public_repos: z.number(),
  received_events_url: z.string(),
  repos_url: z.string(),
  site_admin: z.boolean(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  suspended_at: z.string().optional().nullable(),
  total_private_repos: z.number().optional(),
  twitter_username: z.string().optional().nullable(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const gitCommitSchema = z.object({
  author: z.object({
    date: z.string(),
    email: z.string(),
    name: z.string(),
  }),
  committer: z.object({
    date: z.string(),
    email: z.string(),
    name: z.string(),
  }),
  html_url: z.string(),
  message: z.string(),
  node_id: z.string(),
  parents: z.array(
    z.object({
      html_url: z.string(),
      sha: z.string(),
      url: z.string(),
    }),
  ),
  sha: z.string(),
  tree: z.object({
    sha: z.string(),
    url: z.string(),
  }),
  url: z.string(),
  verification: z.object({
    payload: z.string().nullable(),
    reason: z.string(),
    signature: z.string().nullable(),
    verified: z.boolean(),
  }),
});

export const gitRefSchema = z.object({
  node_id: z.string(),
  object: z.object({
    sha: z.string(),
    type: z.string(),
    url: z.string(),
  }),
  ref: z.string(),
  url: z.string(),
});

export const gitTagSchema = z.object({
  message: z.string(),
  node_id: z.string(),
  object: z.object({
    sha: z.string(),
    type: z.string(),
    url: z.string(),
  }),
  sha: z.string(),
  tag: z.string(),
  tagger: z.object({
    date: z.string(),
    email: z.string(),
    name: z.string(),
  }),
  url: z.string(),
  verification: verificationSchema.optional(),
});

export const gitTreeSchema = z.object({
  sha: z.string(),
  tree: z.array(
    z.object({
      mode: z.string().optional(),
      path: z.string().optional(),
      sha: z.string().optional(),
      size: z.number().optional(),
      type: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  truncated: z.boolean(),
  url: z.string(),
});

export const gitignoreTemplateSchema = z.object({
  name: z.string(),
  source: z.string(),
});

export const gpgKeySchema = z.object({
  can_certify: z.boolean(),
  can_encrypt_comms: z.boolean(),
  can_encrypt_storage: z.boolean(),
  can_sign: z.boolean(),
  created_at: z.string(),
  emails: z.array(
    z.object({
      email: z.string().optional(),
      verified: z.boolean().optional(),
    }),
  ),
  expires_at: z.string().nullable(),
  id: z.number(),
  key_id: z.string(),
  name: z.string().optional().nullable(),
  primary_key_id: z.number().nullable(),
  public_key: z.string(),
  raw_key: z.string().nullable(),
  revoked: z.boolean(),
  subkeys: z.array(
    z.object({
      can_certify: z.boolean().optional(),
      can_encrypt_comms: z.boolean().optional(),
      can_encrypt_storage: z.boolean().optional(),
      can_sign: z.boolean().optional(),
      created_at: z.string().optional(),
      emails: z.array(z.unknown()).optional(),
      expires_at: z.string().optional().nullable(),
      id: z.number().optional(),
      key_id: z.string().optional(),
      primary_key_id: z.number().optional(),
      public_key: z.string().optional(),
      raw_key: z.string().optional().nullable(),
      revoked: z.boolean().optional(),
      subkeys: z.array(z.unknown()).optional(),
    }),
  ),
});

export const webhookConfigContentTypeSchema = z.string();

export const webhookConfigInsecureSslSchema = z.union([z.string(), z.number()]);

export const webhookConfigSecretSchema = z.string();

export const webhookConfigUrlSchema = z.string();

export const hookResponseSchema = z.object({
  code: z.number().nullable(),
  message: z.string().nullable(),
  status: z.string().nullable(),
});

export const hookDeliverySchema = z.object({
  action: z.string().nullable(),
  delivered_at: z.string(),
  duration: z.number(),
  event: z.string(),
  guid: z.string(),
  id: z.number(),
  installation_id: z.number().nullable(),
  redelivery: z.boolean(),
  repository_id: z.number().nullable(),
  request: z.object({
    headers: z.record(z.unknown()).nullable(),
    payload: z.record(z.unknown()).nullable(),
  }),
  response: z.object({
    headers: z.record(z.unknown()).nullable(),
    payload: z.record(z.unknown()).nullable(),
  }),
  status: z.string(),
  status_code: z.number(),
  url: z.string().optional(),
});

export const hookDeliveryItemSchema = z.object({
  action: z.string().nullable(),
  delivered_at: z.string(),
  duration: z.number(),
  event: z.string(),
  guid: z.string(),
  id: z.number(),
  installation_id: z.number().nullable(),
  redelivery: z.boolean(),
  repository_id: z.number().nullable(),
  status: z.string(),
  status_code: z.number(),
});

export const hovercardSchema = z.object({
  contexts: z.array(
    z.object({
      message: z.string(),
      octicon: z.string(),
    }),
  ),
});

export const installationSchema = z.object({
  access_tokens_url: z.string(),
  account: z.union([simpleUserSchema, enterpriseSchema]).nullable(),
  app_id: z.number(),
  app_slug: z.string(),
  contact_email: z.string().optional().nullable(),
  created_at: z.string(),
  events: z.array(z.string()),
  has_multiple_single_files: z.boolean().optional(),
  html_url: z.string(),
  id: z.number(),
  permissions: appPermissionsSchema,
  repositories_url: z.string(),
  repository_selection: z.union([z.literal('all'), z.literal('selected')]),
  single_file_name: z.string().nullable(),
  single_file_paths: z.array(z.string()).optional(),
  suspended_at: z.string().nullable(),
  suspended_by: nullableSimpleUserSchema,
  target_id: z.number(),
  target_type: z.string(),
  updated_at: z.string(),
});

export const installationTokenSchema = z.object({
  expires_at: z.string(),
  has_multiple_single_files: z.boolean().optional(),
  permissions: appPermissionsSchema.optional(),
  repositories: z.array(repositorySchema).optional(),
  repository_selection: z.union([z.literal('all'), z.literal('selected')]).optional(),
  single_file: z.string().optional(),
  single_file_paths: z.array(z.string()).optional(),
  token: z.string(),
});

export const interactionExpirySchema = z.union([
  z.literal('one_day'),
  z.literal('three_days'),
  z.literal('one_week'),
  z.literal('one_month'),
  z.literal('six_months'),
]);

export const interactionGroupSchema = z.union([
  z.literal('existing_users'),
  z.literal('contributors_only'),
  z.literal('collaborators_only'),
]);

export const interactionLimitSchema = z.object({
  expiry: interactionExpirySchema.optional(),
  limit: interactionGroupSchema,
});

export const interactionLimitResponseSchema = z.object({
  expires_at: z.string(),
  limit: interactionGroupSchema,
  origin: z.string(),
});

export const nullableMilestoneSchema = z
  .object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: nullableSimpleUserSchema,
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  })
  .nullable();

export const stateReasonSchema = z.union([z.literal('completed'), z.literal('reopened'), z.literal('not_planned')]);

export const issueEventDismissedReviewSchema = z.object({
  dismissal_commit_id: z.string().optional().nullable(),
  dismissal_message: z.string().nullable(),
  review_id: z.number(),
  state: z.string(),
});

export const nullableIssueSchema = z
  .object({
    active_lock_reason: z.string().optional().nullable(),
    assignee: nullableSimpleUserSchema,
    assignees: z.array(simpleUserSchema).optional().nullable(),
    author_association: authorAssociationSchema,
    body: z.string().optional().nullable(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    closed_at: z.string().nullable(),
    closed_by: nullableSimpleUserSchema.optional(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z.array(
      z.union([
        z.string(),
        z.object({
          color: z.string().optional().nullable(),
          default: z.boolean().optional(),
          description: z.string().optional().nullable(),
          id: z.number().optional(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          url: z.string().optional(),
        }),
      ]),
    ),
    labels_url: z.string(),
    locked: z.boolean(),
    milestone: nullableMilestoneSchema,
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: nullableIntegrationSchema.optional(),
    pull_request: z
      .object({
        diff_url: z.string().nullable(),
        html_url: z.string().nullable(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().nullable(),
        url: z.string().nullable(),
      })
      .optional(),
    reactions: reactionRollupSchema.optional(),
    repository: repositorySchema.optional(),
    repository_url: z.string(),
    state: z.string(),
    state_reason: z
      .union([z.literal('completed'), z.literal('reopened'), z.literal('not_planned')])
      .optional()
      .nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: nullableSimpleUserSchema,
  })
  .nullable();

export const issueEventLabelSchema = z.object({
  color: z.string().nullable(),
  name: z.string().nullable(),
});

export const issueEventMilestoneSchema = z.object({
  title: z.string(),
});

export const issueEventProjectCardSchema = z.object({
  column_name: z.string(),
  id: z.number(),
  previous_column_name: z.string().optional(),
  project_id: z.number(),
  project_url: z.string(),
  url: z.string(),
});

export const issueEventRenameSchema = z.object({
  from: z.string(),
  to: z.string(),
});

export const labeledIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  label: z.object({
    color: z.string(),
    name: z.string(),
  }),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const unlabeledIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  label: z.object({
    color: z.string(),
    name: z.string(),
  }),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const assignedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  assignee: simpleUserSchema,
  assigner: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: integrationSchema,
  url: z.string(),
});

export const unassignedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  assignee: simpleUserSchema,
  assigner: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const milestonedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  milestone: z.object({
    title: z.string(),
  }),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const renamedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  rename: z.object({
    from: z.string(),
    to: z.string(),
  }),
  url: z.string(),
});

export const reviewDismissedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  dismissed_review: z.object({
    dismissal_commit_id: z.string().optional(),
    dismissal_message: z.string().nullable(),
    review_id: z.number(),
    state: z.string(),
  }),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const lockedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  lock_reason: z.string().nullable(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const addedToProjectIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  project_card: z
    .object({
      column_name: z.string(),
      id: z.number(),
      previous_column_name: z.string().optional(),
      project_id: z.number(),
      project_url: z.string(),
      url: z.string(),
    })
    .optional(),
  url: z.string(),
});

export const movedColumnInProjectIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  project_card: z
    .object({
      column_name: z.string(),
      id: z.number(),
      previous_column_name: z.string().optional(),
      project_id: z.number(),
      project_url: z.string(),
      url: z.string(),
    })
    .optional(),
  url: z.string(),
});

export const removedFromProjectIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  project_card: z
    .object({
      column_name: z.string(),
      id: z.number(),
      previous_column_name: z.string().optional(),
      project_id: z.number(),
      project_url: z.string(),
      url: z.string(),
    })
    .optional(),
  url: z.string(),
});

export const issueSearchResultItemSchema = z.object({
  active_lock_reason: z.string().optional().nullable(),
  assignee: nullableSimpleUserSchema,
  assignees: z.array(simpleUserSchema).optional().nullable(),
  author_association: authorAssociationSchema,
  body: z.string().optional(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  closed_at: z.string().nullable(),
  comments: z.number(),
  comments_url: z.string(),
  created_at: z.string(),
  draft: z.boolean().optional(),
  events_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  labels: z.array(
    z.object({
      color: z.string().optional(),
      default: z.boolean().optional(),
      description: z.string().optional().nullable(),
      id: z.number().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  labels_url: z.string(),
  locked: z.boolean(),
  milestone: nullableMilestoneSchema,
  node_id: z.string(),
  number: z.number(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  pull_request: z
    .object({
      diff_url: z.string().nullable(),
      html_url: z.string().nullable(),
      merged_at: z.string().optional().nullable(),
      patch_url: z.string().nullable(),
      url: z.string().nullable(),
    })
    .optional(),
  reactions: reactionRollupSchema.optional(),
  repository: repositorySchema.optional(),
  repository_url: z.string(),
  score: z.number(),
  state: z.string(),
  state_reason: z.string().optional().nullable(),
  text_matches: searchResultTextMatchesSchema.optional(),
  timeline_url: z.string().optional(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const jobSchema = z.object({
  check_run_url: z.string(),
  completed_at: z.string().nullable(),
  conclusion: z
    .union([
      z.literal('success'),
      z.literal('failure'),
      z.literal('neutral'),
      z.literal('cancelled'),
      z.literal('skipped'),
      z.literal('timed_out'),
      z.literal('action_required'),
    ])
    .nullable(),
  head_branch: z.string().nullable(),
  head_sha: z.string(),
  html_url: z.string().nullable(),
  id: z.number(),
  labels: z.array(z.string()),
  name: z.string(),
  node_id: z.string(),
  run_attempt: z.number().optional(),
  run_id: z.number(),
  run_url: z.string(),
  runner_group_id: z.number().nullable(),
  runner_group_name: z.string().nullable(),
  runner_id: z.number().nullable(),
  runner_name: z.string().nullable(),
  started_at: z.string(),
  status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]),
  steps: z
    .array(
      z.object({
        completed_at: z.string().optional().nullable(),
        conclusion: z.string().nullable(),
        name: z.string(),
        number: z.number(),
        started_at: z.string().optional().nullable(),
        status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]),
      }),
    )
    .optional(),
  url: z.string(),
  workflow_name: z.string().nullable(),
});

export const keySchema = z.object({
  created_at: z.string(),
  id: z.number(),
  key: z.string(),
  read_only: z.boolean(),
  title: z.string(),
  url: z.string(),
  verified: z.boolean(),
});

export const keySimpleSchema = z.object({
  id: z.number(),
  key: z.string(),
});

export const labelSchema = z.object({
  color: z.string(),
  default: z.boolean(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  url: z.string(),
});

export const labelSearchResultItemSchema = z.object({
  color: z.string(),
  default: z.boolean(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  score: z.number(),
  text_matches: searchResultTextMatchesSchema.optional(),
  url: z.string(),
});

export const languageSchema = z.record(z.number());

export const licenseSchema = z.object({
  body: z.string(),
  conditions: z.array(z.string()),
  description: z.string(),
  featured: z.boolean(),
  html_url: z.string(),
  implementation: z.string(),
  key: z.string(),
  limitations: z.array(z.string()),
  name: z.string(),
  node_id: z.string(),
  permissions: z.array(z.string()),
  spdx_id: z.string().nullable(),
  url: z.string().nullable(),
});

export const licenseContentSchema = z.object({
  _links: z.object({
    git: z.string().nullable(),
    html: z.string().nullable(),
    self: z.string(),
  }),
  content: z.string(),
  download_url: z.string().nullable(),
  encoding: z.string(),
  git_url: z.string().nullable(),
  html_url: z.string().nullable(),
  license: nullableLicenseSimpleSchema,
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  size: z.number(),
  type: z.string(),
  url: z.string(),
});

export const licenseSimpleSchema = z.object({
  html_url: z.string().optional(),
  key: z.string(),
  name: z.string(),
  node_id: z.string(),
  spdx_id: z.string().nullable(),
  url: z.string().nullable(),
});

export const linkSchema = z.object({
  href: z.string(),
});

export const manifestSchema = z.object({
  file: z
    .object({
      source_location: z.string().optional(),
    })
    .optional(),
  metadata: metadataSchema.optional(),
  name: z.string(),
  resolved: z.record(dependencySchema).optional(),
});

export const marketplaceAccountSchema = z.object({
  email: z.string().optional().nullable(),
  id: z.number(),
  login: z.string(),
  node_id: z.string().optional(),
  organization_billing_email: z.string().optional().nullable(),
  type: z.string(),
  url: z.string(),
});

export const marketplaceListingPlanSchema = z.object({
  accounts_url: z.string(),
  bullets: z.array(z.string()),
  description: z.string(),
  has_free_trial: z.boolean(),
  id: z.number(),
  monthly_price_in_cents: z.number(),
  name: z.string(),
  number: z.number(),
  price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
  state: z.string(),
  unit_name: z.string().nullable(),
  url: z.string(),
  yearly_price_in_cents: z.number(),
});

export const priceModelSchema = z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]);

export const marketplacePurchaseSchema = z.object({
  email: z.string().optional().nullable(),
  id: z.number(),
  login: z.string(),
  marketplace_pending_change: z
    .object({
      effective_date: z.string().optional(),
      id: z.number().optional(),
      is_installed: z.boolean().optional(),
      plan: marketplaceListingPlanSchema.optional(),
      unit_count: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
  marketplace_purchase: z.object({
    billing_cycle: z.string().optional(),
    free_trial_ends_on: z.string().optional().nullable(),
    is_installed: z.boolean().optional(),
    next_billing_date: z.string().optional().nullable(),
    on_free_trial: z.boolean().optional(),
    plan: marketplaceListingPlanSchema.optional(),
    unit_count: z.number().optional().nullable(),
    updated_at: z.string().optional(),
  }),
  organization_billing_email: z.string().optional(),
  type: z.string(),
  url: z.string(),
});

export const mergedUpstreamSchema = z.object({
  base_branch: z.string().optional(),
  merge_type: z.union([z.literal('merge'), z.literal('fast-forward'), z.literal('none')]).optional(),
  message: z.string().optional(),
});

export const mergeTypeSchema = z.union([z.literal('merge'), z.literal('fast-forward'), z.literal('none')]);

export const metadata2Schema = z.record(z.union([z.string(), z.number(), z.boolean()]).nullable());

export const migrationSchema = z.object({
  archive_url: z.string().optional(),
  created_at: z.string(),
  exclude: z.array(z.unknown()).optional(),
  exclude_attachments: z.boolean(),
  exclude_git_data: z.boolean(),
  exclude_metadata: z.boolean(),
  exclude_owner_projects: z.boolean(),
  exclude_releases: z.boolean(),
  guid: z.string(),
  id: z.number(),
  lock_repositories: z.boolean(),
  node_id: z.string(),
  org_metadata_only: z.boolean(),
  owner: nullableSimpleUserSchema,
  repositories: z.array(repositorySchema),
  state: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const milestoneSchema = z.object({
  closed_at: z.string().nullable(),
  closed_issues: z.number(),
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  description: z.string().nullable(),
  due_on: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  labels_url: z.string(),
  node_id: z.string(),
  number: z.number(),
  open_issues: z.number(),
  state: z.union([z.literal('open'), z.literal('closed')]),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const state6Schema = z.union([z.literal('open'), z.literal('closed')]);

export const minimalRepositorySchema = z.object({
  allow_forking: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean().optional(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string().optional(),
  code_of_conduct: codeOfConductSchema.optional(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string().optional().nullable(),
  default_branch: z.string().optional(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean().optional(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number().optional(),
  forks_count: z.number().optional(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string().optional(),
  has_discussions: z.boolean().optional(),
  has_downloads: z.boolean().optional(),
  has_issues: z.boolean().optional(),
  has_pages: z.boolean().optional(),
  has_projects: z.boolean().optional(),
  has_wiki: z.boolean().optional(),
  homepage: z.string().optional().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().optional().nullable(),
  languages_url: z.string(),
  license: z
    .object({
      key: z.string().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      spdx_id: z.string().optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().optional().nullable(),
  name: z.string(),
  network_count: z.number().optional(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number().optional(),
  open_issues_count: z.number().optional(),
  owner: simpleUserSchema,
  permissions: z
    .object({
      admin: z.boolean().optional(),
      maintain: z.boolean().optional(),
      pull: z.boolean().optional(),
      push: z.boolean().optional(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string().optional().nullable(),
  releases_url: z.string(),
  role_name: z.string().optional(),
  security_and_analysis: securityAndAnalysisSchema.optional(),
  size: z.number().optional(),
  ssh_url: z.string().optional(),
  stargazers_count: z.number().optional(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_count: z.number().optional(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string().optional(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string().optional().nullable(),
  url: z.string(),
  visibility: z.string().optional(),
  watchers: z.number().optional(),
  watchers_count: z.number().optional(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const nullableAlertUpdatedAtSchema = z.string().nullable();

export const nullableCollaboratorSchema = z
  .object({
    avatar_url: z.string(),
    email: z.string().optional().nullable(),
    events_url: z.string(),
    followers_url: z.string(),
    following_url: z.string(),
    gists_url: z.string(),
    gravatar_id: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    login: z.string(),
    name: z.string().optional().nullable(),
    node_id: z.string(),
    organizations_url: z.string(),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean().optional(),
        pull: z.boolean(),
        push: z.boolean(),
        triage: z.boolean().optional(),
      })
      .optional(),
    received_events_url: z.string(),
    repos_url: z.string(),
    role_name: z.string(),
    site_admin: z.boolean(),
    starred_url: z.string(),
    subscriptions_url: z.string(),
    type: z.string(),
    url: z.string(),
  })
  .nullable();

export const nullableMinimalRepositorySchema = z
  .object({
    allow_forking: z.boolean().optional(),
    archive_url: z.string(),
    archived: z.boolean().optional(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    clone_url: z.string().optional(),
    code_of_conduct: codeOfConductSchema.optional(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string(),
    created_at: z.string().optional().nullable(),
    default_branch: z.string().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    deployments_url: z.string(),
    description: z.string().nullable(),
    disabled: z.boolean().optional(),
    downloads_url: z.string(),
    events_url: z.string(),
    fork: z.boolean(),
    forks: z.number().optional(),
    forks_count: z.number().optional(),
    forks_url: z.string(),
    full_name: z.string(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string().optional(),
    has_discussions: z.boolean().optional(),
    has_downloads: z.boolean().optional(),
    has_issues: z.boolean().optional(),
    has_pages: z.boolean().optional(),
    has_projects: z.boolean().optional(),
    has_wiki: z.boolean().optional(),
    homepage: z.string().optional().nullable(),
    hooks_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    is_template: z.boolean().optional(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    language: z.string().optional().nullable(),
    languages_url: z.string(),
    license: z
      .object({
        key: z.string().optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        spdx_id: z.string().optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    merges_url: z.string(),
    milestones_url: z.string(),
    mirror_url: z.string().optional().nullable(),
    name: z.string(),
    network_count: z.number().optional(),
    node_id: z.string(),
    notifications_url: z.string(),
    open_issues: z.number().optional(),
    open_issues_count: z.number().optional(),
    owner: simpleUserSchema,
    permissions: z
      .object({
        admin: z.boolean().optional(),
        maintain: z.boolean().optional(),
        pull: z.boolean().optional(),
        push: z.boolean().optional(),
        triage: z.boolean().optional(),
      })
      .optional(),
    private: z.boolean(),
    pulls_url: z.string(),
    pushed_at: z.string().optional().nullable(),
    releases_url: z.string(),
    role_name: z.string().optional(),
    security_and_analysis: securityAndAnalysisSchema.optional(),
    size: z.number().optional(),
    ssh_url: z.string().optional(),
    stargazers_count: z.number().optional(),
    stargazers_url: z.string(),
    statuses_url: z.string(),
    subscribers_count: z.number().optional(),
    subscribers_url: z.string(),
    subscription_url: z.string(),
    svn_url: z.string().optional(),
    tags_url: z.string(),
    teams_url: z.string(),
    temp_clone_token: z.string().optional(),
    topics: z.array(z.string()).optional(),
    trees_url: z.string(),
    updated_at: z.string().optional().nullable(),
    url: z.string(),
    visibility: z.string().optional(),
    watchers: z.number().optional(),
    watchers_count: z.number().optional(),
    web_commit_signoff_required: z.boolean().optional(),
  })
  .nullable();

export const nullableSimpleCommitSchema = z
  .object({
    author: z
      .object({
        email: z.string(),
        name: z.string(),
      })
      .nullable(),
    committer: z
      .object({
        email: z.string(),
        name: z.string(),
      })
      .nullable(),
    id: z.string(),
    message: z.string(),
    timestamp: z.string(),
    tree_id: z.string(),
  })
  .nullable();

export const nullableTeamSimpleSchema = z
  .object({
    description: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    ldap_dn: z.string().optional(),
    members_url: z.string(),
    name: z.string(),
    node_id: z.string(),
    permission: z.string(),
    privacy: z.string().optional(),
    repositories_url: z.string(),
    slug: z.string(),
    url: z.string(),
  })
  .nullable();

export const oidcCustomSubSchema = z.object({
  include_claim_keys: z.array(z.string()),
});

export const oidcCustomSubRepoSchema = z.object({
  include_claim_keys: z.array(z.string()).optional(),
  use_default: z.boolean(),
});

export const orgHookSchema = z.object({
  active: z.boolean(),
  config: z.object({
    content_type: z.string().optional(),
    insecure_ssl: z.string().optional(),
    secret: z.string().optional(),
    url: z.string().optional(),
  }),
  created_at: z.string(),
  deliveries_url: z.string().optional(),
  events: z.array(z.string()),
  id: z.number(),
  name: z.string(),
  ping_url: z.string(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const organizationSimpleSchema = z.object({
  avatar_url: z.string(),
  description: z.string().nullable(),
  events_url: z.string(),
  hooks_url: z.string(),
  id: z.number(),
  issues_url: z.string(),
  login: z.string(),
  members_url: z.string(),
  node_id: z.string(),
  public_members_url: z.string(),
  repos_url: z.string(),
  url: z.string(),
});

export const roleSchema = z.union([z.literal('admin'), z.literal('member'), z.literal('billing_manager')]);

export const state7Schema = z.union([z.literal('active'), z.literal('pending')]);

export const organizationActionsSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  selected_repositories_url: z.string().optional(),
  updated_at: z.string(),
  visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
});

export const organizationActionsVariableSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  selected_repositories_url: z.string().optional(),
  updated_at: z.string(),
  value: z.string(),
  visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
});

export const organizationDependabotSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  selected_repositories_url: z.string().optional(),
  updated_at: z.string(),
  visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
});

export const organizationFullSchema = z.object({
  advanced_security_enabled_for_new_repositories: z.boolean().optional(),
  avatar_url: z.string(),
  billing_email: z.string().optional().nullable(),
  blog: z.string().optional(),
  collaborators: z.number().optional().nullable(),
  company: z.string().optional(),
  created_at: z.string(),
  default_repository_permission: z.string().optional().nullable(),
  dependabot_alerts_enabled_for_new_repositories: z.boolean().optional(),
  dependabot_security_updates_enabled_for_new_repositories: z.boolean().optional(),
  dependency_graph_enabled_for_new_repositories: z.boolean().optional(),
  description: z.string().nullable(),
  disk_usage: z.number().optional().nullable(),
  email: z.string().optional(),
  events_url: z.string(),
  followers: z.number(),
  following: z.number(),
  has_organization_projects: z.boolean(),
  has_repository_projects: z.boolean(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_verified: z.boolean().optional(),
  issues_url: z.string(),
  location: z.string().optional(),
  login: z.string(),
  members_allowed_repository_creation_type: z.string().optional(),
  members_can_create_internal_repositories: z.boolean().optional(),
  members_can_create_pages: z.boolean().optional(),
  members_can_create_private_pages: z.boolean().optional(),
  members_can_create_private_repositories: z.boolean().optional(),
  members_can_create_public_pages: z.boolean().optional(),
  members_can_create_public_repositories: z.boolean().optional(),
  members_can_create_repositories: z.boolean().optional().nullable(),
  members_can_fork_private_repositories: z.boolean().optional().nullable(),
  members_url: z.string(),
  name: z.string().optional(),
  node_id: z.string(),
  owned_private_repos: z.number().optional(),
  plan: z
    .object({
      filled_seats: z.number().optional(),
      name: z.string(),
      private_repos: z.number(),
      seats: z.number().optional(),
      space: z.number(),
    })
    .optional(),
  private_gists: z.number().optional().nullable(),
  public_gists: z.number(),
  public_members_url: z.string(),
  public_repos: z.number(),
  repos_url: z.string(),
  secret_scanning_enabled_for_new_repositories: z.boolean().optional(),
  secret_scanning_push_protection_custom_link: z.string().optional().nullable(),
  secret_scanning_push_protection_custom_link_enabled: z.boolean().optional(),
  secret_scanning_push_protection_enabled_for_new_repositories: z.boolean().optional(),
  total_private_repos: z.number().optional(),
  twitter_username: z.string().optional().nullable(),
  two_factor_requirement_enabled: z.boolean().optional().nullable(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const organizationInvitationSchema = z.object({
  created_at: z.string(),
  email: z.string().nullable(),
  failed_at: z.string().optional().nullable(),
  failed_reason: z.string().optional().nullable(),
  id: z.number(),
  invitation_source: z.string().optional(),
  invitation_teams_url: z.string(),
  inviter: simpleUserSchema,
  login: z.string().nullable(),
  node_id: z.string(),
  role: z.string(),
  team_count: z.number(),
});

export const secretScanningAlertResolutionSchema = z.union([
  z.literal('false_positive'),
  z.literal('wont_fix'),
  z.literal('revoked'),
  z.literal('used_in_tests'),
]);

export const secretScanningAlertStateSchema = z.union([z.literal('open'), z.literal('resolved')]);

export const packageVersionSchema = z.object({
  created_at: z.string(),
  deleted_at: z.string().optional(),
  description: z.string().optional(),
  html_url: z.string().optional(),
  id: z.number(),
  license: z.string().optional(),
  metadata: z
    .object({
      container: z
        .object({
          tags: z.array(z.string()),
        })
        .optional(),
      docker: z
        .object({
          tag: z.array(z.string()).optional(),
        })
        .optional(),
      package_type: z.union([
        z.literal('npm'),
        z.literal('maven'),
        z.literal('rubygems'),
        z.literal('docker'),
        z.literal('nuget'),
        z.literal('container'),
      ]),
    })
    .optional(),
  name: z.string(),
  package_html_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const packagesBillingUsageSchema = z.object({
  included_gigabytes_bandwidth: z.number(),
  total_gigabytes_bandwidth_used: z.number(),
  total_paid_gigabytes_bandwidth_used: z.number(),
});

export const pagesHttpsCertificateSchema = z.object({
  description: z.string(),
  domains: z.array(z.string()),
  expires_at: z.string().optional(),
  state: z.union([
    z.literal('new'),
    z.literal('authorization_created'),
    z.literal('authorization_pending'),
    z.literal('authorized'),
    z.literal('authorization_revoked'),
    z.literal('issued'),
    z.literal('uploaded'),
    z.literal('approved'),
    z.literal('errored'),
    z.literal('bad_authz'),
    z.literal('destroy_pending'),
    z.literal('dns_changed'),
  ]),
});

export const pagesSourceHashSchema = z.object({
  branch: z.string(),
  path: z.string(),
});

export const buildTypeSchema = z.union([z.literal('legacy'), z.literal('workflow')]);

export const protectedDomainStateSchema = z.union([
  z.literal('pending'),
  z.literal('verified'),
  z.literal('unverified'),
]);

export const status6Schema = z.union([z.literal('built'), z.literal('building'), z.literal('errored')]);

export const pageBuildSchema = z.object({
  commit: z.string(),
  created_at: z.string(),
  duration: z.number(),
  error: z.object({
    message: z.string().nullable(),
  }),
  pusher: nullableSimpleUserSchema,
  status: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const pageBuildStatusSchema = z.object({
  status: z.string(),
  url: z.string(),
});

export const pageDeploymentSchema = z.object({
  page_url: z.string(),
  preview_url: z.string().optional(),
  status_url: z.string(),
});

export const pagesHealthCheckSchema = z.object({
  alt_domain: z
    .object({
      caa_error: z.string().optional().nullable(),
      dns_resolves: z.boolean().optional(),
      enforces_https: z.boolean().optional(),
      has_cname_record: z.boolean().optional().nullable(),
      has_mx_records_present: z.boolean().optional().nullable(),
      host: z.string().optional(),
      https_error: z.string().optional().nullable(),
      is_a_record: z.boolean().optional().nullable(),
      is_apex_domain: z.boolean().optional(),
      is_cloudflare_ip: z.boolean().optional().nullable(),
      is_cname_to_fastly: z.boolean().optional().nullable(),
      is_cname_to_github_user_domain: z.boolean().optional().nullable(),
      is_cname_to_pages_dot_github_dot_com: z.boolean().optional().nullable(),
      is_fastly_ip: z.boolean().optional().nullable(),
      is_https_eligible: z.boolean().optional().nullable(),
      is_non_github_pages_ip_present: z.boolean().optional().nullable(),
      is_old_ip_address: z.boolean().optional().nullable(),
      is_pages_domain: z.boolean().optional(),
      is_pointed_to_github_pages_ip: z.boolean().optional().nullable(),
      is_proxied: z.boolean().optional().nullable(),
      is_served_by_pages: z.boolean().optional().nullable(),
      is_valid: z.boolean().optional(),
      is_valid_domain: z.boolean().optional(),
      nameservers: z.string().optional(),
      reason: z.string().optional().nullable(),
      responds_to_https: z.boolean().optional(),
      should_be_a_record: z.boolean().optional().nullable(),
      uri: z.string().optional(),
    })
    .optional()
    .nullable(),
  domain: z
    .object({
      caa_error: z.string().optional().nullable(),
      dns_resolves: z.boolean().optional(),
      enforces_https: z.boolean().optional(),
      has_cname_record: z.boolean().optional().nullable(),
      has_mx_records_present: z.boolean().optional().nullable(),
      host: z.string().optional(),
      https_error: z.string().optional().nullable(),
      is_a_record: z.boolean().optional().nullable(),
      is_apex_domain: z.boolean().optional(),
      is_cloudflare_ip: z.boolean().optional().nullable(),
      is_cname_to_fastly: z.boolean().optional().nullable(),
      is_cname_to_github_user_domain: z.boolean().optional().nullable(),
      is_cname_to_pages_dot_github_dot_com: z.boolean().optional().nullable(),
      is_fastly_ip: z.boolean().optional().nullable(),
      is_https_eligible: z.boolean().optional().nullable(),
      is_non_github_pages_ip_present: z.boolean().optional().nullable(),
      is_old_ip_address: z.boolean().optional().nullable(),
      is_pages_domain: z.boolean().optional(),
      is_pointed_to_github_pages_ip: z.boolean().optional().nullable(),
      is_proxied: z.boolean().optional().nullable(),
      is_served_by_pages: z.boolean().optional().nullable(),
      is_valid: z.boolean().optional(),
      is_valid_domain: z.boolean().optional(),
      nameservers: z.string().optional(),
      reason: z.string().optional().nullable(),
      responds_to_https: z.boolean().optional(),
      should_be_a_record: z.boolean().optional().nullable(),
      uri: z.string().optional(),
    })
    .optional(),
});

export const state8Schema = z.union([
  z.literal('new'),
  z.literal('authorization_created'),
  z.literal('authorization_pending'),
  z.literal('authorized'),
  z.literal('authorization_revoked'),
  z.literal('issued'),
  z.literal('uploaded'),
  z.literal('approved'),
  z.literal('errored'),
  z.literal('bad_authz'),
  z.literal('destroy_pending'),
  z.literal('dns_changed'),
]);

export const parameteraccountIdSchema = z.number();

export const parameteractionsCacheKeySchema = z.string();

export const parameteractionsCacheKeyRequiredSchema = z.string();

export const parameteractionsCacheListSortSchema = z.union([
  z.literal('created_at'),
  z.literal('last_accessed_at'),
  z.literal('size_in_bytes'),
]);

export const parameteractorSchema = z.string();

export const parameteralertNumberSchema = alertNumberSchema;

export const parameterallSchema = z.boolean();

export const parameterappSlugSchema = z.string();

export const parameterartifactIdSchema = z.number();

export const parameterassetIdSchema = z.number();

export const parameterattemptNumberSchema = z.number();

export const parameterautolinkIdSchema = z.number();

export const parameterbeforeSchema = z.string();

export const parameterbranchSchema = z.string();

export const parameterbranchPolicyIdSchema = z.number();

export const parametercacheIdSchema = z.number();

export const parametercardIdSchema = z.number();

export const parametercheckNameSchema = z.string();

export const parametercheckRunIdSchema = z.number();

export const parametercheckSuiteIdSchema = z.number();

export const parameterclientIdSchema = z.string();

export const parametercodespaceNameSchema = z.string();

export const parametercolumnIdSchema = z.number();

export const parametercommentIdSchema = z.number();

export const parametercommentNumberSchema = z.number();

export const parametercommitShaSchema = z.string();

export const parametercreatedSchema = z.string();

export const parametercursorSchema = z.string();

export const parameterdeliveryIdSchema = z.number();

export const parameterdependabotAlertCommaSeparatedEcosystemsSchema = z.string();

export const parameterdependabotAlertCommaSeparatedManifestsSchema = z.string();

export const parameterdependabotAlertCommaSeparatedPackagesSchema = z.string();

export const parameterdependabotAlertCommaSeparatedSeveritiesSchema = z.string();

export const parameterdependabotAlertCommaSeparatedStatesSchema = z.string();

export const parameterdependabotAlertNumberSchema = alertNumberSchema;

export const parameterdependabotAlertScopeSchema = z.union([z.literal('development'), z.literal('runtime')]);

export const parameterdependabotAlertSortSchema = z.union([z.literal('created'), z.literal('updated')]);

export const parameterdeploymentIdSchema = z.number();

export const parameterdirectionSchema = z.union([z.literal('asc'), z.literal('desc')]);

export const parameterdiscussionNumberSchema = z.number();

export const parameterenterpriseSchema = z.string();

export const parameterenvironmentNameSchema = z.string();

export const parametereventSchema = z.string();

export const parameterexcludePullRequestsSchema = z.boolean();

export const parameterexportIdSchema = z.string();

export const parametergistIdSchema = z.string();

export const parametergitRefSchema = codeScanningRefSchema;

export const parametergpgKeyIdSchema = z.number();

export const parameterhookIdSchema = z.number();

export const parameterinstallationIdSchema = z.number();

export const parameterinvitationIdSchema = z.number();

export const parameterissueNumberSchema = z.number();

export const parameterjobIdSchema = z.number();

export const parameterkeyIdSchema = z.number();

export const parameterlabelsSchema = z.string();

export const parametermanifestPathSchema = z.string();

export const parametermigrationIdSchema = z.number();

export const parametermilestoneNumberSchema = z.number();

export const parameterorderSchema = z.union([z.literal('desc'), z.literal('asc')]);

export const parameterorgSchema = z.string();

export const parameterorgSecurityProductEnablementSchema = z.union([z.literal('enable_all'), z.literal('disable_all')]);

export const parameterownerSchema = z.string();

export const parameterpackageNameSchema = z.string();

export const parameterpackageTypeSchema = z.union([
  z.literal('npm'),
  z.literal('maven'),
  z.literal('rubygems'),
  z.literal('docker'),
  z.literal('nuget'),
  z.literal('container'),
]);

export const parameterpackageVersionIdSchema = z.number();

export const parameterpackageVisibilitySchema = z.union([
  z.literal('public'),
  z.literal('private'),
  z.literal('internal'),
]);

export const parameterpageSchema = z.number();

export const parameterpaginationAfterSchema = z.string();

export const parameterpaginationBeforeSchema = z.string();

export const parameterpaginationFirstSchema = z.number();

export const parameterpaginationLastSchema = z.number();

export const parameterparticipatingSchema = z.boolean();

export const parameterperSchema = z.union([z.literal('day'), z.literal('week')]);

export const parameterperPageSchema = z.number();

export const parameterplanIdSchema = z.number();

export const parameterprojectIdSchema = z.number();

export const parameterpullNumberSchema = z.number();

export const parameterreactionIdSchema = z.number();

export const parameterreleaseIdSchema = z.number();

export const parameterrepoSchema = z.string();

export const parameterrepoNameSchema = z.string();

export const parameterrepoRequiredWorkflowIdSchema = z.number();

export const parameterrepositoryIdSchema = z.number();

export const parameterrepositoryIdInQuerySchema = z.number();

export const parameterrequiredWorkflowIdSchema = z.number();

export const parameterreviewIdSchema = z.number();

export const parameterrunIdSchema = z.number();

export const parameterrunnerIdSchema = z.number();

export const parameterrunnerLabelNameSchema = z.string();

export const parametersecretNameSchema = z.string();

export const parametersecretScanningAlertResolutionSchema = z.string();

export const parametersecretScanningAlertSecretTypeSchema = z.string();

export const parametersecretScanningAlertSortSchema = z.union([z.literal('created'), z.literal('updated')]);

export const parametersecretScanningAlertStateSchema = z.union([z.literal('open'), z.literal('resolved')]);

export const parametersecretScanningPaginationAfterOrgRepoSchema = z.string();

export const parametersecretScanningPaginationBeforeOrgRepoSchema = z.string();

export const parametersecurityProductSchema = z.union([
  z.literal('dependency_graph'),
  z.literal('dependabot_alerts'),
  z.literal('dependabot_security_updates'),
  z.literal('advanced_security'),
  z.literal('secret_scanning'),
  z.literal('secret_scanning_push_protection'),
]);

export const parametersinceSchema = z.string();

export const parametersinceOrgSchema = z.number();

export const parametersinceRepoSchema = z.number();

export const parametersinceUserSchema = z.number();

export const parametersortSchema = z.union([z.literal('created'), z.literal('updated')]);

export const parametersshSigningKeyIdSchema = z.number();

export const parameterstatusSchema = z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]);

export const parametertagProtectionIdSchema = z.number();

export const parameterteamIdSchema = z.number();

export const parameterteamSlugSchema = z.string();

export const parameterthreadIdSchema = z.number();

export const parametertoolGuidSchema = codeScanningAnalysisToolGuidSchema;

export const parametertoolNameSchema = codeScanningAnalysisToolNameSchema;

export const parameterusernameSchema = z.string();

export const parametervariableNameSchema = z.string();

export const parametervariablesPerPageSchema = z.number();

export const parameterworkflowIdSchema = z.union([z.number(), z.string()]);

export const parameterworkflowRunBranchSchema = z.string();

export const parameterworkflowRunCheckSuiteIdSchema = z.number();

export const parameterworkflowRunHeadShaSchema = z.string();

export const parameterworkflowRunStatusSchema = z.union([
  z.literal('completed'),
  z.literal('action_required'),
  z.literal('cancelled'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('skipped'),
  z.literal('stale'),
  z.literal('success'),
  z.literal('timed_out'),
  z.literal('in_progress'),
  z.literal('queued'),
  z.literal('requested'),
  z.literal('waiting'),
  z.literal('pending'),
]);

export const participationStatsSchema = z.object({
  all: z.array(z.number()),
  owner: z.array(z.number()),
});

export const teamSchema = z.object({
  description: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  members_url: z.string(),
  name: z.string(),
  node_id: z.string(),
  parent: nullableTeamSimpleSchema,
  permission: z.string(),
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean(),
    })
    .optional(),
  privacy: z.string().optional(),
  repositories_url: z.string(),
  slug: z.string(),
  url: z.string(),
});

export const porterAuthorSchema = z.object({
  email: z.string(),
  id: z.number(),
  import_url: z.string(),
  name: z.string(),
  remote_id: z.string(),
  remote_name: z.string(),
  url: z.string(),
});

export const porterLargeFileSchema = z.object({
  oid: z.string(),
  path: z.string(),
  ref_name: z.string(),
  size: z.number(),
});

export const privateUserSchema = z.object({
  avatar_url: z.string(),
  bio: z.string().nullable(),
  blog: z.string().nullable(),
  business_plus: z.boolean().optional(),
  collaborators: z.number(),
  company: z.string().nullable(),
  created_at: z.string(),
  disk_usage: z.number(),
  email: z.string().nullable(),
  events_url: z.string(),
  followers: z.number(),
  followers_url: z.string(),
  following: z.number(),
  following_url: z.string(),
  gists_url: z.string(),
  gravatar_id: z.string().nullable(),
  hireable: z.boolean().nullable(),
  html_url: z.string(),
  id: z.number(),
  ldap_dn: z.string().optional(),
  location: z.string().nullable(),
  login: z.string(),
  name: z.string().nullable(),
  node_id: z.string(),
  organizations_url: z.string(),
  owned_private_repos: z.number(),
  plan: z
    .object({
      collaborators: z.number(),
      name: z.string(),
      private_repos: z.number(),
      space: z.number(),
    })
    .optional(),
  private_gists: z.number(),
  public_gists: z.number(),
  public_repos: z.number(),
  received_events_url: z.string(),
  repos_url: z.string(),
  site_admin: z.boolean(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  suspended_at: z.string().optional().nullable(),
  total_private_repos: z.number(),
  twitter_username: z.string().optional().nullable(),
  two_factor_authentication: z.boolean(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const projectSchema = z.object({
  body: z.string().nullable(),
  columns_url: z.string(),
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  number: z.number(),
  organization_permission: z
    .union([z.literal('read'), z.literal('write'), z.literal('admin'), z.literal('none')])
    .optional(),
  owner_url: z.string(),
  private: z.boolean().optional(),
  state: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const organizationPermissionSchema = z.union([
  z.literal('read'),
  z.literal('write'),
  z.literal('admin'),
  z.literal('none'),
]);

export const projectCardSchema = z.object({
  archived: z.boolean().optional(),
  column_name: z.string().optional(),
  column_url: z.string(),
  content_url: z.string().optional(),
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  id: z.number(),
  node_id: z.string(),
  note: z.string().nullable(),
  project_id: z.string().optional(),
  project_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const projectCollaboratorPermissionSchema = z.object({
  permission: z.string(),
  user: nullableSimpleUserSchema,
});

export const projectColumnSchema = z.object({
  cards_url: z.string(),
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  project_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const projectsV2Schema = z.object({
  closed_at: z.string().nullable(),
  created_at: z.string(),
  creator: simpleUserSchema,
  deleted_at: z.string().nullable(),
  deleted_by: nullableSimpleUserSchema,
  description: z.string().nullable(),
  id: z.number(),
  node_id: z.string(),
  number: z.number(),
  owner: simpleUserSchema,
  public: z.boolean(),
  short_description: z.string().nullable(),
  title: z.string(),
  updated_at: z.string(),
});

export const projectsV2ItemContentTypeSchema = z.union([
  z.literal('Issue'),
  z.literal('PullRequest'),
  z.literal('DraftIssue'),
]);

export const statusCheckPolicySchema = z.object({
  checks: z.array(
    z.object({
      app_id: z.number().nullable(),
      context: z.string(),
    }),
  ),
  contexts: z.array(z.string()),
  contexts_url: z.string(),
  strict: z.boolean(),
  url: z.string(),
});

export const protectedBranchPullRequestReviewSchema = z.object({
  bypass_pull_request_allowances: z
    .object({
      apps: z.array(integrationSchema).optional(),
      teams: z.array(teamSchema).optional(),
      users: z.array(simpleUserSchema).optional(),
    })
    .optional(),
  dismiss_stale_reviews: z.boolean(),
  dismissal_restrictions: z
    .object({
      apps: z.array(integrationSchema).optional(),
      teams: z.array(teamSchema).optional(),
      teams_url: z.string().optional(),
      url: z.string().optional(),
      users: z.array(simpleUserSchema).optional(),
      users_url: z.string().optional(),
    })
    .optional(),
  require_code_owner_reviews: z.boolean(),
  require_last_push_approval: z.boolean().optional(),
  required_approving_review_count: z.number().optional(),
  url: z.string().optional(),
});

export const teamSimpleSchema = z.object({
  description: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  ldap_dn: z.string().optional(),
  members_url: z.string(),
  name: z.string(),
  node_id: z.string(),
  permission: z.string(),
  privacy: z.string().optional(),
  repositories_url: z.string(),
  slug: z.string(),
  url: z.string(),
});

export const pullRequestMergeResultSchema = z.object({
  merged: z.boolean(),
  message: z.string(),
  sha: z.string(),
});

export const pullRequestReviewSchema = z.object({
  _links: z.object({
    html: z.object({
      href: z.string(),
    }),
    pull_request: z.object({
      href: z.string(),
    }),
  }),
  author_association: authorAssociationSchema,
  body: z.string(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  commit_id: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  node_id: z.string(),
  pull_request_url: z.string(),
  state: z.string(),
  submitted_at: z.string().optional(),
  user: nullableSimpleUserSchema,
});

export const pullRequestReviewCommentSchema = z.object({
  _links: z.object({
    html: z.object({
      href: z.string(),
    }),
    pull_request: z.object({
      href: z.string(),
    }),
    self: z.object({
      href: z.string(),
    }),
  }),
  author_association: authorAssociationSchema,
  body: z.string(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  commit_id: z.string(),
  created_at: z.string(),
  diff_hunk: z.string(),
  html_url: z.string(),
  id: z.number(),
  in_reply_to_id: z.number().optional(),
  line: z.number().optional(),
  node_id: z.string(),
  original_commit_id: z.string(),
  original_line: z.number().optional(),
  original_position: z.number(),
  original_start_line: z.number().optional().nullable(),
  path: z.string(),
  position: z.number(),
  pull_request_review_id: z.number().nullable(),
  pull_request_url: z.string(),
  reactions: reactionRollupSchema.optional(),
  side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).optional(),
  start_line: z.number().optional().nullable(),
  start_side: z
    .union([z.literal('LEFT'), z.literal('RIGHT')])
    .optional()
    .nullable(),
  updated_at: z.string(),
  url: z.string(),
  user: simpleUserSchema,
});

export const sideSchema = z.union([z.literal('LEFT'), z.literal('RIGHT')]);

export const startSideSchema = z.union([z.literal('LEFT'), z.literal('RIGHT')]);

export const pullRequestReviewRequestSchema = z.object({
  teams: z.array(teamSchema),
  users: z.array(simpleUserSchema),
});

export const pullRequestSimpleSchema = z.object({
  _links: z.object({
    comments: linkSchema,
    commits: linkSchema,
    html: linkSchema,
    issue: linkSchema,
    review_comment: linkSchema,
    review_comments: linkSchema,
    self: linkSchema,
    statuses: linkSchema,
  }),
  active_lock_reason: z.string().optional().nullable(),
  assignee: nullableSimpleUserSchema,
  assignees: z.array(simpleUserSchema).optional().nullable(),
  author_association: authorAssociationSchema,
  auto_merge: autoMergeSchema,
  base: z.object({
    label: z.string(),
    ref: z.string(),
    repo: repositorySchema,
    sha: z.string(),
    user: nullableSimpleUserSchema,
  }),
  body: z.string().nullable(),
  closed_at: z.string().nullable(),
  comments_url: z.string(),
  commits_url: z.string(),
  created_at: z.string(),
  diff_url: z.string(),
  draft: z.boolean().optional(),
  head: z.object({
    label: z.string(),
    ref: z.string(),
    repo: repositorySchema,
    sha: z.string(),
    user: nullableSimpleUserSchema,
  }),
  html_url: z.string(),
  id: z.number(),
  issue_url: z.string(),
  labels: z.array(
    z.object({
      color: z.string(),
      default: z.boolean(),
      description: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    }),
  ),
  locked: z.boolean(),
  merge_commit_sha: z.string().nullable(),
  merged_at: z.string().nullable(),
  milestone: nullableMilestoneSchema,
  node_id: z.string(),
  number: z.number(),
  patch_url: z.string(),
  requested_reviewers: z.array(simpleUserSchema).optional().nullable(),
  requested_teams: z.array(teamSchema).optional().nullable(),
  review_comment_url: z.string(),
  review_comments_url: z.string(),
  state: z.string(),
  statuses_url: z.string(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const rateLimitSchema = z.object({
  limit: z.number(),
  remaining: z.number(),
  reset: z.number(),
  used: z.number(),
});

export const rateLimitOverviewSchema = z.object({
  rate: rateLimitSchema,
  resources: z.object({
    actions_runner_registration: rateLimitSchema.optional(),
    code_scanning_upload: rateLimitSchema.optional(),
    core: rateLimitSchema,
    dependency_snapshots: rateLimitSchema.optional(),
    graphql: rateLimitSchema.optional(),
    integration_manifest: rateLimitSchema.optional(),
    scim: rateLimitSchema.optional(),
    search: rateLimitSchema,
    source_import: rateLimitSchema.optional(),
  }),
});

export const reactionSchema = z.object({
  content: z.union([
    z.literal('+1'),
    z.literal('-1'),
    z.literal('laugh'),
    z.literal('confused'),
    z.literal('heart'),
    z.literal('hooray'),
    z.literal('rocket'),
    z.literal('eyes'),
  ]),
  created_at: z.string(),
  id: z.number(),
  node_id: z.string(),
  user: nullableSimpleUserSchema,
});

export const contentSchema = z.union([
  z.literal('+1'),
  z.literal('-1'),
  z.literal('laugh'),
  z.literal('confused'),
  z.literal('heart'),
  z.literal('hooray'),
  z.literal('rocket'),
  z.literal('eyes'),
]);

export const referencedWorkflowSchema = z.object({
  path: z.string(),
  ref: z.string().optional(),
  sha: z.string(),
});

export const referrerTrafficSchema = z.object({
  count: z.number(),
  referrer: z.string(),
  uniques: z.number(),
});

export const releaseAssetSchema = z.object({
  browser_download_url: z.string(),
  content_type: z.string(),
  created_at: z.string(),
  download_count: z.number(),
  id: z.number(),
  label: z.string().nullable(),
  name: z.string(),
  node_id: z.string(),
  size: z.number(),
  state: z.union([z.literal('uploaded'), z.literal('open')]),
  updated_at: z.string(),
  uploader: nullableSimpleUserSchema,
  url: z.string(),
});

export const state9Schema = z.union([z.literal('uploaded'), z.literal('open')]);

export const releaseNotesContentSchema = z.object({
  body: z.string(),
  name: z.string(),
});

export const repoCodespacesSecretSchema = z.object({
  created_at: z.string(),
  name: z.string(),
  updated_at: z.string(),
});

export const repoRequiredWorkflowSchema = z.object({
  badge_url: z.string(),
  created_at: z.string(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  path: z.string(),
  source_repository: minimalRepositorySchema,
  state: z.union([z.literal('active'), z.literal('deleted')]),
  updated_at: z.string(),
  url: z.string(),
});

export const state10Schema = z.union([z.literal('active'), z.literal('deleted')]);

export const repoSearchResultItemSchema = z.object({
  allow_auto_merge: z.boolean().optional(),
  allow_forking: z.boolean().optional(),
  allow_merge_commit: z.boolean().optional(),
  allow_rebase_merge: z.boolean().optional(),
  allow_squash_merge: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string(),
  default_branch: z.string(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number(),
  forks_count: z.number(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  has_discussions: z.boolean().optional(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().nullable(),
  languages_url: z.string(),
  license: nullableLicenseSimpleSchema,
  master_branch: z.string().optional(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().nullable(),
  name: z.string(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number(),
  open_issues_count: z.number(),
  owner: nullableSimpleUserSchema,
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string(),
  releases_url: z.string(),
  score: z.number(),
  size: z.number(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional(),
  text_matches: searchResultTextMatchesSchema.optional(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
  visibility: z.string().optional(),
  watchers: z.number(),
  watchers_count: z.number(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const repositoryCollaboratorPermissionSchema = z.object({
  permission: z.string(),
  role_name: z.string(),
  user: nullableCollaboratorSchema,
});

export const repositoryInvitationSchema = z.object({
  created_at: z.string(),
  expired: z.boolean().optional(),
  html_url: z.string(),
  id: z.number(),
  invitee: nullableSimpleUserSchema,
  inviter: nullableSimpleUserSchema,
  node_id: z.string(),
  permissions: z.union([
    z.literal('read'),
    z.literal('write'),
    z.literal('admin'),
    z.literal('triage'),
    z.literal('maintain'),
  ]),
  repository: minimalRepositorySchema,
  url: z.string(),
});

export const permissionsSchema = z.union([
  z.literal('read'),
  z.literal('write'),
  z.literal('admin'),
  z.literal('triage'),
  z.literal('maintain'),
]);

export const repositorySubscriptionSchema = z.object({
  created_at: z.string(),
  ignored: z.boolean(),
  reason: z.string().nullable(),
  repository_url: z.string(),
  subscribed: z.boolean(),
  url: z.string(),
});

export const requiredWorkflowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  path: z.string(),
  ref: z.string(),
  repository: minimalRepositorySchema,
  scope: z.union([z.literal('all'), z.literal('selected')]),
  selected_repositories_url: z.string().optional(),
  state: z.union([z.literal('active'), z.literal('deleted')]),
  updated_at: z.string(),
});

export const scope2Schema = z.union([z.literal('all'), z.literal('selected')]);

export const reviewCommentSchema = z.object({
  _links: z.object({
    html: linkSchema,
    pull_request: linkSchema,
    self: linkSchema,
  }),
  author_association: authorAssociationSchema,
  body: z.string(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  commit_id: z.string(),
  created_at: z.string(),
  diff_hunk: z.string(),
  html_url: z.string(),
  id: z.number(),
  in_reply_to_id: z.number().optional(),
  line: z.number().optional(),
  node_id: z.string(),
  original_commit_id: z.string(),
  original_line: z.number().optional(),
  original_position: z.number(),
  original_start_line: z.number().optional().nullable(),
  path: z.string(),
  position: z.number().nullable(),
  pull_request_review_id: z.number().nullable(),
  pull_request_url: z.string(),
  reactions: reactionRollupSchema.optional(),
  side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).optional(),
  start_line: z.number().optional().nullable(),
  start_side: z
    .union([z.literal('LEFT'), z.literal('RIGHT')])
    .optional()
    .nullable(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const reviewRequestRemovedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  requested_reviewer: simpleUserSchema.optional(),
  requested_team: teamSchema.optional(),
  review_requester: simpleUserSchema,
  url: z.string(),
});

export const reviewRequestedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  requested_reviewer: simpleUserSchema.optional(),
  requested_team: teamSchema.optional(),
  review_requester: simpleUserSchema,
  url: z.string(),
});

export const rootSchema = z.object({
  authorizations_url: z.string(),
  code_search_url: z.string(),
  commit_search_url: z.string(),
  current_user_authorizations_html_url: z.string(),
  current_user_repositories_url: z.string(),
  current_user_url: z.string(),
  emails_url: z.string(),
  emojis_url: z.string(),
  events_url: z.string(),
  feeds_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  hub_url: z.string(),
  issue_search_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  label_search_url: z.string(),
  notifications_url: z.string(),
  organization_repositories_url: z.string(),
  organization_teams_url: z.string(),
  organization_url: z.string(),
  public_gists_url: z.string(),
  rate_limit_url: z.string(),
  repository_search_url: z.string(),
  repository_url: z.string(),
  starred_gists_url: z.string(),
  starred_url: z.string(),
  topic_search_url: z.string().optional(),
  user_organizations_url: z.string(),
  user_repositories_url: z.string(),
  user_search_url: z.string(),
  user_url: z.string(),
});

export const runnerLabelSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  type: z.union([z.literal('read-only'), z.literal('custom')]).optional(),
});

export const runnerApplicationSchema = z.object({
  architecture: z.string(),
  download_url: z.string(),
  filename: z.string(),
  os: z.string(),
  sha256_checksum: z.string().optional(),
  temp_download_token: z.string().optional(),
});

export const type5Schema = z.union([z.literal('read-only'), z.literal('custom')]);

export const scimErrorSchema = z.object({
  detail: z.string().optional().nullable(),
  documentation_url: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  schemas: z.array(z.string()).optional(),
  scimType: z.string().optional().nullable(),
  status: z.number().optional(),
});

export const secretScanningAlertSchema = z.object({
  created_at: alertCreatedAtSchema.optional(),
  html_url: alertHtmlUrlSchema.optional(),
  locations_url: z.string().optional(),
  number: alertNumberSchema.optional(),
  push_protection_bypassed: z.boolean().optional().nullable(),
  push_protection_bypassed_at: z.string().optional().nullable(),
  push_protection_bypassed_by: nullableSimpleUserSchema.optional(),
  resolution: secretScanningAlertResolutionSchema.optional(),
  resolution_comment: z.string().optional().nullable(),
  resolved_at: z.string().optional().nullable(),
  resolved_by: nullableSimpleUserSchema.optional(),
  secret: z.string().optional(),
  secret_type: z.string().optional(),
  secret_type_display_name: z.string().optional(),
  state: secretScanningAlertStateSchema.optional(),
  updated_at: nullableAlertUpdatedAtSchema.optional(),
  url: alertUrlSchema.optional(),
});

export const secretScanningAlertResolutionCommentSchema = z.string().nullable();

export const secretScanningLocationCommitSchema = z.object({
  blob_sha: z.string(),
  blob_url: z.string(),
  commit_sha: z.string(),
  commit_url: z.string(),
  end_column: z.number(),
  end_line: z.number(),
  path: z.string(),
  start_column: z.number(),
  start_line: z.number(),
});

export const secretScanningLocationIssueTitleSchema = z.object({
  issue_title_url: z.string(),
});

export const secretScanningLocationIssueBodySchema = z.object({
  issue_body_url: z.string(),
});

export const secretScanningLocationIssueCommentSchema = z.object({
  issue_comment_url: z.string(),
});

export const type6Schema = z.union([
  z.literal('commit'),
  z.literal('issue_title'),
  z.literal('issue_body'),
  z.literal('issue_comment'),
]);

export const status7Schema = z.union([z.literal('enabled'), z.literal('disabled')]);

export const selectedActionsSchema = z.object({
  github_owned_allowed: z.boolean().optional(),
  patterns_allowed: z.array(z.string()).optional(),
  verified_allowed: z.boolean().optional(),
});

export const shortBlobSchema = z.object({
  sha: z.string(),
  url: z.string(),
});

export const branchProtectionSchema = z.object({
  allow_deletions: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  allow_force_pushes: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  allow_fork_syncing: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  block_creations: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  enabled: z.boolean().optional(),
  enforce_admins: protectedBranchAdminEnforcedSchema.optional(),
  lock_branch: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  name: z.string().optional(),
  protection_url: z.string().optional(),
  required_conversation_resolution: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  required_linear_history: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  required_pull_request_reviews: protectedBranchPullRequestReviewSchema.optional(),
  required_signatures: z
    .object({
      enabled: z.boolean(),
      url: z.string(),
    })
    .optional(),
  required_status_checks: protectedBranchRequiredStatusCheckSchema.optional(),
  restrictions: branchRestrictionPolicySchema.optional(),
  url: z.string().optional(),
});

export const simpleCheckSuiteSchema = z.object({
  after: z.string().optional().nullable(),
  app: integrationSchema.optional(),
  before: z.string().optional().nullable(),
  conclusion: z
    .union([
      z.literal('success'),
      z.literal('failure'),
      z.literal('neutral'),
      z.literal('cancelled'),
      z.literal('skipped'),
      z.literal('timed_out'),
      z.literal('action_required'),
      z.literal('stale'),
      z.literal('startup_failure'),
    ])
    .optional()
    .nullable(),
  created_at: z.string().optional(),
  head_branch: z.string().optional().nullable(),
  head_sha: z.string().optional(),
  id: z.number().optional(),
  node_id: z.string().optional(),
  pull_requests: z.array(pullRequestMinimalSchema).optional(),
  repository: minimalRepositorySchema.optional(),
  status: z
    .union([
      z.literal('queued'),
      z.literal('in_progress'),
      z.literal('completed'),
      z.literal('pending'),
      z.literal('waiting'),
    ])
    .optional(),
  updated_at: z.string().optional(),
  url: z.string().optional(),
});

export const status8Schema = z.union([
  z.literal('queued'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('pending'),
  z.literal('waiting'),
]);

export const simpleInstallationSchema = z.object({
  id: z.number(),
  node_id: z.string(),
});

export const snapshotSchema = z.object({
  detector: z.object({
    name: z.string(),
    url: z.string(),
    version: z.string(),
  }),
  job: z.object({
    correlator: z.string(),
    html_url: z.string().optional(),
    id: z.string(),
  }),
  manifests: z.record(manifestSchema).optional(),
  metadata: metadataSchema.optional(),
  ref: z.string(),
  scanned: z.string(),
  sha: z.string(),
  version: z.number(),
});

export const sshSigningKeySchema = z.object({
  created_at: z.string(),
  id: z.number(),
  key: z.string(),
  title: z.string(),
});

export const stargazerSchema = z.object({
  starred_at: z.string(),
  user: nullableSimpleUserSchema,
});

export const starredRepositorySchema = z.object({
  repo: repositorySchema,
  starred_at: z.string(),
});

export const stateChangeIssueEventSchema = z.object({
  actor: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  state_reason: z.string().optional().nullable(),
  url: z.string(),
});

export const status9Schema = z.object({
  avatar_url: z.string().nullable(),
  context: z.string(),
  created_at: z.string(),
  creator: nullableSimpleUserSchema,
  description: z.string().nullable(),
  id: z.number(),
  node_id: z.string(),
  state: z.string(),
  target_url: z.string().nullable(),
  updated_at: z.string(),
  url: z.string(),
});

export const tagSchema = z.object({
  commit: z.object({
    sha: z.string(),
    url: z.string(),
  }),
  name: z.string(),
  node_id: z.string(),
  tarball_url: z.string(),
  zipball_url: z.string(),
});

export const tagProtectionSchema = z.object({
  created_at: z.string().optional(),
  enabled: z.boolean().optional(),
  id: z.number().optional(),
  pattern: z.string(),
  updated_at: z.string().optional(),
});

export const teamDiscussionSchema = z.object({
  author: nullableSimpleUserSchema,
  body: z.string(),
  body_html: z.string(),
  body_version: z.string(),
  comments_count: z.number(),
  comments_url: z.string(),
  created_at: z.string(),
  html_url: z.string(),
  last_edited_at: z.string().nullable(),
  node_id: z.string(),
  number: z.number(),
  pinned: z.boolean(),
  private: z.boolean(),
  reactions: reactionRollupSchema.optional(),
  team_url: z.string(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const teamDiscussionCommentSchema = z.object({
  author: nullableSimpleUserSchema,
  body: z.string(),
  body_html: z.string(),
  body_version: z.string(),
  created_at: z.string(),
  discussion_url: z.string(),
  html_url: z.string(),
  last_edited_at: z.string().nullable(),
  node_id: z.string(),
  number: z.number(),
  reactions: reactionRollupSchema.optional(),
  updated_at: z.string(),
  url: z.string(),
});

export const teamOrganizationSchema = z.object({
  avatar_url: z.string(),
  billing_email: z.string().optional().nullable(),
  blog: z.string().optional(),
  collaborators: z.number().optional().nullable(),
  company: z.string().optional(),
  created_at: z.string(),
  default_repository_permission: z.string().optional().nullable(),
  description: z.string().nullable(),
  disk_usage: z.number().optional().nullable(),
  email: z.string().optional(),
  events_url: z.string(),
  followers: z.number(),
  following: z.number(),
  has_organization_projects: z.boolean(),
  has_repository_projects: z.boolean(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_verified: z.boolean().optional(),
  issues_url: z.string(),
  location: z.string().optional(),
  login: z.string(),
  members_allowed_repository_creation_type: z.string().optional(),
  members_can_create_internal_repositories: z.boolean().optional(),
  members_can_create_pages: z.boolean().optional(),
  members_can_create_private_pages: z.boolean().optional(),
  members_can_create_private_repositories: z.boolean().optional(),
  members_can_create_public_pages: z.boolean().optional(),
  members_can_create_public_repositories: z.boolean().optional(),
  members_can_create_repositories: z.boolean().optional().nullable(),
  members_can_fork_private_repositories: z.boolean().optional().nullable(),
  members_url: z.string(),
  name: z.string().optional(),
  node_id: z.string(),
  owned_private_repos: z.number().optional(),
  plan: z
    .object({
      filled_seats: z.number().optional(),
      name: z.string(),
      private_repos: z.number(),
      seats: z.number().optional(),
      space: z.number(),
    })
    .optional(),
  private_gists: z.number().optional().nullable(),
  public_gists: z.number(),
  public_members_url: z.string(),
  public_repos: z.number(),
  repos_url: z.string(),
  total_private_repos: z.number().optional(),
  twitter_username: z.string().optional().nullable(),
  two_factor_requirement_enabled: z.boolean().optional().nullable(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const privacySchema = z.union([z.literal('closed'), z.literal('secret')]);

export const teamMembershipSchema = z.object({
  role: z.union([z.literal('member'), z.literal('maintainer')]),
  state: z.union([z.literal('active'), z.literal('pending')]),
  url: z.string(),
});

export const role2Schema = z.union([z.literal('member'), z.literal('maintainer')]);

export const teamProjectSchema = z.object({
  body: z.string().nullable(),
  columns_url: z.string(),
  created_at: z.string(),
  creator: simpleUserSchema,
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  number: z.number(),
  organization_permission: z.string().optional(),
  owner_url: z.string(),
  permissions: z.object({
    admin: z.boolean(),
    read: z.boolean(),
    write: z.boolean(),
  }),
  private: z.boolean().optional(),
  state: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const teamRepositorySchema = z.object({
  allow_auto_merge: z.boolean().optional(),
  allow_forking: z.boolean().optional(),
  allow_merge_commit: z.boolean().optional(),
  allow_rebase_merge: z.boolean().optional(),
  allow_squash_merge: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string().nullable(),
  default_branch: z.string(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number(),
  forks_count: z.number(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().nullable(),
  languages_url: z.string(),
  license: nullableLicenseSimpleSchema,
  master_branch: z.string().optional(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().nullable(),
  name: z.string(),
  network_count: z.number().optional(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number(),
  open_issues_count: z.number(),
  owner: nullableSimpleUserSchema,
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string().nullable(),
  releases_url: z.string(),
  role_name: z.string().optional(),
  size: z.number(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_count: z.number().optional(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional(),
  template_repository: nullableRepositorySchema.optional(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string().nullable(),
  url: z.string(),
  visibility: z.string().optional(),
  watchers: z.number(),
  watchers_count: z.number(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const threadSchema = z.object({
  id: z.string(),
  last_read_at: z.string().nullable(),
  reason: z.string(),
  repository: minimalRepositorySchema,
  subject: z.object({
    latest_comment_url: z.string(),
    title: z.string(),
    type: z.string(),
    url: z.string(),
  }),
  subscription_url: z.string(),
  unread: z.boolean(),
  updated_at: z.string(),
  url: z.string(),
});

export const threadSubscriptionSchema = z.object({
  created_at: z.string().nullable(),
  ignored: z.boolean(),
  reason: z.string().nullable(),
  repository_url: z.string().optional(),
  subscribed: z.boolean(),
  thread_url: z.string().optional(),
  url: z.string(),
});

export const timelineAssignedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  assignee: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const timelineCommentEventSchema = z.object({
  actor: simpleUserSchema,
  author_association: authorAssociationSchema,
  body: z.string().optional(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  created_at: z.string(),
  event: z.string(),
  html_url: z.string(),
  id: z.number(),
  issue_url: z.string(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  reactions: reactionRollupSchema.optional(),
  updated_at: z.string(),
  url: z.string(),
  user: simpleUserSchema,
});

export const commitCommentSchema = z.object({
  author_association: authorAssociationSchema,
  body: z.string(),
  commit_id: z.string(),
  created_at: z.string(),
  html_url: z.string(),
  id: z.number(),
  line: z.number().nullable(),
  node_id: z.string(),
  path: z.string().nullable(),
  position: z.number().nullable(),
  reactions: reactionRollupSchema.optional(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const timelineCommittedEventSchema = z.object({
  author: z.object({
    date: z.string(),
    email: z.string(),
    name: z.string(),
  }),
  committer: z.object({
    date: z.string(),
    email: z.string(),
    name: z.string(),
  }),
  event: z.string().optional(),
  html_url: z.string(),
  message: z.string(),
  node_id: z.string(),
  parents: z.array(
    z.object({
      html_url: z.string(),
      sha: z.string(),
      url: z.string(),
    }),
  ),
  sha: z.string(),
  tree: z.object({
    sha: z.string(),
    url: z.string(),
  }),
  url: z.string(),
  verification: z.object({
    payload: z.string().nullable(),
    reason: z.string(),
    signature: z.string().nullable(),
    verified: z.boolean(),
  }),
});

export const issueSchema = z.object({
  active_lock_reason: z.string().optional().nullable(),
  assignee: nullableSimpleUserSchema,
  assignees: z.array(simpleUserSchema).optional().nullable(),
  author_association: authorAssociationSchema,
  body: z.string().optional().nullable(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  closed_at: z.string().nullable(),
  closed_by: nullableSimpleUserSchema.optional(),
  comments: z.number(),
  comments_url: z.string(),
  created_at: z.string(),
  draft: z.boolean().optional(),
  events_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  labels: z.array(
    z.union([
      z.string(),
      z.object({
        color: z.string().optional().nullable(),
        default: z.boolean().optional(),
        description: z.string().optional().nullable(),
        id: z.number().optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        url: z.string().optional(),
      }),
    ]),
  ),
  labels_url: z.string(),
  locked: z.boolean(),
  milestone: nullableMilestoneSchema,
  node_id: z.string(),
  number: z.number(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  pull_request: z
    .object({
      diff_url: z.string().nullable(),
      html_url: z.string().nullable(),
      merged_at: z.string().optional().nullable(),
      patch_url: z.string().nullable(),
      url: z.string().nullable(),
    })
    .optional(),
  reactions: reactionRollupSchema.optional(),
  repository: repositorySchema.optional(),
  repository_url: z.string(),
  state: z.string(),
  state_reason: z
    .union([z.literal('completed'), z.literal('reopened'), z.literal('not_planned')])
    .optional()
    .nullable(),
  timeline_url: z.string().optional(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const timelineCrossReferencedEventSchema = z.object({
  actor: simpleUserSchema.optional(),
  created_at: z.string(),
  event: z.string(),
  source: z.object({
    issue: issueSchema.optional(),
    type: z.string().optional(),
  }),
  updated_at: z.string(),
});

export const timelineReviewedEventSchema = z.object({
  _links: z.object({
    html: z.object({
      href: z.string(),
    }),
    pull_request: z.object({
      href: z.string(),
    }),
  }),
  author_association: authorAssociationSchema,
  body: z.string().nullable(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  commit_id: z.string(),
  event: z.string(),
  html_url: z.string(),
  id: z.number(),
  node_id: z.string(),
  pull_request_url: z.string(),
  state: z.string(),
  submitted_at: z.string().optional(),
  user: simpleUserSchema,
});

export const timelineLineCommentedEventSchema = z.object({
  comments: z.array(pullRequestReviewCommentSchema).optional(),
  event: z.string().optional(),
  node_id: z.string().optional(),
});

export const timelineCommitCommentedEventSchema = z.object({
  comments: z.array(commitCommentSchema).optional(),
  commit_id: z.string().optional(),
  event: z.string().optional(),
  node_id: z.string().optional(),
});

export const timelineUnassignedIssueEventSchema = z.object({
  actor: simpleUserSchema,
  assignee: simpleUserSchema,
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  event: z.string(),
  id: z.number(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema,
  url: z.string(),
});

export const topicSchema = z.object({
  names: z.array(z.string()),
});

export const topicSearchResultItemSchema = z.object({
  aliases: z
    .array(
      z.object({
        topic_relation: z
          .object({
            id: z.number().optional(),
            name: z.string().optional(),
            relation_type: z.string().optional(),
            topic_id: z.number().optional(),
          })
          .optional(),
      }),
    )
    .optional()
    .nullable(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  curated: z.boolean(),
  description: z.string().nullable(),
  display_name: z.string().nullable(),
  featured: z.boolean(),
  logo_url: z.string().optional().nullable(),
  name: z.string(),
  related: z
    .array(
      z.object({
        topic_relation: z
          .object({
            id: z.number().optional(),
            name: z.string().optional(),
            relation_type: z.string().optional(),
            topic_id: z.number().optional(),
          })
          .optional(),
      }),
    )
    .optional()
    .nullable(),
  released: z.string().nullable(),
  repository_count: z.number().optional().nullable(),
  score: z.number(),
  short_description: z.string().nullable(),
  text_matches: searchResultTextMatchesSchema.optional(),
  updated_at: z.string(),
});

export const userMarketplacePurchaseSchema = z.object({
  account: marketplaceAccountSchema,
  billing_cycle: z.string(),
  free_trial_ends_on: z.string().nullable(),
  next_billing_date: z.string().nullable(),
  on_free_trial: z.boolean(),
  plan: marketplaceListingPlanSchema,
  unit_count: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const userSearchResultItemSchema = z.object({
  avatar_url: z.string(),
  bio: z.string().optional().nullable(),
  blog: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  events_url: z.string(),
  followers: z.number().optional(),
  followers_url: z.string(),
  following: z.number().optional(),
  following_url: z.string(),
  gists_url: z.string(),
  gravatar_id: z.string().nullable(),
  hireable: z.boolean().optional().nullable(),
  html_url: z.string(),
  id: z.number(),
  location: z.string().optional().nullable(),
  login: z.string(),
  name: z.string().optional().nullable(),
  node_id: z.string(),
  organizations_url: z.string(),
  public_gists: z.number().optional(),
  public_repos: z.number().optional(),
  received_events_url: z.string(),
  repos_url: z.string(),
  score: z.number(),
  site_admin: z.boolean(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  suspended_at: z.string().optional().nullable(),
  text_matches: searchResultTextMatchesSchema.optional(),
  type: z.string(),
  updated_at: z.string().optional(),
  url: z.string(),
});

export const validationErrorSchema = z.object({
  documentation_url: z.string(),
  errors: z
    .array(
      z.object({
        code: z.string(),
        field: z.string().optional(),
        index: z.number().optional(),
        message: z.string().optional(),
        resource: z.string().optional(),
        value: z
          .union([z.string(), z.number(), z.array(z.string())])
          .optional()
          .nullable(),
      }),
    )
    .optional(),
  message: z.string(),
});

export const validationErrorSimpleSchema = z.object({
  documentation_url: z.string(),
  errors: z.array(z.string()).optional(),
  message: z.string(),
});

export const viewTrafficSchema = z.object({
  count: z.number(),
  uniques: z.number(),
  views: z.array(trafficSchema),
});

export const webhookBranchProtectionRuleCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  rule: z.object({
    admin_enforced: z.boolean(),
    allow_deletions_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    allow_force_pushes_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    authorized_actor_names: z.array(z.string()),
    authorized_actors_only: z.boolean(),
    authorized_dismissal_actors_only: z.boolean(),
    create_protected: z.boolean().optional(),
    created_at: z.string(),
    dismiss_stale_reviews_on_push: z.boolean(),
    id: z.number(),
    ignore_approvals_from_contributors: z.boolean(),
    linear_history_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    merge_queue_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    name: z.string(),
    pull_request_reviews_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    repository_id: z.number(),
    require_code_owner_review: z.boolean(),
    required_approving_review_count: z.number(),
    required_conversation_resolution_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_deployments_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_status_checks: z.array(z.string()),
    required_status_checks_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    signature_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    strict_required_status_checks_policy: z.boolean(),
    updated_at: z.string(),
  }),
  sender: simpleUserSchema,
});

export const actionSchema = z.literal('created');

export const allowDeletionsEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const allowForcePushesEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const linearHistoryRequirementEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const mergeQueueEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const pullRequestReviewsEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const requiredConversationResolutionLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const requiredDeploymentsEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const requiredStatusChecksEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const signatureRequirementEnforcementLevelSchema = z.union([
  z.literal('off'),
  z.literal('non_admins'),
  z.literal('everyone'),
]);

export const webhookBranchProtectionRuleDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  rule: z.object({
    admin_enforced: z.boolean(),
    allow_deletions_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    allow_force_pushes_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    authorized_actor_names: z.array(z.string()),
    authorized_actors_only: z.boolean(),
    authorized_dismissal_actors_only: z.boolean(),
    create_protected: z.boolean().optional(),
    created_at: z.string(),
    dismiss_stale_reviews_on_push: z.boolean(),
    id: z.number(),
    ignore_approvals_from_contributors: z.boolean(),
    linear_history_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    merge_queue_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    name: z.string(),
    pull_request_reviews_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    repository_id: z.number(),
    require_code_owner_review: z.boolean(),
    required_approving_review_count: z.number(),
    required_conversation_resolution_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_deployments_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_status_checks: z.array(z.string()),
    required_status_checks_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    signature_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    strict_required_status_checks_policy: z.boolean(),
    updated_at: z.string(),
  }),
  sender: simpleUserSchema,
});

export const action2Schema = z.literal('deleted');

export const webhookBranchProtectionRuleEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z
    .object({
      admin_enforced: z
        .object({
          from: z.boolean().nullable(),
        })
        .optional(),
      authorized_actor_names: z
        .object({
          from: z.array(z.string()),
        })
        .optional(),
      authorized_actors_only: z
        .object({
          from: z.boolean().nullable(),
        })
        .optional(),
      authorized_dismissal_actors_only: z
        .object({
          from: z.boolean().nullable(),
        })
        .optional(),
      linear_history_requirement_enforcement_level: z
        .object({
          from: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
        })
        .optional(),
      required_status_checks: z
        .object({
          from: z.array(z.string()),
        })
        .optional(),
      required_status_checks_enforcement_level: z
        .object({
          from: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
        })
        .optional(),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  rule: z.object({
    admin_enforced: z.boolean(),
    allow_deletions_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    allow_force_pushes_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    authorized_actor_names: z.array(z.string()),
    authorized_actors_only: z.boolean(),
    authorized_dismissal_actors_only: z.boolean(),
    create_protected: z.boolean().optional(),
    created_at: z.string(),
    dismiss_stale_reviews_on_push: z.boolean(),
    id: z.number(),
    ignore_approvals_from_contributors: z.boolean(),
    linear_history_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    merge_queue_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    name: z.string(),
    pull_request_reviews_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    repository_id: z.number(),
    require_code_owner_review: z.boolean(),
    required_approving_review_count: z.number(),
    required_conversation_resolution_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_deployments_enforcement_level: z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]),
    required_status_checks: z.array(z.string()),
    required_status_checks_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    signature_requirement_enforcement_level: z.union([
      z.literal('off'),
      z.literal('non_admins'),
      z.literal('everyone'),
    ]),
    strict_required_status_checks_policy: z.boolean(),
    updated_at: z.string(),
  }),
  sender: simpleUserSchema,
});

export const action3Schema = z.literal('edited');

export const fromSchema = z.union([z.literal('off'), z.literal('non_admins'), z.literal('everyone')]);

export const checkRunWithSimpleCheckSuiteSchema = z.object({
  app: nullableIntegrationSchema,
  check_suite: simpleCheckSuiteSchema,
  completed_at: z.string().nullable(),
  conclusion: z
    .union([
      z.literal('waiting'),
      z.literal('pending'),
      z.literal('startup_failure'),
      z.literal('stale'),
      z.literal('success'),
      z.literal('failure'),
      z.literal('neutral'),
      z.literal('cancelled'),
      z.literal('skipped'),
      z.literal('timed_out'),
      z.literal('action_required'),
    ])
    .nullable(),
  deployment: deploymentSimpleSchema.optional(),
  details_url: z.string(),
  external_id: z.string(),
  head_sha: z.string(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  output: z.object({
    annotations_count: z.number(),
    annotations_url: z.string(),
    summary: z.string().nullable(),
    text: z.string().nullable(),
    title: z.string().nullable(),
  }),
  pull_requests: z.array(pullRequestMinimalSchema),
  started_at: z.string(),
  status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed'), z.literal('pending')]),
  url: z.string(),
});

export const action4Schema = z.literal('completed');

export const webhookCheckRunCompletedFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookCheckRunCreatedSchema = z.object({
  action: z.literal('created').optional(),
  check_run: checkRunWithSimpleCheckSuiteSchema,
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookCheckRunCreatedFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookCheckRunRequestedActionSchema = z.object({
  action: z.literal('requested_action'),
  check_run: checkRunWithSimpleCheckSuiteSchema,
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  requested_action: z
    .object({
      identifier: z.string().optional(),
    })
    .optional(),
  sender: simpleUserSchema,
});

export const action5Schema = z.literal('requested_action');

export const webhookCheckRunRequestedActionFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookCheckRunRerequestedSchema = z.object({
  action: z.literal('rerequested').optional(),
  check_run: checkRunWithSimpleCheckSuiteSchema,
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action6Schema = z.literal('rerequested');

export const webhookCheckRunRerequestedFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookCheckSuiteCompletedSchema = z.object({
  action: z.literal('completed'),
  actions_meta: z.record(z.unknown()).optional().nullable(),
  check_suite: z.object({
    after: z.string().nullable(),
    app: z.object({
      created_at: z.string().nullable(),
      description: z.string().nullable(),
      events: z
        .array(
          z.union([
            z.literal('branch_protection_rule'),
            z.literal('check_run'),
            z.literal('check_suite'),
            z.literal('code_scanning_alert'),
            z.literal('commit_comment'),
            z.literal('content_reference'),
            z.literal('create'),
            z.literal('delete'),
            z.literal('deployment'),
            z.literal('deployment_review'),
            z.literal('deployment_status'),
            z.literal('deploy_key'),
            z.literal('discussion'),
            z.literal('discussion_comment'),
            z.literal('fork'),
            z.literal('gollum'),
            z.literal('issues'),
            z.literal('issue_comment'),
            z.literal('label'),
            z.literal('member'),
            z.literal('membership'),
            z.literal('milestone'),
            z.literal('organization'),
            z.literal('org_block'),
            z.literal('page_build'),
            z.literal('project'),
            z.literal('project_card'),
            z.literal('project_column'),
            z.literal('public'),
            z.literal('pull_request'),
            z.literal('pull_request_review'),
            z.literal('pull_request_review_comment'),
            z.literal('push'),
            z.literal('registry_package'),
            z.literal('release'),
            z.literal('repository'),
            z.literal('repository_dispatch'),
            z.literal('secret_scanning_alert'),
            z.literal('star'),
            z.literal('status'),
            z.literal('team'),
            z.literal('team_add'),
            z.literal('watch'),
            z.literal('workflow_dispatch'),
            z.literal('workflow_run'),
            z.literal('merge_group'),
            z.literal('pull_request_review_thread'),
            z.literal('workflow_job'),
            z.literal('merge_queue_entry'),
            z.literal('security_and_analysis'),
            z.literal('projects_v2_item'),
            z.literal('secret_scanning_alert_location'),
          ]),
        )
        .optional(),
      external_url: z.string().nullable(),
      html_url: z.string(),
      id: z.number().nullable(),
      name: z.string(),
      node_id: z.string(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          actions: z.union([z.literal('read'), z.literal('write')]).optional(),
          administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          checks: z.union([z.literal('read'), z.literal('write')]).optional(),
          content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
          contents: z.union([z.literal('read'), z.literal('write')]).optional(),
          deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
          discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          emails: z.union([z.literal('read'), z.literal('write')]).optional(),
          environments: z.union([z.literal('read'), z.literal('write')]).optional(),
          issues: z.union([z.literal('read'), z.literal('write')]).optional(),
          keys: z.union([z.literal('read'), z.literal('write')]).optional(),
          members: z.union([z.literal('read'), z.literal('write')]).optional(),
          metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
          packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
          single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
          statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
          team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
        })
        .optional(),
      slug: z.string().optional(),
      updated_at: z.string().nullable(),
    }),
    before: z.string().nullable(),
    check_runs_url: z.string(),
    conclusion: z
      .union([
        z.literal('success'),
        z.literal('failure'),
        z.literal('neutral'),
        z.literal('cancelled'),
        z.literal('timed_out'),
        z.literal('action_required'),
        z.literal('stale'),
        z.literal('skipped'),
        z.literal('startup_failure'),
      ])
      .nullable(),
    created_at: z.string(),
    head_branch: z.string().nullable(),
    head_commit: z.object({
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      tree_id: z.string(),
    }),
    head_sha: z.string(),
    id: z.number(),
    latest_check_runs_count: z.number(),
    node_id: z.string(),
    pull_requests: z.array(
      z.object({
        base: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        head: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        id: z.number(),
        number: z.number(),
        url: z.string(),
      }),
    ),
    rerequestable: z.boolean().optional(),
    runs_rerequestable: z.boolean().optional(),
    status: z
      .union([
        z.literal('requested'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('queued'),
        z.literal('pending'),
      ])
      .nullable(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const contentReferencesSchema = z.union([z.literal('read'), z.literal('write')]);

export const discussionsSchema = z.union([z.literal('read'), z.literal('write')]);

export const emailsSchema = z.union([z.literal('read'), z.literal('write')]);

export const keysSchema = z.union([z.literal('read'), z.literal('write')]);

export const organizationPlan2Schema = z.union([z.literal('read'), z.literal('write')]);

export const securityScanningAlertSchema = z.union([z.literal('read'), z.literal('write')]);

export const workflows2Schema = z.union([z.literal('read'), z.literal('write')]);

export const status10Schema = z.union([
  z.literal('requested'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('queued'),
  z.literal('pending'),
]);

export const webhookCheckSuiteRequestedSchema = z.object({
  action: z.literal('requested'),
  actions_meta: z.record(z.unknown()).optional().nullable(),
  check_suite: z.object({
    after: z.string().nullable(),
    app: z.object({
      created_at: z.string().nullable(),
      description: z.string().nullable(),
      events: z
        .array(
          z.union([
            z.literal('branch_protection_rule'),
            z.literal('check_run'),
            z.literal('check_suite'),
            z.literal('code_scanning_alert'),
            z.literal('commit_comment'),
            z.literal('content_reference'),
            z.literal('create'),
            z.literal('delete'),
            z.literal('deployment'),
            z.literal('deployment_review'),
            z.literal('deployment_status'),
            z.literal('deploy_key'),
            z.literal('discussion'),
            z.literal('discussion_comment'),
            z.literal('fork'),
            z.literal('gollum'),
            z.literal('issues'),
            z.literal('issue_comment'),
            z.literal('label'),
            z.literal('member'),
            z.literal('membership'),
            z.literal('milestone'),
            z.literal('organization'),
            z.literal('org_block'),
            z.literal('page_build'),
            z.literal('project'),
            z.literal('project_card'),
            z.literal('project_column'),
            z.literal('public'),
            z.literal('pull_request'),
            z.literal('pull_request_review'),
            z.literal('pull_request_review_comment'),
            z.literal('push'),
            z.literal('registry_package'),
            z.literal('release'),
            z.literal('repository'),
            z.literal('repository_dispatch'),
            z.literal('secret_scanning_alert'),
            z.literal('star'),
            z.literal('status'),
            z.literal('team'),
            z.literal('team_add'),
            z.literal('watch'),
            z.literal('workflow_dispatch'),
            z.literal('workflow_run'),
            z.literal('pull_request_review_thread'),
            z.literal('workflow_job'),
            z.literal('merge_queue_entry'),
            z.literal('security_and_analysis'),
            z.literal('secret_scanning_alert_location'),
            z.literal('projects_v2_item'),
            z.literal('merge_group'),
            z.literal('repository_import'),
          ]),
        )
        .optional(),
      external_url: z.string().nullable(),
      html_url: z.string(),
      id: z.number().nullable(),
      name: z.string(),
      node_id: z.string(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          actions: z.union([z.literal('read'), z.literal('write')]).optional(),
          administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          checks: z.union([z.literal('read'), z.literal('write')]).optional(),
          content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
          contents: z.union([z.literal('read'), z.literal('write')]).optional(),
          deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
          discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          emails: z.union([z.literal('read'), z.literal('write')]).optional(),
          environments: z.union([z.literal('read'), z.literal('write')]).optional(),
          issues: z.union([z.literal('read'), z.literal('write')]).optional(),
          keys: z.union([z.literal('read'), z.literal('write')]).optional(),
          members: z.union([z.literal('read'), z.literal('write')]).optional(),
          metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
          packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
          single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
          statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
          team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
        })
        .optional(),
      slug: z.string().optional(),
      updated_at: z.string().nullable(),
    }),
    before: z.string().nullable(),
    check_runs_url: z.string(),
    conclusion: z
      .union([
        z.literal('success'),
        z.literal('failure'),
        z.literal('neutral'),
        z.literal('cancelled'),
        z.literal('timed_out'),
        z.literal('action_required'),
        z.literal('stale'),
        z.literal('skipped'),
      ])
      .nullable(),
    created_at: z.string(),
    head_branch: z.string().nullable(),
    head_commit: z.object({
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      tree_id: z.string(),
    }),
    head_sha: z.string(),
    id: z.number(),
    latest_check_runs_count: z.number(),
    node_id: z.string(),
    pull_requests: z.array(
      z.object({
        base: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        head: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        id: z.number(),
        number: z.number(),
        url: z.string(),
      }),
    ),
    rerequestable: z.boolean().optional(),
    runs_rerequestable: z.boolean().optional(),
    status: z
      .union([z.literal('requested'), z.literal('in_progress'), z.literal('completed'), z.literal('queued')])
      .nullable(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action7Schema = z.literal('requested');

export const conclusion4Schema = z.union([
  z.literal('success'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('cancelled'),
  z.literal('timed_out'),
  z.literal('action_required'),
  z.literal('stale'),
  z.literal('skipped'),
]);

export const status11Schema = z.union([
  z.literal('requested'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('queued'),
]);

export const webhookCheckSuiteRerequestedSchema = z.object({
  action: z.literal('rerequested'),
  actions_meta: z
    .object({
      rerun_info: z
        .object({
          job_ids: z.array(z.string()).optional(),
          plan_id: z.string().optional(),
        })
        .optional(),
    })
    .optional()
    .nullable(),
  check_suite: z.object({
    after: z.string().nullable(),
    app: z.object({
      created_at: z.string().nullable(),
      description: z.string().nullable(),
      events: z
        .array(
          z.union([
            z.literal('branch_protection_rule'),
            z.literal('check_run'),
            z.literal('check_suite'),
            z.literal('code_scanning_alert'),
            z.literal('commit_comment'),
            z.literal('content_reference'),
            z.literal('create'),
            z.literal('delete'),
            z.literal('deployment'),
            z.literal('deployment_review'),
            z.literal('deployment_status'),
            z.literal('deploy_key'),
            z.literal('discussion'),
            z.literal('discussion_comment'),
            z.literal('fork'),
            z.literal('gollum'),
            z.literal('issues'),
            z.literal('issue_comment'),
            z.literal('label'),
            z.literal('member'),
            z.literal('membership'),
            z.literal('milestone'),
            z.literal('organization'),
            z.literal('org_block'),
            z.literal('page_build'),
            z.literal('project'),
            z.literal('project_card'),
            z.literal('project_column'),
            z.literal('public'),
            z.literal('pull_request'),
            z.literal('pull_request_review'),
            z.literal('pull_request_review_comment'),
            z.literal('push'),
            z.literal('registry_package'),
            z.literal('release'),
            z.literal('repository'),
            z.literal('repository_dispatch'),
            z.literal('secret_scanning_alert'),
            z.literal('star'),
            z.literal('status'),
            z.literal('team'),
            z.literal('team_add'),
            z.literal('watch'),
            z.literal('workflow_dispatch'),
            z.literal('workflow_run'),
            z.literal('pull_request_review_thread'),
            z.literal('merge_queue_entry'),
            z.literal('workflow_job'),
          ]),
        )
        .optional(),
      external_url: z.string().nullable(),
      html_url: z.string(),
      id: z.number().nullable(),
      name: z.string(),
      node_id: z.string(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          actions: z.union([z.literal('read'), z.literal('write')]).optional(),
          administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          checks: z.union([z.literal('read'), z.literal('write')]).optional(),
          content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
          contents: z.union([z.literal('read'), z.literal('write')]).optional(),
          deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
          discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          emails: z.union([z.literal('read'), z.literal('write')]).optional(),
          environments: z.union([z.literal('read'), z.literal('write')]).optional(),
          issues: z.union([z.literal('read'), z.literal('write')]).optional(),
          keys: z.union([z.literal('read'), z.literal('write')]).optional(),
          members: z.union([z.literal('read'), z.literal('write')]).optional(),
          metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
          organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
          packages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pages: z.union([z.literal('read'), z.literal('write')]).optional(),
          pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
          repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
          secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
          security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
          single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
          statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
          team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
          vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
          workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
        })
        .optional(),
      slug: z.string().optional(),
      updated_at: z.string().nullable(),
    }),
    before: z.string().nullable(),
    check_runs_url: z.string(),
    conclusion: z
      .union([
        z.literal('success'),
        z.literal('failure'),
        z.literal('neutral'),
        z.literal('cancelled'),
        z.literal('timed_out'),
        z.literal('action_required'),
        z.literal('stale'),
      ])
      .nullable(),
    created_at: z.string(),
    head_branch: z.string().nullable(),
    head_commit: z.object({
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      tree_id: z.string(),
    }),
    head_sha: z.string(),
    id: z.number(),
    latest_check_runs_count: z.number(),
    node_id: z.string(),
    pull_requests: z.array(
      z.object({
        base: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        head: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        id: z.number(),
        number: z.number(),
        url: z.string(),
      }),
    ),
    rerequestable: z.boolean().optional(),
    runs_rerequestable: z.boolean().optional(),
    status: z
      .union([z.literal('requested'), z.literal('in_progress'), z.literal('completed'), z.literal('queued')])
      .nullable(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const conclusion5Schema = z.union([
  z.literal('success'),
  z.literal('failure'),
  z.literal('neutral'),
  z.literal('cancelled'),
  z.literal('timed_out'),
  z.literal('action_required'),
  z.literal('stale'),
]);

export const webhookCodeScanningAlertAppearedInBranchSchema = z.object({
  action: z.literal('appeared_in_branch'),
  alert: z.object({
    created_at: z.string(),
    dismissed_at: z.string().nullable(),
    dismissed_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    dismissed_reason: z.union([z.literal('false positive'), z.literal('won')]),
  }),
});

export const action8Schema = z.literal('appeared_in_branch');

export const dismissedReason2Schema = z.union([
  z.literal('false positive'),
  z.literal("won't fix"),
  z.literal('used in tests'),
]);

export const webhookCodeScanningAlertClosedByUserSchema = z.object({
  action: z.literal('closed_by_user'),
  alert: z.object({
    created_at: z.string(),
    dismissed_at: z.string(),
    dismissed_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    dismissed_reason: z.union([z.literal('false positive'), z.literal('won')]),
  }),
});

export const action9Schema = z.literal('closed_by_user');

export const webhookCodeScanningAlertCreatedSchema = z.object({
  action: z.literal('created'),
  alert: z.object({
    created_at: z.string().nullable(),
    dismissed_at: z.unknown(),
    dismissed_by: z.unknown(),
    dismissed_comment: codeScanningAlertDismissedCommentSchema.optional(),
    dismissed_reason: z.unknown(),
    fixed_at: z.unknown().optional(),
    html_url: z.string(),
    instances_url: z.string().optional(),
    most_recent_instance: z
      .object({
        analysis_key: z.string(),
        classifications: z.array(z.string()).optional(),
        commit_sha: z.string().optional(),
        environment: z.string(),
        location: z
          .object({
            end_column: z.number().optional(),
            end_line: z.number().optional(),
            path: z.string().optional(),
            start_column: z.number().optional(),
            start_line: z.number().optional(),
          })
          .optional(),
        message: z
          .object({
            text: z.string().optional(),
          })
          .optional(),
        ref: z.string(),
        state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
      })
      .optional()
      .nullable(),
    number: z.number(),
    rule: z.object({
      description: z.string(),
      full_description: z.string().optional(),
      help: z.string().optional().nullable(),
      help_uri: z.string().optional().nullable(),
      id: z.string(),
      name: z.string().optional(),
      severity: z.union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')]).nullable(),
      tags: z.array(z.string()).optional().nullable(),
    }),
    state: z.union([z.literal('open'), z.literal('dismissed')]),
    tool: z
      .object({
        guid: z.string().optional().nullable(),
        name: z.string(),
        version: z.string().nullable(),
      })
      .nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string(),
  }),
  commit_oid: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  ref: z.string(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookCodeScanningAlertFixedSchema = z.object({
  action: z.literal('fixed'),
  alert: z.object({
    created_at: z.string(),
    dismissed_at: z.string().nullable(),
    dismissed_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    dismissed_reason: z.union([z.literal('false positive'), z.literal('won')]),
  }),
});

export const action10Schema = z.literal('fixed');

export const webhookCodeScanningAlertReopenedSchema = z.object({
  action: z.literal('reopened'),
  alert: z
    .object({
      created_at: z.string(),
      dismissed_at: z.string().nullable(),
      dismissed_by: z.record(z.unknown()).nullable(),
      dismissed_reason: z.string().nullable(),
      html_url: z.string(),
      most_recent_instance: z
        .object({
          analysis_key: z.string(),
          classifications: z.array(z.string()).optional(),
          commit_sha: z.string().optional(),
          environment: z.string(),
          location: z
            .object({
              end_column: z.number().optional(),
              end_line: z.number().optional(),
              path: z.string().optional(),
              start_column: z.number().optional(),
              start_line: z.number().optional(),
            })
            .optional(),
          message: z
            .object({
              text: z.string().optional(),
            })
            .optional(),
          ref: z.string(),
          state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
        })
        .optional()
        .nullable(),
      number: z.number(),
      rule: z.object({
        description: z.string(),
        full_description: z.string().optional(),
        help: z.string().optional().nullable(),
        help_uri: z.string().optional().nullable(),
        id: z.string(),
        name: z.string().optional(),
        severity: z.union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')]).nullable(),
        tags: z.array(z.string()).optional().nullable(),
      }),
      state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
      tool: z.object({
        guid: z.string().optional().nullable(),
        name: z.string(),
        version: z.string().nullable(),
      }),
      url: z.string(),
    })
    .nullable(),
  commit_oid: z.string().nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  ref: z.string().nullable(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action11Schema = z.literal('reopened');

export const webhookCodeScanningAlertReopenedByUserSchema = z.object({
  action: z.literal('reopened_by_user'),
  alert: z.object({
    created_at: z.string(),
    dismissed_at: z.unknown(),
    dismissed_by: z.unknown(),
    dismissed_reason: z.unknown(),
    html_url: z.string(),
    most_recent_instance: z
      .object({
        analysis_key: z.string(),
        classifications: z.array(z.string()).optional(),
        commit_sha: z.string().optional(),
        environment: z.string(),
        location: z
          .object({
            end_column: z.number().optional(),
            end_line: z.number().optional(),
            path: z.string().optional(),
            start_column: z.number().optional(),
            start_line: z.number().optional(),
          })
          .optional(),
        message: z
          .object({
            text: z.string().optional(),
          })
          .optional(),
        ref: z.string(),
        state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
      })
      .optional()
      .nullable(),
    number: z.number(),
    rule: z.object({
      description: z.string(),
      id: z.string(),
      severity: z.union([z.literal('none'), z.literal('note'), z.literal('warning'), z.literal('error')]).nullable(),
    }),
    state: z.union([z.literal('open'), z.literal('fixed')]),
    tool: z.object({
      name: z.string(),
      version: z.string().nullable(),
    }),
    url: z.string(),
  }),
  commit_oid: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  ref: z.string(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action12Schema = z.literal('reopened_by_user');

export const webhookCommitCommentCreatedSchema = z.object({
  action: z.literal('created'),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    commit_id: z.string(),
    created_at: z.string(),
    html_url: z.string(),
    id: z.number(),
    line: z.number().nullable(),
    node_id: z.string(),
    path: z.string().nullable(),
    position: z.number().nullable(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookConfigSchema = z.object({
  content_type: webhookConfigContentTypeSchema.optional(),
  insecure_ssl: webhookConfigInsecureSslSchema.optional(),
  secret: webhookConfigSecretSchema.optional(),
  url: webhookConfigUrlSchema.optional(),
});

export const webhookCreateSchema = z.object({
  description: z.string().nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  master_branch: z.string(),
  organization: organizationSimpleSchema.optional(),
  pusher_type: z.string(),
  ref: z.string(),
  ref_type: z.union([z.literal('tag'), z.literal('branch')]),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const refTypeSchema = z.union([z.literal('tag'), z.literal('branch')]);

export const webhookDeleteSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pusher_type: z.string(),
  ref: z.string(),
  ref_type: z.union([z.literal('tag'), z.literal('branch')]),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const dependabotAlertSchema = z.object({
  created_at: alertCreatedAtSchema,
  dependency: z.object({
    manifest_path: z.string().optional(),
    package: dependabotAlertPackageSchema.optional(),
    scope: z
      .union([z.literal('development'), z.literal('runtime')])
      .optional()
      .nullable(),
  }),
  dismissed_at: alertDismissedAtSchema,
  dismissed_by: nullableSimpleUserSchema,
  dismissed_comment: z.string().nullable(),
  dismissed_reason: z
    .union([
      z.literal('fix_started'),
      z.literal('inaccurate'),
      z.literal('no_bandwidth'),
      z.literal('not_used'),
      z.literal('tolerable_risk'),
    ])
    .nullable(),
  fixed_at: alertFixedAtSchema,
  html_url: alertHtmlUrlSchema,
  number: alertNumberSchema,
  security_advisory: dependabotAlertSecurityAdvisorySchema,
  security_vulnerability: dependabotAlertSecurityVulnerabilitySchema,
  state: z.union([z.literal('dismissed'), z.literal('fixed'), z.literal('open')]),
  updated_at: alertUpdatedAtSchema,
  url: alertUrlSchema,
});

export const webhookDependabotAlertDismissedSchema = z.object({
  action: z.literal('dismissed'),
  alert: dependabotAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action13Schema = z.literal('dismissed');

export const webhookDependabotAlertFixedSchema = z.object({
  action: z.literal('fixed'),
  alert: dependabotAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDependabotAlertReintroducedSchema = z.object({
  action: z.literal('reintroduced'),
  alert: dependabotAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action14Schema = z.literal('reintroduced');

export const webhookDependabotAlertReopenedSchema = z.object({
  action: z.literal('reopened'),
  alert: dependabotAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDeployKeyCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  key: z.object({
    added_by: z.string().optional().nullable(),
    created_at: z.string(),
    id: z.number(),
    key: z.string(),
    last_used: z.string().optional().nullable(),
    read_only: z.boolean(),
    title: z.string(),
    url: z.string(),
    verified: z.boolean(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDeployKeyDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  key: z.object({
    added_by: z.string().optional().nullable(),
    created_at: z.string(),
    id: z.number(),
    key: z.string(),
    last_used: z.string().optional().nullable(),
    read_only: z.boolean(),
    title: z.string(),
    url: z.string(),
    verified: z.boolean(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDeploymentCreatedSchema = z.object({
  action: z.literal('created'),
  deployment: z.object({
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    environment: z.string(),
    id: z.number(),
    node_id: z.string(),
    original_environment: z.string(),
    payload: z.union([z.record(z.unknown()), z.string()]),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('workflow_job'),
              z.literal('pull_request_review_thread'),
              z.literal('merge_queue_entry'),
              z.literal('secret_scanning_alert_location'),
              z.literal('merge_group'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    production_environment: z.boolean().optional(),
    ref: z.string(),
    repository_url: z.string(),
    sha: z.string(),
    statuses_url: z.string(),
    task: z.string(),
    transient_environment: z.boolean().optional(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z
    .object({
      badge_url: z.string(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      state: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .nullable(),
  workflow_run: z
    .object({
      actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      artifacts_url: z.string().optional(),
      cancel_url: z.string().optional(),
      check_suite_id: z.number(),
      check_suite_node_id: z.string(),
      check_suite_url: z.string().optional(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
        ])
        .nullable(),
      created_at: z.string(),
      display_title: z.string(),
      event: z.string(),
      head_branch: z.string(),
      head_commit: z.unknown().optional(),
      head_repository: z
        .object({
          archive_url: z.string().optional(),
          assignees_url: z.string().optional(),
          blobs_url: z.string().optional(),
          branches_url: z.string().optional(),
          collaborators_url: z.string().optional(),
          comments_url: z.string().optional(),
          commits_url: z.string().optional(),
          compare_url: z.string().optional(),
          contents_url: z.string().optional(),
          contributors_url: z.string().optional(),
          deployments_url: z.string().optional(),
          description: z.unknown().optional(),
          downloads_url: z.string().optional(),
          events_url: z.string().optional(),
          fork: z.boolean().optional(),
          forks_url: z.string().optional(),
          full_name: z.string().optional(),
          git_commits_url: z.string().optional(),
          git_refs_url: z.string().optional(),
          git_tags_url: z.string().optional(),
          hooks_url: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          issue_comment_url: z.string().optional(),
          issue_events_url: z.string().optional(),
          issues_url: z.string().optional(),
          keys_url: z.string().optional(),
          labels_url: z.string().optional(),
          languages_url: z.string().optional(),
          merges_url: z.string().optional(),
          milestones_url: z.string().optional(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          notifications_url: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number().optional(),
              login: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.string().optional(),
              url: z.string().optional(),
            })
            .optional(),
          private: z.boolean().optional(),
          pulls_url: z.string().optional(),
          releases_url: z.string().optional(),
          stargazers_url: z.string().optional(),
          statuses_url: z.string().optional(),
          subscribers_url: z.string().optional(),
          subscription_url: z.string().optional(),
          tags_url: z.string().optional(),
          teams_url: z.string().optional(),
          trees_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      jobs_url: z.string().optional(),
      logs_url: z.string().optional(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      previous_attempt_url: z.unknown().optional(),
      pull_requests: z.array(
        z.object({
          base: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          head: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          id: z.number(),
          number: z.number(),
          url: z.string(),
        }),
      ),
      referenced_workflows: z
        .array(
          z.object({
            path: z.string(),
            ref: z.string().optional(),
            sha: z.string(),
          }),
        )
        .optional()
        .nullable(),
      repository: z
        .object({
          archive_url: z.string().optional(),
          assignees_url: z.string().optional(),
          blobs_url: z.string().optional(),
          branches_url: z.string().optional(),
          collaborators_url: z.string().optional(),
          comments_url: z.string().optional(),
          commits_url: z.string().optional(),
          compare_url: z.string().optional(),
          contents_url: z.string().optional(),
          contributors_url: z.string().optional(),
          deployments_url: z.string().optional(),
          description: z.unknown().optional(),
          downloads_url: z.string().optional(),
          events_url: z.string().optional(),
          fork: z.boolean().optional(),
          forks_url: z.string().optional(),
          full_name: z.string().optional(),
          git_commits_url: z.string().optional(),
          git_refs_url: z.string().optional(),
          git_tags_url: z.string().optional(),
          hooks_url: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          issue_comment_url: z.string().optional(),
          issue_events_url: z.string().optional(),
          issues_url: z.string().optional(),
          keys_url: z.string().optional(),
          labels_url: z.string().optional(),
          languages_url: z.string().optional(),
          merges_url: z.string().optional(),
          milestones_url: z.string().optional(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          notifications_url: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number().optional(),
              login: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.string().optional(),
              url: z.string().optional(),
            })
            .optional(),
          private: z.boolean().optional(),
          pulls_url: z.string().optional(),
          releases_url: z.string().optional(),
          stargazers_url: z.string().optional(),
          statuses_url: z.string().optional(),
          subscribers_url: z.string().optional(),
          subscription_url: z.string().optional(),
          tags_url: z.string().optional(),
          teams_url: z.string().optional(),
          trees_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      rerun_url: z.string().optional(),
      run_attempt: z.number(),
      run_number: z.number(),
      run_started_at: z.string(),
      status: z.union([
        z.literal('requested'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('queued'),
        z.literal('waiting'),
        z.literal('pending'),
      ]),
      triggering_actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      updated_at: z.string(),
      url: z.string(),
      workflow_id: z.number(),
      workflow_url: z.string().optional(),
    })
    .nullable(),
});

export const organizationProjects2Schema = z.union([z.literal('read'), z.literal('write')]);

export const repositoryProjects2Schema = z.union([z.literal('read'), z.literal('write')]);

export const status12Schema = z.union([
  z.literal('requested'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('queued'),
  z.literal('waiting'),
  z.literal('pending'),
]);

export const webhookDeploymentStatusCreatedSchema = z.object({
  action: z.literal('created'),
  check_run: z
    .object({
      completed_at: z.string().nullable(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
          z.literal('skipped'),
        ])
        .nullable(),
      details_url: z.string(),
      external_id: z.string(),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      started_at: z.string(),
      status: z.union([
        z.literal('queued'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('waiting'),
        z.literal('pending'),
      ]),
      url: z.string(),
    })
    .optional()
    .nullable(),
  deployment: z.object({
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    environment: z.string(),
    id: z.number(),
    node_id: z.string(),
    original_environment: z.string(),
    payload: z.union([z.string(), z.record(z.unknown())]).nullable(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('merge_queue_entry'),
              z.literal('workflow_job'),
              z.literal('pull_request_review_thread'),
              z.literal('secret_scanning_alert_location'),
              z.literal('merge_group'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    production_environment: z.boolean().optional(),
    ref: z.string(),
    repository_url: z.string(),
    sha: z.string(),
    statuses_url: z.string(),
    task: z.string(),
    transient_environment: z.boolean().optional(),
    updated_at: z.string(),
    url: z.string(),
  }),
  deployment_status: z.object({
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    deployment_url: z.string(),
    description: z.string(),
    environment: z.string(),
    environment_url: z.string().optional(),
    id: z.number(),
    log_url: z.string().optional(),
    node_id: z.string(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('pull_request_review_thread'),
              z.literal('merge_queue_entry'),
              z.literal('workflow_job'),
              z.literal('merge_group'),
              z.literal('secret_scanning_alert_location'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    repository_url: z.string(),
    state: z.string(),
    target_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z
    .object({
      badge_url: z.string(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      state: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .optional()
    .nullable(),
  workflow_run: z
    .object({
      actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      artifacts_url: z.string().optional(),
      cancel_url: z.string().optional(),
      check_suite_id: z.number(),
      check_suite_node_id: z.string(),
      check_suite_url: z.string().optional(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
          z.literal('startup_failure'),
        ])
        .nullable(),
      created_at: z.string(),
      display_title: z.string(),
      event: z.string(),
      head_branch: z.string(),
      head_commit: z.unknown().optional(),
      head_repository: z
        .object({
          archive_url: z.string().optional(),
          assignees_url: z.string().optional(),
          blobs_url: z.string().optional(),
          branches_url: z.string().optional(),
          collaborators_url: z.string().optional(),
          comments_url: z.string().optional(),
          commits_url: z.string().optional(),
          compare_url: z.string().optional(),
          contents_url: z.string().optional(),
          contributors_url: z.string().optional(),
          deployments_url: z.string().optional(),
          description: z.unknown().optional(),
          downloads_url: z.string().optional(),
          events_url: z.string().optional(),
          fork: z.boolean().optional(),
          forks_url: z.string().optional(),
          full_name: z.string().optional(),
          git_commits_url: z.string().optional(),
          git_refs_url: z.string().optional(),
          git_tags_url: z.string().optional(),
          hooks_url: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          issue_comment_url: z.string().optional(),
          issue_events_url: z.string().optional(),
          issues_url: z.string().optional(),
          keys_url: z.string().optional(),
          labels_url: z.string().optional(),
          languages_url: z.string().optional(),
          merges_url: z.string().optional(),
          milestones_url: z.string().optional(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          notifications_url: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number().optional(),
              login: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.string().optional(),
              url: z.string().optional(),
            })
            .optional(),
          private: z.boolean().optional(),
          pulls_url: z.string().optional(),
          releases_url: z.string().optional(),
          stargazers_url: z.string().optional(),
          statuses_url: z.string().optional(),
          subscribers_url: z.string().optional(),
          subscription_url: z.string().optional(),
          tags_url: z.string().optional(),
          teams_url: z.string().optional(),
          trees_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      jobs_url: z.string().optional(),
      logs_url: z.string().optional(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      previous_attempt_url: z.unknown().optional(),
      pull_requests: z.array(
        z.object({
          base: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          head: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          id: z.number(),
          number: z.number(),
          url: z.string(),
        }),
      ),
      referenced_workflows: z
        .array(
          z.object({
            path: z.string(),
            ref: z.string().optional(),
            sha: z.string(),
          }),
        )
        .optional()
        .nullable(),
      repository: z
        .object({
          archive_url: z.string().optional(),
          assignees_url: z.string().optional(),
          blobs_url: z.string().optional(),
          branches_url: z.string().optional(),
          collaborators_url: z.string().optional(),
          comments_url: z.string().optional(),
          commits_url: z.string().optional(),
          compare_url: z.string().optional(),
          contents_url: z.string().optional(),
          contributors_url: z.string().optional(),
          deployments_url: z.string().optional(),
          description: z.unknown().optional(),
          downloads_url: z.string().optional(),
          events_url: z.string().optional(),
          fork: z.boolean().optional(),
          forks_url: z.string().optional(),
          full_name: z.string().optional(),
          git_commits_url: z.string().optional(),
          git_refs_url: z.string().optional(),
          git_tags_url: z.string().optional(),
          hooks_url: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number().optional(),
          issue_comment_url: z.string().optional(),
          issue_events_url: z.string().optional(),
          issues_url: z.string().optional(),
          keys_url: z.string().optional(),
          labels_url: z.string().optional(),
          languages_url: z.string().optional(),
          merges_url: z.string().optional(),
          milestones_url: z.string().optional(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          notifications_url: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number().optional(),
              login: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.string().optional(),
              url: z.string().optional(),
            })
            .optional(),
          private: z.boolean().optional(),
          pulls_url: z.string().optional(),
          releases_url: z.string().optional(),
          stargazers_url: z.string().optional(),
          statuses_url: z.string().optional(),
          subscribers_url: z.string().optional(),
          subscription_url: z.string().optional(),
          tags_url: z.string().optional(),
          teams_url: z.string().optional(),
          trees_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      rerun_url: z.string().optional(),
      run_attempt: z.number(),
      run_number: z.number(),
      run_started_at: z.string(),
      status: z.union([
        z.literal('requested'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('queued'),
        z.literal('waiting'),
        z.literal('pending'),
      ]),
      triggering_actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      updated_at: z.string(),
      url: z.string(),
      workflow_id: z.number(),
      workflow_url: z.string().optional(),
    })
    .optional()
    .nullable(),
});

export const webhookDiscussionAnsweredSchema = z.object({
  action: z.literal('answered'),
  answer: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    child_comment_count: z.number(),
    created_at: z.string(),
    discussion_id: z.number(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    parent_id: z.unknown(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    repository_url: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action15Schema = z.literal('answered');

export const webhookDiscussionCategoryChangedSchema = z.object({
  action: z.literal('category_changed'),
  changes: z.object({
    category: z.object({
      from: z.object({
        created_at: z.string(),
        description: z.string(),
        emoji: z.string(),
        id: z.number(),
        is_answerable: z.boolean(),
        name: z.string(),
        node_id: z.string().optional(),
        repository_id: z.number(),
        slug: z.string(),
        updated_at: z.string(),
      }),
    }),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action16Schema = z.literal('category_changed');

export const webhookDiscussionCommentCreatedSchema = z.object({
  action: z.literal('created'),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    child_comment_count: z.number(),
    created_at: z.string(),
    discussion_id: z.number(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    parent_id: z.number().nullable(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionCommentDeletedSchema = z.object({
  action: z.literal('deleted'),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    child_comment_count: z.number(),
    created_at: z.string(),
    discussion_id: z.number(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    parent_id: z.number().nullable(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionCommentEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z.object({
      from: z.string(),
    }),
  }),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    child_comment_count: z.number(),
    created_at: z.string(),
    discussion_id: z.number(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    parent_id: z.number().nullable(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionCreatedSchema = z.object({
  action: z.literal('created'),
  discussion: z
    .object({
      active_lock_reason: z.string().nullable(),
      answer_chosen_at: z.string().nullable(),
      answer_chosen_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      answer_html_url: z.string().nullable(),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      category: z.object({
        created_at: z.string(),
        description: z.string(),
        emoji: z.string(),
        id: z.number(),
        is_answerable: z.boolean(),
        name: z.string(),
        node_id: z.string().optional(),
        repository_id: z.number(),
        slug: z.string(),
        updated_at: z.string(),
      }),
      comments: z.number(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      locked: z.boolean(),
      node_id: z.string(),
      number: z.number(),
      reactions: z
        .object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        })
        .optional(),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('locked'), z.literal('converting'), z.literal('transferring')]),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.unknown().optional(),
        answer_chosen_at: z.unknown(),
        answer_chosen_by: z.unknown(),
        answer_html_url: z.string().nullable(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        category: z
          .object({
            created_at: z.string().optional(),
            description: z.string().optional(),
            emoji: z.string().optional(),
            id: z.number().optional(),
            is_answerable: z.boolean().optional(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            repository_id: z.number().optional(),
            slug: z.string().optional(),
            updated_at: z.string().optional(),
          })
          .optional(),
        comments: z.number().optional(),
        created_at: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        locked: z.boolean(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('converting'), z.literal('transferring')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionDeletedSchema = z.object({
  action: z.literal('deleted'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z
    .object({
      body: z
        .object({
          from: z.string(),
        })
        .optional(),
      title: z
        .object({
          from: z.string(),
        })
        .optional(),
    })
    .optional(),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDiscussionLabeledSchema = z.object({
  action: z.literal('labeled'),
  discussion: z.object({
    active_lock_reason: z.string().nullable(),
    answer_chosen_at: z.string().nullable(),
    answer_chosen_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    answer_html_url: z.string().nullable(),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    category: z.object({
      created_at: z.string(),
      description: z.string(),
      emoji: z.string(),
      id: z.number(),
      is_answerable: z.boolean(),
      name: z.string(),
      node_id: z.string().optional(),
      repository_id: z.number(),
      slug: z.string(),
      updated_at: z.string(),
    }),
    comments: z.number(),
    created_at: z.string(),
    html_url: z.string(),
    id: z.number(),
    locked: z.boolean(),
    node_id: z.string(),
    number: z.number(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('locked'), z.literal('converting'), z.literal('transferring')]),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z.object({
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action17Schema = z.literal('labeled');

export const webhookDiscussionLockedSchema = z.object({
  action: z.literal('locked'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action18Schema = z.literal('locked');

export const webhookDiscussionPinnedSchema = z.object({
  action: z.literal('pinned'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action19Schema = z.literal('pinned');

export const webhookDiscussionTransferredSchema = z.object({
  action: z.literal('transferred'),
  changes: z.object({
    new_discussion: z.object({
      active_lock_reason: z.string().nullable(),
      answer_chosen_at: z.string().nullable(),
      answer_chosen_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      answer_html_url: z.string().nullable(),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string(),
      category: z.object({
        created_at: z.string(),
        description: z.string(),
        emoji: z.string(),
        id: z.number(),
        is_answerable: z.boolean(),
        name: z.string(),
        node_id: z.string().optional(),
        repository_id: z.number(),
        slug: z.string(),
        updated_at: z.string(),
      }),
      comments: z.number(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      locked: z.boolean(),
      node_id: z.string(),
      number: z.number(),
      reactions: z
        .object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        })
        .optional(),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('locked'), z.literal('converting'), z.literal('transferring')]),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    new_repository: z.object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_discussions: z.boolean(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
      web_commit_signoff_required: z.boolean().optional(),
    }),
  }),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action20Schema = z.literal('transferred');

export const visibility3Schema = z.union([z.literal('public'), z.literal('private'), z.literal('internal')]);

export const webhookDiscussionUnansweredSchema = z.object({
  action: z.literal('unanswered'),
  discussion: discussionSchema,
  old_answer: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    child_comment_count: z.number(),
    created_at: z.string(),
    discussion_id: z.number(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    parent_id: z.unknown(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    repository_url: z.string(),
    updated_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const action21Schema = z.literal('unanswered');

export const webhookDiscussionUnlabeledSchema = z.object({
  action: z.literal('unlabeled'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z.object({
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action22Schema = z.literal('unlabeled');

export const webhookDiscussionUnlockedSchema = z.object({
  action: z.literal('unlocked'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action23Schema = z.literal('unlocked');

export const webhookDiscussionUnpinnedSchema = z.object({
  action: z.literal('unpinned'),
  discussion: discussionSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action24Schema = z.literal('unpinned');

export const webhookForkSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  forkee: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
      web_commit_signoff_required: z.boolean().optional(),
    })
    .and(
      z.object({
        allow_forking: z.boolean().optional(),
        archive_url: z.string().optional(),
        archived: z.boolean().optional(),
        assignees_url: z.string().optional(),
        blobs_url: z.string().optional(),
        branches_url: z.string().optional(),
        clone_url: z.string().optional(),
        collaborators_url: z.string().optional(),
        comments_url: z.string().optional(),
        commits_url: z.string().optional(),
        compare_url: z.string().optional(),
        contents_url: z.string().optional(),
        contributors_url: z.string().optional(),
        created_at: z.string().optional(),
        default_branch: z.string().optional(),
        deployments_url: z.string().optional(),
        description: z.string().optional().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string().optional(),
        events_url: z.string().optional(),
        fork: z.boolean().optional(),
        forks: z.number().optional(),
        forks_count: z.number().optional(),
        forks_url: z.string().optional(),
        full_name: z.string().optional(),
        git_commits_url: z.string().optional(),
        git_refs_url: z.string().optional(),
        git_tags_url: z.string().optional(),
        git_url: z.string().optional(),
        has_downloads: z.boolean().optional(),
        has_issues: z.boolean().optional(),
        has_pages: z.boolean().optional(),
        has_projects: z.boolean().optional(),
        has_wiki: z.boolean().optional(),
        homepage: z.string().optional().nullable(),
        hooks_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string().optional(),
        issue_events_url: z.string().optional(),
        issues_url: z.string().optional(),
        keys_url: z.string().optional(),
        labels_url: z.string().optional(),
        language: z.unknown().optional(),
        languages_url: z.string().optional(),
        license: z.record(z.unknown()).optional().nullable(),
        merges_url: z.string().optional(),
        milestones_url: z.string().optional(),
        mirror_url: z.unknown().optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        notifications_url: z.string().optional(),
        open_issues: z.number().optional(),
        open_issues_count: z.number().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        private: z.boolean().optional(),
        public: z.boolean().optional(),
        pulls_url: z.string().optional(),
        pushed_at: z.string().optional(),
        releases_url: z.string().optional(),
        size: z.number().optional(),
        ssh_url: z.string().optional(),
        stargazers_count: z.number().optional(),
        stargazers_url: z.string().optional(),
        statuses_url: z.string().optional(),
        subscribers_url: z.string().optional(),
        subscription_url: z.string().optional(),
        svn_url: z.string().optional(),
        tags_url: z.string().optional(),
        teams_url: z.string().optional(),
        topics: z.array(z.unknown()).optional(),
        trees_url: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        visibility: z.string().optional(),
        watchers: z.number().optional(),
        watchers_count: z.number().optional(),
      }),
    ),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookGithubAppAuthorizationRevokedSchema = z.object({
  action: z.literal('revoked'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action25Schema = z.literal('revoked');

export const webhookGollumSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pages: z.array(
    z.object({
      action: z.union([z.literal('created'), z.literal('edited')]),
      html_url: z.string(),
      page_name: z.string(),
      sha: z.string(),
      summary: z.string().nullable(),
      title: z.string(),
    }),
  ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookInstallationCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories: z
    .array(
      z.object({
        full_name: z.string(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        private: z.boolean(),
      }),
    )
    .optional(),
  repository: repositorySchema.optional(),
  requester: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
  sender: simpleUserSchema,
});

export const webhookInstallationDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories: z
    .array(
      z.object({
        full_name: z.string(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        private: z.boolean(),
      }),
    )
    .optional(),
  repository: repositorySchema.optional(),
  requester: z.unknown().optional(),
  sender: simpleUserSchema,
});

export const webhookInstallationNewPermissionsAcceptedSchema = z.object({
  action: z.literal('new_permissions_accepted'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories: z
    .array(
      z.object({
        full_name: z.string(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        private: z.boolean(),
      }),
    )
    .optional(),
  repository: repositorySchema.optional(),
  requester: z.unknown().optional(),
  sender: simpleUserSchema,
});

export const action26Schema = z.literal('new_permissions_accepted');

export const webhookInstallationRepositoriesAddedSchema = z.object({
  action: z.literal('added'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories_added: z.array(
    z.object({
      full_name: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      private: z.boolean(),
    }),
  ),
  repositories_removed: z.array(
    z.object({
      full_name: z.string().optional(),
      id: z.number().optional(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      private: z.boolean().optional(),
    }),
  ),
  repository: repositorySchema.optional(),
  repository_selection: z.union([z.literal('all'), z.literal('selected')]),
  requester: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  sender: simpleUserSchema,
});

export const action27Schema = z.literal('added');

export const webhookInstallationRepositoriesRemovedSchema = z.object({
  action: z.literal('removed'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories_added: z.array(
    z.object({
      full_name: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      private: z.boolean(),
    }),
  ),
  repositories_removed: z.array(
    z.object({
      full_name: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      private: z.boolean(),
    }),
  ),
  repository: repositorySchema.optional(),
  repository_selection: z.union([z.literal('all'), z.literal('selected')]),
  requester: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  sender: simpleUserSchema,
});

export const action28Schema = z.literal('removed');

export const webhookInstallationSuspendSchema = z.object({
  action: z.literal('suspend'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories: z
    .array(
      z.object({
        full_name: z.string(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        private: z.boolean(),
      }),
    )
    .optional(),
  repository: repositorySchema.optional(),
  requester: z.unknown().optional(),
  sender: simpleUserSchema,
});

export const action29Schema = z.literal('suspend');

export const webhookInstallationTargetRenamedSchema = z.object({
  account: z.object({
    avatar_url: z.string(),
    created_at: z.string().optional(),
    description: z.unknown().optional(),
    events_url: z.string().optional(),
    followers: z.number().optional(),
    followers_url: z.string().optional(),
    following: z.number().optional(),
    following_url: z.string().optional(),
    gists_url: z.string().optional(),
    gravatar_id: z.string().optional(),
    has_organization_projects: z.boolean().optional(),
    has_repository_projects: z.boolean().optional(),
    hooks_url: z.string().optional(),
    html_url: z.string(),
    id: z.number(),
    is_verified: z.boolean().optional(),
    issues_url: z.string().optional(),
    login: z.string().optional(),
    members_url: z.string().optional(),
    name: z.string().optional(),
    node_id: z.string(),
    organizations_url: z.string().optional(),
    public_gists: z.number().optional(),
    public_members_url: z.string().optional(),
    public_repos: z.number().optional(),
    received_events_url: z.string().optional(),
    repos_url: z.string().optional(),
    site_admin: z.boolean().optional(),
    slug: z.string().optional(),
    starred_url: z.string().optional(),
    subscriptions_url: z.string().optional(),
    type: z.string().optional(),
    updated_at: z.string().optional(),
    url: z.string().optional(),
    website_url: z.unknown().optional(),
  }),
  action: z.string(),
  changes: z.object({
    login: z
      .object({
        from: z.string(),
      })
      .optional(),
    slug: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema,
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
  target_type: z.string(),
});

export const webhookInstallationUnsuspendSchema = z.object({
  action: z.literal('unsuspend'),
  enterprise: enterpriseSchema.optional(),
  installation: installationSchema,
  organization: organizationSimpleSchema.optional(),
  repositories: z
    .array(
      z.object({
        full_name: z.string(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        private: z.boolean(),
      }),
    )
    .optional(),
  repository: repositorySchema.optional(),
  requester: z.unknown().optional(),
  sender: simpleUserSchema,
});

export const action30Schema = z.literal('unsuspend');

export const webhookIssueCommentCreatedSchema = z.object({
  action: z.literal('created'),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    created_at: z.string(),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    node_id: z.string(),
    performed_via_github_app: nullableIntegrationSchema,
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('reminder'),
                z.literal('pull_request_review_thread'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        ),
        labels_url: z.string().optional(),
        locked: z.boolean(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const activeLockReasonSchema = z.union([
  z.literal('resolved'),
  z.literal('off-topic'),
  z.literal('too heated'),
  z.literal('spam'),
]);

export const webhookIssueCommentDeletedSchema = z.object({
  action: z.literal('deleted'),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    created_at: z.string(),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    node_id: z.string(),
    performed_via_github_app: nullableIntegrationSchema,
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        ),
        labels_url: z.string().optional(),
        locked: z.boolean(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const type7Schema = z.union([
  z.literal('Bot'),
  z.literal('User'),
  z.literal('Organization'),
  z.literal('Mannequin'),
]);

export const webhookIssueCommentEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  comment: z.object({
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    created_at: z.string(),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    node_id: z.string(),
    performed_via_github_app: nullableIntegrationSchema,
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('reminder'),
                z.literal('pull_request_review_thread'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        ),
        labels_url: z.string().optional(),
        locked: z.boolean(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesAssignedSchema = z.object({
  action: z.literal('assigned'),
  assignee: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('reminder'),
              z.literal('pull_request_review_thread'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action31Schema = z.literal('assigned');

export const webhookIssuesClosedSchema = z.object({
  action: z.literal('closed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('security_and_analysis'),
                z.literal('reminder'),
                z.literal('pull_request_review_thread'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean().optional(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('closed'), z.literal('open')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action32Schema = z.literal('closed');

export const webhookIssuesDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('reminder'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesDemilestonedSchema = z.object({
  action: z.literal('demilestoned'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean().optional(),
        milestone: z
          .object({
            closed_at: z.string().nullable(),
            closed_issues: z.number(),
            created_at: z.string(),
            creator: z
              .object({
                avatar_url: z.string().optional(),
                deleted: z.boolean().optional(),
                email: z.string().optional().nullable(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number(),
                login: z.string(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z
                  .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                  .optional(),
                url: z.string().optional(),
              })
              .nullable(),
            description: z.string().nullable(),
            due_on: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            labels_url: z.string(),
            node_id: z.string(),
            number: z.number(),
            open_issues: z.number(),
            state: z.union([z.literal('open'), z.literal('closed')]),
            title: z.string(),
            updated_at: z.string(),
            url: z.string(),
          })
          .nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.string().optional(),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  milestone: z
    .object({
      closed_at: z.string().nullable(),
      closed_issues: z.number(),
      created_at: z.string(),
      creator: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
      description: z.string().nullable(),
      due_on: z.string().nullable(),
      html_url: z.string(),
      id: z.number(),
      labels_url: z.string(),
      node_id: z.string(),
      number: z.number(),
      open_issues: z.number(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action33Schema = z.literal('demilestoned');

export const webhookIssuesEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
    title: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('security_and_analysis'),
              z.literal('pull_request_review_thread'),
              z.literal('reminder'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  label: z
    .object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    })
    .optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesLabeledSchema = z.object({
  action: z.literal('labeled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('pull_request_review_thread'),
              z.literal('reminder'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  label: z
    .object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    })
    .optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesLockedSchema = z.object({
  action: z.literal('locked'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('reminder'),
                z.literal('security_and_analysis'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z
          .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
          .nullable(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.string().optional(),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesMilestonedSchema = z.object({
  action: z.literal('milestoned'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('reminder'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean().optional(),
        milestone: z.object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        }),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.string().optional(),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action34Schema = z.literal('milestoned');

export const webhookIssuesOpenedSchema = z.object({
  action: z.literal('opened'),
  changes: z
    .object({
      old_issue: z
        .object({
          active_lock_reason: z
            .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
            .nullable(),
          assignee: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .optional()
            .nullable(),
          assignees: z.array(
            z
              .object({
                avatar_url: z.string().optional(),
                deleted: z.boolean().optional(),
                email: z.string().optional().nullable(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number(),
                login: z.string(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                url: z.string().optional(),
              })
              .nullable(),
          ),
          author_association: z.union([
            z.literal('COLLABORATOR'),
            z.literal('CONTRIBUTOR'),
            z.literal('FIRST_TIMER'),
            z.literal('FIRST_TIME_CONTRIBUTOR'),
            z.literal('MANNEQUIN'),
            z.literal('MEMBER'),
            z.literal('NONE'),
            z.literal('OWNER'),
          ]),
          body: z.string().nullable(),
          closed_at: z.string().nullable(),
          comments: z.number(),
          comments_url: z.string(),
          created_at: z.string(),
          draft: z.boolean().optional(),
          events_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          labels: z
            .array(
              z.object({
                color: z.string(),
                default: z.boolean(),
                description: z.string().nullable(),
                id: z.number(),
                name: z.string(),
                node_id: z.string(),
                url: z.string(),
              }),
            )
            .optional(),
          labels_url: z.string(),
          locked: z.boolean().optional(),
          milestone: z
            .object({
              closed_at: z.string().nullable(),
              closed_issues: z.number(),
              created_at: z.string(),
              creator: z
                .object({
                  avatar_url: z.string().optional(),
                  deleted: z.boolean().optional(),
                  email: z.string().optional().nullable(),
                  events_url: z.string().optional(),
                  followers_url: z.string().optional(),
                  following_url: z.string().optional(),
                  gists_url: z.string().optional(),
                  gravatar_id: z.string().optional(),
                  html_url: z.string().optional(),
                  id: z.number(),
                  login: z.string(),
                  name: z.string().optional(),
                  node_id: z.string().optional(),
                  organizations_url: z.string().optional(),
                  received_events_url: z.string().optional(),
                  repos_url: z.string().optional(),
                  site_admin: z.boolean().optional(),
                  starred_url: z.string().optional(),
                  subscriptions_url: z.string().optional(),
                  type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                  url: z.string().optional(),
                })
                .nullable(),
              description: z.string().nullable(),
              due_on: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              labels_url: z.string(),
              node_id: z.string(),
              number: z.number(),
              open_issues: z.number(),
              state: z.union([z.literal('open'), z.literal('closed')]),
              title: z.string(),
              updated_at: z.string(),
              url: z.string(),
            })
            .nullable(),
          node_id: z.string(),
          number: z.number(),
          performed_via_github_app: z
            .object({
              created_at: z.string().nullable(),
              description: z.string().nullable(),
              events: z
                .array(
                  z.union([
                    z.literal('branch_protection_rule'),
                    z.literal('check_run'),
                    z.literal('check_suite'),
                    z.literal('code_scanning_alert'),
                    z.literal('commit_comment'),
                    z.literal('content_reference'),
                    z.literal('create'),
                    z.literal('delete'),
                    z.literal('deployment'),
                    z.literal('deployment_review'),
                    z.literal('deployment_status'),
                    z.literal('deploy_key'),
                    z.literal('discussion'),
                    z.literal('discussion_comment'),
                    z.literal('fork'),
                    z.literal('gollum'),
                    z.literal('issues'),
                    z.literal('issue_comment'),
                    z.literal('label'),
                    z.literal('member'),
                    z.literal('membership'),
                    z.literal('milestone'),
                    z.literal('organization'),
                    z.literal('org_block'),
                    z.literal('page_build'),
                    z.literal('project'),
                    z.literal('project_card'),
                    z.literal('project_column'),
                    z.literal('public'),
                    z.literal('pull_request'),
                    z.literal('pull_request_review'),
                    z.literal('pull_request_review_comment'),
                    z.literal('push'),
                    z.literal('registry_package'),
                    z.literal('release'),
                    z.literal('repository'),
                    z.literal('repository_dispatch'),
                    z.literal('secret_scanning_alert'),
                    z.literal('star'),
                    z.literal('status'),
                    z.literal('team'),
                    z.literal('team_add'),
                    z.literal('watch'),
                    z.literal('workflow_dispatch'),
                    z.literal('workflow_run'),
                  ]),
                )
                .optional(),
              external_url: z.string().nullable(),
              html_url: z.string(),
              id: z.number().nullable(),
              name: z.string(),
              node_id: z.string(),
              owner: z
                .object({
                  avatar_url: z.string().optional(),
                  deleted: z.boolean().optional(),
                  email: z.string().optional().nullable(),
                  events_url: z.string().optional(),
                  followers_url: z.string().optional(),
                  following_url: z.string().optional(),
                  gists_url: z.string().optional(),
                  gravatar_id: z.string().optional(),
                  html_url: z.string().optional(),
                  id: z.number(),
                  login: z.string(),
                  name: z.string().optional(),
                  node_id: z.string().optional(),
                  organizations_url: z.string().optional(),
                  received_events_url: z.string().optional(),
                  repos_url: z.string().optional(),
                  site_admin: z.boolean().optional(),
                  starred_url: z.string().optional(),
                  subscriptions_url: z.string().optional(),
                  type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                  url: z.string().optional(),
                })
                .nullable(),
              permissions: z
                .object({
                  actions: z.union([z.literal('read'), z.literal('write')]).optional(),
                  administration: z.union([z.literal('read'), z.literal('write')]).optional(),
                  checks: z.union([z.literal('read'), z.literal('write')]).optional(),
                  content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
                  contents: z.union([z.literal('read'), z.literal('write')]).optional(),
                  deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
                  discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
                  emails: z.union([z.literal('read'), z.literal('write')]).optional(),
                  environments: z.union([z.literal('read'), z.literal('write')]).optional(),
                  issues: z.union([z.literal('read'), z.literal('write')]).optional(),
                  keys: z.union([z.literal('read'), z.literal('write')]).optional(),
                  members: z.union([z.literal('read'), z.literal('write')]).optional(),
                  metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
                  organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
                  packages: z.union([z.literal('read'), z.literal('write')]).optional(),
                  pages: z.union([z.literal('read'), z.literal('write')]).optional(),
                  pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
                  repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
                  repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
                  secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
                  secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
                  security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
                  security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
                  single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
                  statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
                  team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
                  vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
                  workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
                })
                .optional(),
              slug: z.string().optional(),
              updated_at: z.string().nullable(),
            })
            .optional()
            .nullable(),
          pull_request: z
            .object({
              diff_url: z.string().optional(),
              html_url: z.string().optional(),
              merged_at: z.string().optional().nullable(),
              patch_url: z.string().optional(),
              url: z.string().optional(),
            })
            .optional(),
          reactions: z.object({
            '+1': z.number(),
            '-1': z.number(),
            confused: z.number(),
            eyes: z.number(),
            heart: z.number(),
            hooray: z.number(),
            laugh: z.number(),
            rocket: z.number(),
            total_count: z.number(),
            url: z.string(),
          }),
          repository_url: z.string(),
          state: z.union([z.literal('open'), z.literal('closed')]).optional(),
          state_reason: z.string().optional().nullable(),
          timeline_url: z.string().optional(),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
          user: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
        })
        .nullable(),
      old_repository: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
      }),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('security_and_analysis'),
              z.literal('pull_request_review_thread'),
              z.literal('reminder'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action35Schema = z.literal('opened');

export const webhookIssuesPinnedSchema = z.object({
  action: z.literal('pinned'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesReopenedSchema = z.object({
  action: z.literal('reopened'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
                z.literal('pull_request_review_thread'),
                z.literal('reminder'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.string().optional().nullable(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean().optional(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.record(z.unknown()).optional().nullable(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesTransferredSchema = z.object({
  action: z.literal('transferred'),
  changes: z.object({
    new_issue: z.object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    new_repository: z.object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_discussions: z.boolean(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
      web_commit_signoff_required: z.boolean().optional(),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesUnassignedSchema = z.object({
  action: z.literal('unassigned'),
  assignee: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z
        .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
        .optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('reminder'),
              z.literal('pull_request_review_thread'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action36Schema = z.literal('unassigned');

export const webhookIssuesUnlabeledSchema = z.object({
  action: z.literal('unlabeled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
              z.literal('reminder'),
              z.literal('pull_request_review_thread'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  label: z
    .object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    })
    .optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesUnlockedSchema = z.object({
  action: z.literal('unlocked'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z
    .object({
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      body: z.string().nullable(),
      closed_at: z.string().nullable(),
      comments: z.number(),
      comments_url: z.string(),
      created_at: z.string(),
      draft: z.boolean().optional(),
      events_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z
        .array(
          z.object({
            color: z.string(),
            default: z.boolean(),
            description: z.string().nullable(),
            id: z.number(),
            name: z.string(),
            node_id: z.string(),
            url: z.string(),
          }),
        )
        .optional(),
      labels_url: z.string(),
      locked: z.boolean().optional(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      performed_via_github_app: z
        .object({
          created_at: z.string().nullable(),
          description: z.string().nullable(),
          events: z
            .array(
              z.union([
                z.literal('branch_protection_rule'),
                z.literal('check_run'),
                z.literal('check_suite'),
                z.literal('code_scanning_alert'),
                z.literal('commit_comment'),
                z.literal('content_reference'),
                z.literal('create'),
                z.literal('delete'),
                z.literal('deployment'),
                z.literal('deployment_review'),
                z.literal('deployment_status'),
                z.literal('deploy_key'),
                z.literal('discussion'),
                z.literal('discussion_comment'),
                z.literal('fork'),
                z.literal('gollum'),
                z.literal('issues'),
                z.literal('issue_comment'),
                z.literal('label'),
                z.literal('member'),
                z.literal('membership'),
                z.literal('milestone'),
                z.literal('organization'),
                z.literal('org_block'),
                z.literal('page_build'),
                z.literal('project'),
                z.literal('project_card'),
                z.literal('project_column'),
                z.literal('public'),
                z.literal('pull_request'),
                z.literal('pull_request_review'),
                z.literal('pull_request_review_comment'),
                z.literal('push'),
                z.literal('registry_package'),
                z.literal('release'),
                z.literal('repository'),
                z.literal('repository_dispatch'),
                z.literal('secret_scanning_alert'),
                z.literal('star'),
                z.literal('status'),
                z.literal('team'),
                z.literal('team_add'),
                z.literal('watch'),
                z.literal('workflow_dispatch'),
                z.literal('workflow_run'),
              ]),
            )
            .optional(),
          external_url: z.string().nullable(),
          html_url: z.string(),
          id: z.number().nullable(),
          name: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              actions: z.union([z.literal('read'), z.literal('write')]).optional(),
              administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              checks: z.union([z.literal('read'), z.literal('write')]).optional(),
              content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
              contents: z.union([z.literal('read'), z.literal('write')]).optional(),
              deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
              discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              emails: z.union([z.literal('read'), z.literal('write')]).optional(),
              environments: z.union([z.literal('read'), z.literal('write')]).optional(),
              issues: z.union([z.literal('read'), z.literal('write')]).optional(),
              keys: z.union([z.literal('read'), z.literal('write')]).optional(),
              members: z.union([z.literal('read'), z.literal('write')]).optional(),
              metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
              organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
              packages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pages: z.union([z.literal('read'), z.literal('write')]).optional(),
              pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
              repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
              secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
              security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
              single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
              statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
              team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
              vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
              workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
            })
            .optional(),
          slug: z.string().optional(),
          updated_at: z.string().nullable(),
        })
        .optional()
        .nullable(),
      pull_request: z
        .object({
          diff_url: z.string().optional(),
          html_url: z.string().optional(),
          merged_at: z.string().optional().nullable(),
          patch_url: z.string().optional(),
          url: z.string().optional(),
        })
        .optional(),
      reactions: z.object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      }),
      repository_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z.string().optional().nullable(),
      timeline_url: z.string().optional(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        active_lock_reason: z.unknown(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        body: z.string().optional().nullable(),
        closed_at: z.string().optional().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        created_at: z.string().optional(),
        events_url: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        labels_url: z.string().optional(),
        locked: z.boolean(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        performed_via_github_app: z.unknown().optional(),
        reactions: z
          .object({
            '+1': z.number().optional(),
            '-1': z.number().optional(),
            confused: z.number().optional(),
            eyes: z.number().optional(),
            heart: z.number().optional(),
            hooray: z.number().optional(),
            laugh: z.number().optional(),
            rocket: z.number().optional(),
            total_count: z.number().optional(),
            url: z.string().optional(),
          })
          .optional(),
        repository_url: z.string().optional(),
        state: z.string().optional(),
        timeline_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookIssuesUnpinnedSchema = z.object({
  action: z.literal('unpinned'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  issue: z.object({
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments: z.number(),
    comments_url: z.string(),
    created_at: z.string(),
    draft: z.boolean().optional(),
    events_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z
      .array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      )
      .optional(),
    labels_url: z.string(),
    locked: z.boolean().optional(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    performed_via_github_app: z
      .object({
        created_at: z.string().nullable(),
        description: z.string().nullable(),
        events: z
          .array(
            z.union([
              z.literal('branch_protection_rule'),
              z.literal('check_run'),
              z.literal('check_suite'),
              z.literal('code_scanning_alert'),
              z.literal('commit_comment'),
              z.literal('content_reference'),
              z.literal('create'),
              z.literal('delete'),
              z.literal('deployment'),
              z.literal('deployment_review'),
              z.literal('deployment_status'),
              z.literal('deploy_key'),
              z.literal('discussion'),
              z.literal('discussion_comment'),
              z.literal('fork'),
              z.literal('gollum'),
              z.literal('issues'),
              z.literal('issue_comment'),
              z.literal('label'),
              z.literal('member'),
              z.literal('membership'),
              z.literal('milestone'),
              z.literal('organization'),
              z.literal('org_block'),
              z.literal('page_build'),
              z.literal('project'),
              z.literal('project_card'),
              z.literal('project_column'),
              z.literal('public'),
              z.literal('pull_request'),
              z.literal('pull_request_review'),
              z.literal('pull_request_review_comment'),
              z.literal('push'),
              z.literal('registry_package'),
              z.literal('release'),
              z.literal('repository'),
              z.literal('repository_dispatch'),
              z.literal('secret_scanning_alert'),
              z.literal('star'),
              z.literal('status'),
              z.literal('team'),
              z.literal('team_add'),
              z.literal('watch'),
              z.literal('workflow_dispatch'),
              z.literal('workflow_run'),
            ]),
          )
          .optional(),
        external_url: z.string().nullable(),
        html_url: z.string(),
        id: z.number().nullable(),
        name: z.string(),
        node_id: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            actions: z.union([z.literal('read'), z.literal('write')]).optional(),
            administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            checks: z.union([z.literal('read'), z.literal('write')]).optional(),
            content_references: z.union([z.literal('read'), z.literal('write')]).optional(),
            contents: z.union([z.literal('read'), z.literal('write')]).optional(),
            deployments: z.union([z.literal('read'), z.literal('write')]).optional(),
            discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            emails: z.union([z.literal('read'), z.literal('write')]).optional(),
            environments: z.union([z.literal('read'), z.literal('write')]).optional(),
            issues: z.union([z.literal('read'), z.literal('write')]).optional(),
            keys: z.union([z.literal('read'), z.literal('write')]).optional(),
            members: z.union([z.literal('read'), z.literal('write')]).optional(),
            metadata: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_administration: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_plan: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_self_hosted_runners: z.union([z.literal('read'), z.literal('write')]).optional(),
            organization_user_blocking: z.union([z.literal('read'), z.literal('write')]).optional(),
            packages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pages: z.union([z.literal('read'), z.literal('write')]).optional(),
            pull_requests: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_hooks: z.union([z.literal('read'), z.literal('write')]).optional(),
            repository_projects: z.union([z.literal('read'), z.literal('write')]).optional(),
            secret_scanning_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            secrets: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_events: z.union([z.literal('read'), z.literal('write')]).optional(),
            security_scanning_alert: z.union([z.literal('read'), z.literal('write')]).optional(),
            single_file: z.union([z.literal('read'), z.literal('write')]).optional(),
            statuses: z.union([z.literal('read'), z.literal('write')]).optional(),
            team_discussions: z.union([z.literal('read'), z.literal('write')]).optional(),
            vulnerability_alerts: z.union([z.literal('read'), z.literal('write')]).optional(),
            workflows: z.union([z.literal('read'), z.literal('write')]).optional(),
          })
          .optional(),
        slug: z.string().optional(),
        updated_at: z.string().nullable(),
      })
      .optional()
      .nullable(),
    pull_request: z
      .object({
        diff_url: z.string().optional(),
        html_url: z.string().optional(),
        merged_at: z.string().optional().nullable(),
        patch_url: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    repository_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    state_reason: z.string().optional().nullable(),
    timeline_url: z.string().optional(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookLabelCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z.object({
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookLabelDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z.object({
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookLabelEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z
    .object({
      color: z
        .object({
          from: z.string(),
        })
        .optional(),
      description: z
        .object({
          from: z.string(),
        })
        .optional(),
      name: z
        .object({
          from: z.string(),
        })
        .optional(),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z.object({
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMarketplacePurchaseCancelledSchema = z.object({
  action: z.literal('cancelled'),
  effective_date: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .and(
      z.object({
        account: z
          .object({
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organization_billing_email: z.string().optional().nullable(),
            type: z.string().optional(),
          })
          .optional(),
        billing_cycle: z.string().optional(),
        free_trial_ends_on: z.string().optional().nullable(),
        next_billing_date: z.string().nullable(),
        on_free_trial: z.boolean().optional(),
        plan: z
          .object({
            bullets: z.array(z.string().nullable()).optional(),
            description: z.string().optional(),
            has_free_trial: z.boolean().optional(),
            id: z.number().optional(),
            monthly_price_in_cents: z.number().optional(),
            name: z.string().optional(),
            price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]).optional(),
            unit_name: z.string().optional().nullable(),
            yearly_price_in_cents: z.number().optional(),
          })
          .optional(),
        unit_count: z.number().optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  previous_marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.unknown(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action37Schema = z.literal('cancelled');

export const webhookMarketplacePurchaseChangedSchema = z.object({
  action: z.literal('changed'),
  effective_date: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .and(
      z.object({
        account: z
          .object({
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organization_billing_email: z.string().optional().nullable(),
            type: z.string().optional(),
          })
          .optional(),
        billing_cycle: z.string().optional(),
        free_trial_ends_on: z.string().optional().nullable(),
        next_billing_date: z.string().nullable(),
        on_free_trial: z.boolean().optional(),
        plan: z
          .object({
            bullets: z.array(z.string().nullable()).optional(),
            description: z.string().optional(),
            has_free_trial: z.boolean().optional(),
            id: z.number().optional(),
            monthly_price_in_cents: z.number().optional(),
            name: z.string().optional(),
            price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]).optional(),
            unit_name: z.string().optional().nullable(),
            yearly_price_in_cents: z.number().optional(),
          })
          .optional(),
        unit_count: z.number().optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  previous_marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean().nullable(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action38Schema = z.literal('changed');

export const webhookMarketplacePurchasePendingChangeSchema = z.object({
  action: z.literal('pending_change'),
  effective_date: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .and(
      z.object({
        account: z
          .object({
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organization_billing_email: z.string().optional().nullable(),
            type: z.string().optional(),
          })
          .optional(),
        billing_cycle: z.string().optional(),
        free_trial_ends_on: z.string().optional().nullable(),
        next_billing_date: z.string().nullable(),
        on_free_trial: z.boolean().optional(),
        plan: z
          .object({
            bullets: z.array(z.string().nullable()).optional(),
            description: z.string().optional(),
            has_free_trial: z.boolean().optional(),
            id: z.number().optional(),
            monthly_price_in_cents: z.number().optional(),
            name: z.string().optional(),
            price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]).optional(),
            unit_name: z.string().optional().nullable(),
            yearly_price_in_cents: z.number().optional(),
          })
          .optional(),
        unit_count: z.number().optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  previous_marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action39Schema = z.literal('pending_change');

export const webhookMarketplacePurchasePendingChangeCancelledSchema = z.object({
  action: z.literal('pending_change_cancelled'),
  effective_date: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.unknown(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .and(
      z.object({
        next_billing_date: z.string(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  previous_marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.unknown(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action40Schema = z.literal('pending_change_cancelled');

export const webhookMarketplacePurchasePurchasedSchema = z.object({
  action: z.literal('purchased'),
  effective_date: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.string().nullable(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .and(
      z.object({
        account: z
          .object({
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organization_billing_email: z.string().optional().nullable(),
            type: z.string().optional(),
          })
          .optional(),
        billing_cycle: z.string().optional(),
        free_trial_ends_on: z.string().optional().nullable(),
        next_billing_date: z.string().nullable(),
        on_free_trial: z.boolean().optional(),
        plan: z
          .object({
            bullets: z.array(z.string().nullable()).optional(),
            description: z.string().optional(),
            has_free_trial: z.boolean().optional(),
            id: z.number().optional(),
            monthly_price_in_cents: z.number().optional(),
            name: z.string().optional(),
            price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]).optional(),
            unit_name: z.string().optional().nullable(),
            yearly_price_in_cents: z.number().optional(),
          })
          .optional(),
        unit_count: z.number().optional(),
      }),
    ),
  organization: organizationSimpleSchema.optional(),
  previous_marketplace_purchase: z
    .object({
      account: z.object({
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organization_billing_email: z.string().nullable(),
        type: z.string(),
      }),
      billing_cycle: z.string(),
      free_trial_ends_on: z.unknown(),
      next_billing_date: z.string().optional().nullable(),
      on_free_trial: z.boolean(),
      plan: z.object({
        bullets: z.array(z.string()),
        description: z.string(),
        has_free_trial: z.boolean(),
        id: z.number(),
        monthly_price_in_cents: z.number(),
        name: z.string(),
        price_model: z.union([z.literal('FREE'), z.literal('FLAT_RATE'), z.literal('PER_UNIT')]),
        unit_name: z.string().nullable(),
        yearly_price_in_cents: z.number(),
      }),
      unit_count: z.number(),
    })
    .optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action41Schema = z.literal('purchased');

export const webhookMemberAddedSchema = z.object({
  action: z.literal('added'),
  changes: z
    .object({
      permission: z
        .object({
          to: z.union([z.literal('write'), z.literal('admin'), z.literal('read')]),
        })
        .optional(),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  member: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const toSchema = z.union([z.literal('write'), z.literal('admin'), z.literal('read')]);

export const webhookMemberEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    old_permission: z
      .object({
        from: z.string(),
      })
      .optional(),
    permission: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  member: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMemberRemovedSchema = z.object({
  action: z.literal('removed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  member: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMembershipAddedSchema = z.object({
  action: z.literal('added'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  member: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  scope: z.literal('team'),
  sender: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const scope3Schema = z.literal('team');

export const privacy2Schema = z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]);

export const webhookMembershipRemovedSchema = z.object({
  action: z.literal('removed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  member: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  scope: z.union([z.literal('team'), z.literal('organization')]),
  sender: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const scope4Schema = z.union([z.literal('team'), z.literal('organization')]);

export const webhookMergeGroupChecksRequestedSchema = z.object({
  action: z.string(),
  installation: simpleInstallationSchema.optional(),
  merge_group: z.object({
    base_ref: z.string(),
    base_sha: z.string(),
    head_commit: z.object({
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      tree_id: z.string(),
    }),
    head_ref: z.string(),
    head_sha: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookMetaDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  hook: z.object({
    active: z.boolean(),
    config: z.object({
      content_type: z.union([z.literal('json'), z.literal('form')]),
      insecure_ssl: z.string(),
      secret: z.string().optional(),
      url: z.string(),
    }),
    created_at: z.string(),
    events: z.array(
      z.union([
        z.literal('*'),
        z.literal('branch_protection_rule'),
        z.literal('check_run'),
        z.literal('check_suite'),
        z.literal('code_scanning_alert'),
        z.literal('commit_comment'),
        z.literal('create'),
        z.literal('delete'),
        z.literal('deployment'),
        z.literal('deployment_status'),
        z.literal('deploy_key'),
        z.literal('discussion'),
        z.literal('discussion_comment'),
        z.literal('fork'),
        z.literal('gollum'),
        z.literal('issues'),
        z.literal('issue_comment'),
        z.literal('label'),
        z.literal('member'),
        z.literal('membership'),
        z.literal('meta'),
        z.literal('milestone'),
        z.literal('organization'),
        z.literal('org_block'),
        z.literal('package'),
        z.literal('page_build'),
        z.literal('project'),
        z.literal('project_card'),
        z.literal('project_column'),
        z.literal('public'),
        z.literal('pull_request'),
        z.literal('pull_request_review'),
        z.literal('pull_request_review_comment'),
        z.literal('pull_request_review_thread'),
        z.literal('push'),
        z.literal('registry_package'),
        z.literal('release'),
        z.literal('repository'),
        z.literal('repository_import'),
        z.literal('repository_vulnerability_alert'),
        z.literal('secret_scanning_alert'),
        z.literal('secret_scanning_alert_location'),
        z.literal('security_and_analysis'),
        z.literal('star'),
        z.literal('status'),
        z.literal('team'),
        z.literal('team_add'),
        z.literal('watch'),
        z.literal('workflow_job'),
        z.literal('workflow_run'),
        z.literal('repository_dispatch'),
        z.literal('projects_v2_item'),
      ]),
    ),
    id: z.number(),
    name: z.string(),
    type: z.string(),
    updated_at: z.string(),
  }),
  hook_id: z.number(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: nullableRepositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const contentTypeSchema = z.union([z.literal('json'), z.literal('form')]);

export const webhookMilestoneClosedSchema = z.object({
  action: z.literal('closed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMilestoneCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMilestoneDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMilestoneEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    description: z
      .object({
        from: z.string(),
      })
      .optional(),
    due_on: z
      .object({
        from: z.string(),
      })
      .optional(),
    title: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookMilestoneOpenedSchema = z.object({
  action: z.literal('opened'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  milestone: z.object({
    closed_at: z.string().nullable(),
    closed_issues: z.number(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    description: z.string().nullable(),
    due_on: z.string().nullable(),
    html_url: z.string(),
    id: z.number(),
    labels_url: z.string(),
    node_id: z.string(),
    number: z.number(),
    open_issues: z.number(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookOrgBlockBlockedSchema = z.object({
  action: z.literal('blocked'),
  blocked_user: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action42Schema = z.literal('blocked');

export const webhookOrgBlockUnblockedSchema = z.object({
  action: z.literal('unblocked'),
  blocked_user: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action43Schema = z.literal('unblocked');

export const webhookOrganizationDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  membership: z
    .object({
      organization_url: z.string(),
      role: z.string(),
      state: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .optional(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookOrganizationMemberAddedSchema = z.object({
  action: z.literal('member_added'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  membership: z.object({
    organization_url: z.string(),
    role: z.string(),
    state: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action44Schema = z.literal('member_added');

export const webhookOrganizationMemberInvitedSchema = z.object({
  action: z.literal('member_invited'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  invitation: z.object({
    created_at: z.string(),
    email: z.string().nullable(),
    failed_at: z.string().nullable(),
    failed_reason: z.string().nullable(),
    id: z.number(),
    invitation_source: z.string().optional(),
    invitation_teams_url: z.string(),
    inviter: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    login: z.string().nullable(),
    node_id: z.string(),
    role: z.string(),
    team_count: z.number(),
  }),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  user: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
});

export const action45Schema = z.literal('member_invited');

export const webhookOrganizationMemberRemovedSchema = z.object({
  action: z.literal('member_removed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  membership: z.object({
    organization_url: z.string(),
    role: z.string(),
    state: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action46Schema = z.literal('member_removed');

export const webhookOrganizationRenamedSchema = z.object({
  action: z.literal('renamed'),
  changes: z
    .object({
      login: z
        .object({
          from: z.string().optional(),
        })
        .optional(),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  membership: z
    .object({
      organization_url: z.string(),
      role: z.string(),
      state: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .optional(),
  organization: organizationSimpleSchema,
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action47Schema = z.literal('renamed');

export const webhookPackagePublishedSchema = z.object({
  action: z.literal('published'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  package: z.object({
    created_at: z.string().nullable(),
    description: z.string().nullable(),
    ecosystem: z.string(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    namespace: z.string(),
    owner: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    package_type: z.string(),
    package_version: z
      .object({
        author: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        body: z.union([z.string(), z.record(z.unknown())]).optional(),
        body_html: z.string().optional(),
        container_metadata: z
          .object({
            labels: z.record(z.unknown()).optional().nullable(),
            manifest: z.record(z.unknown()).optional().nullable(),
            tag: z
              .object({
                digest: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
          })
          .optional()
          .nullable(),
        created_at: z.string().optional(),
        description: z.string(),
        docker_metadata: z.array(z.unknown()).optional(),
        draft: z.boolean().optional(),
        html_url: z.string(),
        id: z.number(),
        installation_command: z.string(),
        manifest: z.string().optional(),
        metadata: z.array(z.record(z.unknown())),
        name: z.string(),
        npm_metadata: z
          .object({
            author: z.record(z.unknown()).optional().nullable(),
            bin: z.record(z.unknown()).optional(),
            bugs: z.record(z.unknown()).optional().nullable(),
            commit_oid: z.string().optional(),
            contributors: z.array(z.record(z.unknown())).optional(),
            cpu: z.array(z.string()).optional(),
            deleted_by_id: z.number().optional(),
            dependencies: z.record(z.unknown()).optional(),
            description: z.string().optional(),
            dev_dependencies: z.record(z.unknown()).optional(),
            directories: z.record(z.unknown()).optional().nullable(),
            dist: z.record(z.unknown()).optional().nullable(),
            engines: z.record(z.unknown()).optional(),
            files: z.array(z.string()).optional(),
            git_head: z.string().optional(),
            has_shrinkwrap: z.boolean().optional(),
            homepage: z.string().optional(),
            id: z.string().optional(),
            installation_command: z.string().optional(),
            keywords: z.array(z.string()).optional(),
            license: z.string().optional(),
            main: z.string().optional(),
            maintainers: z.array(z.record(z.unknown())).optional(),
            man: z.record(z.unknown()).optional(),
            name: z.string().optional(),
            node_version: z.string().optional(),
            npm_user: z.string().optional(),
            npm_version: z.string().optional(),
            optional_dependencies: z.record(z.unknown()).optional(),
            os: z.array(z.string()).optional(),
            peer_dependencies: z.record(z.unknown()).optional(),
            published_via_actions: z.boolean().optional(),
            readme: z.string().optional(),
            release_id: z.number().optional(),
            repository: z.record(z.unknown()).optional().nullable(),
            scripts: z.record(z.unknown()).optional(),
            version: z.string().optional(),
          })
          .optional()
          .nullable(),
        nuget_metadata: z
          .array(
            z.object({
              id: z.union([z.number(), z.string()]).optional(),
              name: z.string().optional(),
              value: z
                .union([
                  z.boolean(),
                  z.string(),
                  z.number(),
                  z.object({
                    branch: z.string().optional(),
                    commit: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  }),
                ])
                .optional(),
            }),
          )
          .optional()
          .nullable(),
        package_files: z.array(
          z.object({
            content_type: z.string(),
            created_at: z.string(),
            download_url: z.string(),
            id: z.number(),
            md5: z.string().nullable(),
            name: z.string(),
            sha1: z.string().nullable(),
            sha256: z.string().nullable(),
            size: z.number(),
            state: z.string().nullable(),
            updated_at: z.string(),
          }),
        ),
        package_url: z.string().optional(),
        prerelease: z.boolean().optional(),
        release: z
          .object({
            author: z
              .object({
                avatar_url: z.string().optional(),
                deleted: z.boolean().optional(),
                email: z.string().optional().nullable(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number(),
                login: z.string(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                url: z.string().optional(),
              })
              .nullable(),
            created_at: z.string(),
            draft: z.boolean(),
            html_url: z.string(),
            id: z.number(),
            name: z.string().nullable(),
            prerelease: z.boolean(),
            published_at: z.string(),
            tag_name: z.string(),
            target_commitish: z.string(),
            url: z.string(),
          })
          .optional(),
        rubygems_metadata: z.array(z.unknown()).optional(),
        source_url: z.string().optional(),
        summary: z.string(),
        tag_name: z.string().optional(),
        target_commitish: z.string().optional(),
        target_oid: z.string().optional(),
        updated_at: z.string().optional(),
        version: z.string(),
      })
      .nullable(),
    registry: z
      .object({
        about_url: z.string(),
        name: z.string(),
        type: z.string(),
        url: z.string(),
        vendor: z.string(),
      })
      .nullable(),
    updated_at: z.string().nullable(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action48Schema = z.literal('published');

export const webhookPackageUpdatedSchema = z.object({
  action: z.literal('updated'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  package: z.object({
    created_at: z.string(),
    description: z.string().nullable(),
    ecosystem: z.string(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    namespace: z.string(),
    owner: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    package_type: z.string(),
    package_version: z.object({
      author: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      body: z.string(),
      body_html: z.string(),
      created_at: z.string(),
      description: z.string(),
      docker_metadata: z.array(z.unknown()).optional(),
      draft: z.boolean().optional(),
      html_url: z.string(),
      id: z.number(),
      installation_command: z.string(),
      manifest: z.string().optional(),
      metadata: z.array(z.unknown()),
      name: z.string(),
      package_files: z.array(
        z.object({
          content_type: z.string(),
          created_at: z.string(),
          download_url: z.string(),
          id: z.number(),
          md5: z.string().nullable(),
          name: z.string(),
          sha1: z.string().nullable(),
          sha256: z.string(),
          size: z.number(),
          state: z.string(),
          updated_at: z.string(),
        }),
      ),
      package_url: z.string().optional(),
      prerelease: z.boolean().optional(),
      release: z
        .object({
          author: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          created_at: z.string(),
          draft: z.boolean(),
          html_url: z.string(),
          id: z.number(),
          name: z.string(),
          prerelease: z.boolean(),
          published_at: z.string(),
          tag_name: z.string(),
          target_commitish: z.string(),
          url: z.string(),
        })
        .optional(),
      rubygems_metadata: z.array(z.unknown()).optional(),
      source_url: z.string().optional(),
      summary: z.string(),
      tag_name: z.string().optional(),
      target_commitish: z.string(),
      target_oid: z.string(),
      updated_at: z.string(),
      version: z.string(),
    }),
    registry: z
      .object({
        about_url: z.string(),
        name: z.string(),
        type: z.string(),
        url: z.string(),
        vendor: z.string(),
      })
      .nullable(),
    updated_at: z.string(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action49Schema = z.literal('updated');

export const webhookPageBuildSchema = z.object({
  build: z.object({
    commit: z.string().nullable(),
    created_at: z.string(),
    duration: z.number(),
    error: z.object({
      message: z.string().nullable(),
    }),
    pusher: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    status: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  enterprise: enterpriseSchema.optional(),
  id: z.number(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPingSchema = z.object({
  hook: z
    .object({
      active: z.boolean(),
      app_id: z.number().optional(),
      config: z.object({
        content_type: webhookConfigContentTypeSchema.optional(),
        insecure_ssl: webhookConfigInsecureSslSchema.optional(),
        secret: webhookConfigSecretSchema.optional(),
        url: webhookConfigUrlSchema.optional(),
      }),
      created_at: z.string(),
      deliveries_url: z.string().optional(),
      events: z.array(z.string()),
      id: z.number(),
      last_response: hookResponseSchema.optional(),
      name: z.literal('web'),
      ping_url: z.string().optional(),
      test_url: z.string().optional(),
      type: z.string(),
      updated_at: z.string(),
      url: z.string().optional(),
    })
    .optional(),
  hook_id: z.number().optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
  zen: z.string().optional(),
});

export const nameSchema = z.literal('web');

export const webhookPingFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookProjectCardConvertedSchema = z.object({
  action: z.literal('converted'),
  changes: z.object({
    note: z.object({
      from: z.string(),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_card: z.object({
    after_id: z.number().optional().nullable(),
    archived: z.boolean(),
    column_id: z.number(),
    column_url: z.string(),
    content_url: z.string().optional(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    id: z.number(),
    node_id: z.string(),
    note: z.string().nullable(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action50Schema = z.literal('converted');

export const webhookProjectCardCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_card: z.object({
    after_id: z.number().optional().nullable(),
    archived: z.boolean(),
    column_id: z.number(),
    column_url: z.string(),
    content_url: z.string().optional(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    id: z.number(),
    node_id: z.string(),
    note: z.string().nullable(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectCardDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_card: z.object({
    after_id: z.number().optional().nullable(),
    archived: z.boolean(),
    column_id: z.number().nullable(),
    column_url: z.string(),
    content_url: z.string().optional(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    id: z.number(),
    node_id: z.string(),
    note: z.string().nullable(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: nullableRepositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectCardEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    note: z.object({
      from: z.string().nullable(),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_card: z.object({
    after_id: z.number().optional().nullable(),
    archived: z.boolean(),
    column_id: z.number(),
    column_url: z.string(),
    content_url: z.string().optional(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    id: z.number(),
    node_id: z.string(),
    note: z.string().nullable(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectCardMovedSchema = z.object({
  action: z.literal('moved'),
  changes: z
    .object({
      column_id: z.object({
        from: z.number(),
      }),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_card: z
    .object({
      after_id: z.number().optional().nullable(),
      archived: z.boolean(),
      column_id: z.number(),
      column_url: z.string(),
      content_url: z.string().optional(),
      created_at: z.string(),
      creator: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
      id: z.number(),
      node_id: z.string(),
      note: z.string().nullable(),
      project_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .and(
      z.object({
        after_id: z.number().nullable(),
        archived: z.boolean().optional(),
        column_id: z.number().optional(),
        column_url: z.string().optional(),
        created_at: z.string().optional(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        id: z.number().optional(),
        node_id: z.string().optional(),
        note: z.string().optional().nullable(),
        project_url: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const action51Schema = z.literal('moved');

export const webhookProjectClosedSchema = z.object({
  action: z.literal('closed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project: z.object({
    body: z.string().nullable(),
    columns_url: z.string(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    number: z.number(),
    owner_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectColumnCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_column: z.object({
    after_id: z.number().optional().nullable(),
    cards_url: z.string(),
    created_at: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookProjectColumnDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_column: z.object({
    after_id: z.number().optional().nullable(),
    cards_url: z.string(),
    created_at: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: nullableRepositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookProjectColumnEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    name: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_column: z.object({
    after_id: z.number().optional().nullable(),
    cards_url: z.string(),
    created_at: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookProjectColumnMovedSchema = z.object({
  action: z.literal('moved'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project_column: z.object({
    after_id: z.number().optional().nullable(),
    cards_url: z.string(),
    created_at: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    project_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project: z.object({
    body: z.string().nullable(),
    columns_url: z.string(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    number: z.number(),
    owner_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookProjectDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project: z.object({
    body: z.string().nullable(),
    columns_url: z.string(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    number: z.number(),
    owner_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: nullableRepositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookProjectEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z
    .object({
      body: z
        .object({
          from: z.string(),
        })
        .optional(),
      name: z
        .object({
          from: z.string(),
        })
        .optional(),
    })
    .optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project: z.object({
    body: z.string().nullable(),
    columns_url: z.string(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    number: z.number(),
    owner_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema.optional(),
});

export const webhookProjectReopenedSchema = z.object({
  action: z.literal('reopened'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  project: z.object({
    body: z.string().nullable(),
    columns_url: z.string(),
    created_at: z.string(),
    creator: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    number: z.number(),
    owner_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    updated_at: z.string(),
    url: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const projectsV2ItemSchema = z.object({
  archived_at: z.string().nullable(),
  content_node_id: z.string(),
  content_type: projectsV2ItemContentTypeSchema,
  created_at: z.string(),
  creator: simpleUserSchema.optional(),
  id: z.number(),
  node_id: z.string().optional(),
  project_node_id: z.string().optional(),
  updated_at: z.string(),
});

export const action52Schema = z.literal('archived');

export const webhookProjectsV2ItemConvertedSchema = z.object({
  action: z.literal('converted'),
  changes: z.object({
    content_type: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional(),
      })
      .optional(),
  }),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ItemCreatedSchema = z.object({
  action: z.literal('created'),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ItemDeletedSchema = z.object({
  action: z.literal('deleted'),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ItemEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z
    .union([
      z.object({
        field_value: z.object({
          field_node_id: z.string().optional(),
          field_type: z.string().optional(),
        }),
      }),
      z.object({
        body: z.object({
          from: z.string().optional().nullable(),
          to: z.string().optional().nullable(),
        }),
      }),
    ])
    .optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ItemReorderedSchema = z.object({
  action: z.literal('reordered'),
  changes: z.object({
    previous_projects_v2_item_node_id: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
  }),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const action53Schema = z.literal('reordered');

export const webhookProjectsV2ItemRestoredSchema = z.object({
  action: z.literal('restored'),
  changes: z.object({
    archived_at: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
  }),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const action54Schema = z.literal('restored');

export const webhookProjectsV2ProjectClosedSchema = z.object({
  action: z.literal('closed'),
  organization: organizationSimpleSchema,
  projects_v2: projectsV2Schema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ProjectCreatedSchema = z.object({
  action: z.literal('created'),
  organization: organizationSimpleSchema,
  projects_v2: projectsV2Schema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ProjectEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    description: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
    public: z
      .object({
        from: z.boolean().optional(),
        to: z.boolean().optional(),
      })
      .optional(),
    short_description: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
    title: z
      .object({
        from: z.string().optional(),
        to: z.string().optional(),
      })
      .optional(),
  }),
  organization: organizationSimpleSchema,
  projects_v2: projectsV2Schema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ProjectReopenedSchema = z.object({
  action: z.literal('reopened'),
  organization: organizationSimpleSchema,
  projects_v2: projectsV2Schema,
  sender: simpleUserSchema,
});

export const webhookPublicSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestAssignedSchema = z.object({
  action: z.literal('assigned'),
  assignee: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
      url: z.string().optional(),
    })
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestAutoMergeDisabledSchema = z.object({
  action: z.literal('auto_merge_disabled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  reason: z.string(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action55Schema = z.literal('auto_merge_disabled');

export const webhookPullRequestAutoMergeEnabledSchema = z.object({
  action: z.literal('auto_merge_enabled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  reason: z.string().optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action56Schema = z.literal('auto_merge_enabled');

export const webhookPullRequestClosedSchema = z.object({
  action: z.literal('closed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z
    .object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string().nullable(),
        ref: z.string(),
        repo: z
          .object({
            allow_auto_merge: z.boolean().optional(),
            allow_forking: z.boolean().optional(),
            allow_merge_commit: z.boolean().optional(),
            allow_rebase_merge: z.boolean().optional(),
            allow_squash_merge: z.boolean().optional(),
            allow_update_branch: z.boolean().optional(),
            archive_url: z.string(),
            archived: z.boolean(),
            assignees_url: z.string(),
            blobs_url: z.string(),
            branches_url: z.string(),
            clone_url: z.string(),
            collaborators_url: z.string(),
            comments_url: z.string(),
            commits_url: z.string(),
            compare_url: z.string(),
            contents_url: z.string(),
            contributors_url: z.string(),
            created_at: z.union([z.number(), z.string()]),
            default_branch: z.string(),
            delete_branch_on_merge: z.boolean().optional(),
            deployments_url: z.string(),
            description: z.string().nullable(),
            disabled: z.boolean().optional(),
            downloads_url: z.string(),
            events_url: z.string(),
            fork: z.boolean(),
            forks: z.number(),
            forks_count: z.number(),
            forks_url: z.string(),
            full_name: z.string(),
            git_commits_url: z.string(),
            git_refs_url: z.string(),
            git_tags_url: z.string(),
            git_url: z.string(),
            has_downloads: z.boolean(),
            has_issues: z.boolean(),
            has_pages: z.boolean(),
            has_projects: z.boolean(),
            has_wiki: z.boolean(),
            homepage: z.string().nullable(),
            hooks_url: z.string(),
            html_url: z.string(),
            id: z.number(),
            is_template: z.boolean().optional(),
            issue_comment_url: z.string(),
            issue_events_url: z.string(),
            issues_url: z.string(),
            keys_url: z.string(),
            labels_url: z.string(),
            language: z.string().nullable(),
            languages_url: z.string(),
            license: z
              .object({
                key: z.string(),
                name: z.string(),
                node_id: z.string(),
                spdx_id: z.string(),
                url: z.string().nullable(),
              })
              .nullable(),
            master_branch: z.string().optional(),
            merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
            merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
            merges_url: z.string(),
            milestones_url: z.string(),
            mirror_url: z.string().nullable(),
            name: z.string(),
            node_id: z.string(),
            notifications_url: z.string(),
            open_issues: z.number(),
            open_issues_count: z.number(),
            organization: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                deleted: z.boolean().optional(),
                email: z.string().optional().nullable(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number(),
                login: z.string(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                url: z.string().optional(),
              })
              .nullable(),
            permissions: z
              .object({
                admin: z.boolean(),
                maintain: z.boolean().optional(),
                pull: z.boolean(),
                push: z.boolean(),
                triage: z.boolean().optional(),
              })
              .optional(),
            private: z.boolean(),
            public: z.boolean().optional(),
            pulls_url: z.string(),
            pushed_at: z.union([z.number(), z.string()]).nullable(),
            releases_url: z.string(),
            role_name: z.string().optional().nullable(),
            size: z.number(),
            squash_merge_commit_message: z
              .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
              .optional(),
            squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
            ssh_url: z.string(),
            stargazers: z.number().optional(),
            stargazers_count: z.number(),
            stargazers_url: z.string(),
            statuses_url: z.string(),
            subscribers_url: z.string(),
            subscription_url: z.string(),
            svn_url: z.string(),
            tags_url: z.string(),
            teams_url: z.string(),
            topics: z.array(z.string()),
            trees_url: z.string(),
            updated_at: z.string(),
            url: z.string(),
            use_squash_pr_title_as_default: z.boolean().optional(),
            visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
            watchers: z.number(),
            watchers_count: z.number(),
            web_commit_signoff_required: z.boolean().optional(),
          })
          .nullable(),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        _links: z
          .object({
            comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            commits: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            html: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            issue: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comment: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            self: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            statuses: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        active_lock_reason: z.string().optional().nullable(),
        additions: z.number().optional(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        auto_merge: z.record(z.unknown()).optional().nullable(),
        base: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        changed_files: z.number().optional(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        commits: z.number().optional(),
        commits_url: z.string().optional(),
        created_at: z.string().optional(),
        deletions: z.number().optional(),
        diff_url: z.string().optional(),
        draft: z.boolean().optional(),
        head: z
          .object({
            label: z.string().optional().nullable(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional()
                  .nullable(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional()
              .nullable(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional()
              .nullable(),
          })
          .optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        issue_url: z.string().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        locked: z.boolean().optional(),
        maintainer_can_modify: z.boolean().optional(),
        merge_commit_sha: z.string().optional().nullable(),
        mergeable: z.boolean().optional().nullable(),
        mergeable_state: z.string().optional(),
        merged: z.boolean(),
        merged_at: z.string().optional().nullable(),
        merged_by: z.record(z.unknown()).optional().nullable(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        patch_url: z.string().optional(),
        rebaseable: z.boolean().optional().nullable(),
        requested_reviewers: z.array(z.record(z.unknown()).nullable()).optional(),
        requested_teams: z.array(z.record(z.unknown()).nullable()).optional(),
        review_comment_url: z.string().optional(),
        review_comments: z.number().optional(),
        review_comments_url: z.string().optional(),
        state: z.union([z.literal('closed'), z.literal('open')]),
        statuses_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestConvertedToDraftSchema = z.object({
  action: z.literal('converted_to_draft'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z
    .object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z
          .object({
            allow_auto_merge: z.boolean().optional(),
            allow_forking: z.boolean().optional(),
            allow_merge_commit: z.boolean().optional(),
            allow_rebase_merge: z.boolean().optional(),
            allow_squash_merge: z.boolean().optional(),
            allow_update_branch: z.boolean().optional(),
            archive_url: z.string(),
            archived: z.boolean(),
            assignees_url: z.string(),
            blobs_url: z.string(),
            branches_url: z.string(),
            clone_url: z.string(),
            collaborators_url: z.string(),
            comments_url: z.string(),
            commits_url: z.string(),
            compare_url: z.string(),
            contents_url: z.string(),
            contributors_url: z.string(),
            created_at: z.union([z.number(), z.string()]),
            default_branch: z.string(),
            delete_branch_on_merge: z.boolean().optional(),
            deployments_url: z.string(),
            description: z.string().nullable(),
            disabled: z.boolean().optional(),
            downloads_url: z.string(),
            events_url: z.string(),
            fork: z.boolean(),
            forks: z.number(),
            forks_count: z.number(),
            forks_url: z.string(),
            full_name: z.string(),
            git_commits_url: z.string(),
            git_refs_url: z.string(),
            git_tags_url: z.string(),
            git_url: z.string(),
            has_downloads: z.boolean(),
            has_issues: z.boolean(),
            has_pages: z.boolean(),
            has_projects: z.boolean(),
            has_wiki: z.boolean(),
            homepage: z.string().nullable(),
            hooks_url: z.string(),
            html_url: z.string(),
            id: z.number(),
            is_template: z.boolean().optional(),
            issue_comment_url: z.string(),
            issue_events_url: z.string(),
            issues_url: z.string(),
            keys_url: z.string(),
            labels_url: z.string(),
            language: z.string().nullable(),
            languages_url: z.string(),
            license: z
              .object({
                key: z.string(),
                name: z.string(),
                node_id: z.string(),
                spdx_id: z.string(),
                url: z.string().nullable(),
              })
              .nullable(),
            master_branch: z.string().optional(),
            merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
            merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
            merges_url: z.string(),
            milestones_url: z.string(),
            mirror_url: z.string().nullable(),
            name: z.string(),
            node_id: z.string(),
            notifications_url: z.string(),
            open_issues: z.number(),
            open_issues_count: z.number(),
            organization: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                deleted: z.boolean().optional(),
                email: z.string().optional().nullable(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number(),
                login: z.string(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
                url: z.string().optional(),
              })
              .nullable(),
            permissions: z
              .object({
                admin: z.boolean(),
                maintain: z.boolean().optional(),
                pull: z.boolean(),
                push: z.boolean(),
                triage: z.boolean().optional(),
              })
              .optional(),
            private: z.boolean(),
            public: z.boolean().optional(),
            pulls_url: z.string(),
            pushed_at: z.union([z.number(), z.string()]).nullable(),
            releases_url: z.string(),
            role_name: z.string().optional().nullable(),
            size: z.number(),
            squash_merge_commit_message: z
              .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
              .optional(),
            squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
            ssh_url: z.string(),
            stargazers: z.number().optional(),
            stargazers_count: z.number(),
            stargazers_url: z.string(),
            statuses_url: z.string(),
            subscribers_url: z.string(),
            subscription_url: z.string(),
            svn_url: z.string(),
            tags_url: z.string(),
            teams_url: z.string(),
            topics: z.array(z.string()),
            trees_url: z.string(),
            updated_at: z.string(),
            url: z.string(),
            use_squash_pr_title_as_default: z.boolean().optional(),
            visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
            watchers: z.number(),
            watchers_count: z.number(),
            web_commit_signoff_required: z.boolean().optional(),
          })
          .nullable(),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().optional().nullable(),
              html_url: z.string().optional(),
              id: z.number(),
              members_url: z.string().optional(),
              name: z.string(),
              node_id: z.string().optional(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string().optional(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
              repositories_url: z.string().optional(),
              slug: z.string().optional(),
              url: z.string().optional(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        _links: z
          .object({
            comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            commits: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            html: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            issue: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comment: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            self: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            statuses: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        active_lock_reason: z.string().optional().nullable(),
        additions: z.number().optional(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        auto_merge: z.record(z.unknown()).optional().nullable(),
        base: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.unknown().optional(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        changed_files: z.number().optional(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        commits: z.number().optional(),
        commits_url: z.string().optional(),
        created_at: z.string().optional(),
        deletions: z.number().optional(),
        diff_url: z.string().optional(),
        draft: z.boolean(),
        head: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.unknown().optional(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional()
              .nullable(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        issue_url: z.string().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        locked: z.boolean().optional(),
        maintainer_can_modify: z.boolean().optional(),
        merge_commit_sha: z.string().optional().nullable(),
        mergeable: z.boolean().optional().nullable(),
        mergeable_state: z.string().optional(),
        merged: z.boolean(),
        merged_at: z.unknown(),
        merged_by: z.unknown(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        patch_url: z.string().optional(),
        rebaseable: z.boolean().optional().nullable(),
        requested_reviewers: z.array(z.record(z.unknown()).nullable()).optional(),
        requested_teams: z.array(z.record(z.unknown()).nullable()).optional(),
        review_comment_url: z.string().optional(),
        review_comments: z.number().optional(),
        review_comments_url: z.string().optional(),
        state: z.string().optional(),
        statuses_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action57Schema = z.literal('converted_to_draft');

export const webhookPullRequestDemilestonedSchema = z.object({
  action: z.literal('demilestoned'),
  enterprise: enterpriseSchema.optional(),
  milestone: milestoneSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookPullRequestDequeuedSchema = z.object({
  action: z.literal('dequeued'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  reason: z.string(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action58Schema = z.literal('dequeued');

export const webhookPullRequestEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    base: z
      .object({
        ref: z.object({
          from: z.string(),
        }),
        sha: z.object({
          from: z.string(),
        }),
      })
      .optional(),
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
    title: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookPullRequestEnqueuedSchema = z.object({
  action: z.literal('enqueued'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action59Schema = z.literal('enqueued');

export const webhookPullRequestLabeledSchema = z.object({
  action: z.literal('labeled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z
    .object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    })
    .optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestLockedSchema = z.object({
  action: z.literal('locked'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestMilestonedSchema = z.object({
  action: z.literal('milestoned'),
  enterprise: enterpriseSchema.optional(),
  milestone: milestoneSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookPullRequestOpenedSchema = z.object({
  action: z.literal('opened'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z
    .object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().optional().nullable(),
              html_url: z.string().optional(),
              id: z.number(),
              members_url: z.string().optional(),
              name: z.string(),
              node_id: z.string().optional(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string().optional(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
              repositories_url: z.string().optional(),
              slug: z.string().optional(),
              url: z.string().optional(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        _links: z
          .object({
            comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            commits: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            html: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            issue: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comment: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            self: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            statuses: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        active_lock_reason: z.string().nullable(),
        additions: z.number().optional(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        auto_merge: z.record(z.unknown()).optional().nullable(),
        base: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        changed_files: z.number().optional(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        commits: z.number().optional(),
        commits_url: z.string().optional(),
        created_at: z.string().optional(),
        deletions: z.number().optional(),
        diff_url: z.string().optional(),
        draft: z.boolean().optional(),
        head: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        issue_url: z.string().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        locked: z.boolean().optional(),
        maintainer_can_modify: z.boolean().optional(),
        merge_commit_sha: z.string().nullable(),
        mergeable: z.boolean().optional().nullable(),
        mergeable_state: z.string().optional(),
        merged: z.boolean().optional(),
        merged_at: z.string().nullable(),
        merged_by: z.record(z.unknown()).nullable(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        patch_url: z.string().optional(),
        rebaseable: z.boolean().optional().nullable(),
        requested_reviewers: z.array(z.record(z.unknown()).nullable()).optional(),
        requested_teams: z.array(z.record(z.unknown()).nullable()).optional(),
        review_comment_url: z.string().optional(),
        review_comments: z.number().optional(),
        review_comments_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        statuses_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestReadyForReviewSchema = z.object({
  action: z.literal('ready_for_review'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z
    .object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().optional().nullable(),
              html_url: z.string().optional(),
              id: z.number(),
              members_url: z.string().optional(),
              name: z.string(),
              node_id: z.string().optional(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string().optional(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
              repositories_url: z.string().optional(),
              slug: z.string().optional(),
              url: z.string().optional(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        _links: z
          .object({
            comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            commits: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            html: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            issue: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comment: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            self: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            statuses: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        active_lock_reason: z.string().optional().nullable(),
        additions: z.number().optional(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        auto_merge: z.record(z.unknown()).optional().nullable(),
        base: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        changed_files: z.number().optional(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        commits: z.number().optional(),
        commits_url: z.string().optional(),
        created_at: z.string().optional(),
        deletions: z.number().optional(),
        diff_url: z.string().optional(),
        draft: z.boolean(),
        head: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.string().optional().nullable(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        issue_url: z.string().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        locked: z.boolean().optional(),
        maintainer_can_modify: z.boolean().optional(),
        merge_commit_sha: z.string().optional().nullable(),
        mergeable: z.boolean().optional().nullable(),
        mergeable_state: z.string().optional(),
        merged: z.boolean(),
        merged_at: z.string().nullable(),
        merged_by: z.record(z.unknown()).nullable(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        patch_url: z.string().optional(),
        rebaseable: z.boolean().optional().nullable(),
        requested_reviewers: z.array(z.record(z.unknown()).nullable()).optional(),
        requested_teams: z.array(z.record(z.unknown()).nullable()).optional(),
        review_comment_url: z.string().optional(),
        review_comments: z.number().optional(),
        review_comments_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        statuses_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action60Schema = z.literal('ready_for_review');

export const webhookPullRequestReopenedSchema = z.object({
  action: z.literal('reopened'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z
    .object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    })
    .and(
      z.object({
        _links: z
          .object({
            comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            commits: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            html: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            issue: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comment: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            review_comments: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            self: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
            statuses: z
              .object({
                href: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        active_lock_reason: z.string().optional().nullable(),
        additions: z.number().optional(),
        assignee: z.record(z.unknown()).optional().nullable(),
        assignees: z.array(z.record(z.unknown()).nullable()).optional(),
        author_association: z.string().optional(),
        auto_merge: z.unknown().optional(),
        base: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.unknown().optional(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        changed_files: z.number().optional(),
        closed_at: z.string().nullable(),
        comments: z.number().optional(),
        comments_url: z.string().optional(),
        commits: z.number().optional(),
        commits_url: z.string().optional(),
        created_at: z.string().optional(),
        deletions: z.number().optional(),
        diff_url: z.string().optional(),
        draft: z.boolean().optional(),
        head: z
          .object({
            label: z.string().optional(),
            ref: z.string().optional(),
            repo: z
              .object({
                allow_auto_merge: z.boolean().optional(),
                allow_forking: z.boolean().optional(),
                allow_merge_commit: z.boolean().optional(),
                allow_rebase_merge: z.boolean().optional(),
                allow_squash_merge: z.boolean().optional(),
                allow_update_branch: z.boolean().optional(),
                archive_url: z.string().optional(),
                archived: z.boolean().optional(),
                assignees_url: z.string().optional(),
                blobs_url: z.string().optional(),
                branches_url: z.string().optional(),
                clone_url: z.string().optional(),
                collaborators_url: z.string().optional(),
                comments_url: z.string().optional(),
                commits_url: z.string().optional(),
                compare_url: z.string().optional(),
                contents_url: z.string().optional(),
                contributors_url: z.string().optional(),
                created_at: z.string().optional(),
                default_branch: z.string().optional(),
                delete_branch_on_merge: z.boolean().optional(),
                deployments_url: z.string().optional(),
                description: z.string().optional().nullable(),
                disabled: z.boolean().optional(),
                downloads_url: z.string().optional(),
                events_url: z.string().optional(),
                fork: z.boolean().optional(),
                forks: z.number().optional(),
                forks_count: z.number().optional(),
                forks_url: z.string().optional(),
                full_name: z.string().optional(),
                git_commits_url: z.string().optional(),
                git_refs_url: z.string().optional(),
                git_tags_url: z.string().optional(),
                git_url: z.string().optional(),
                has_downloads: z.boolean().optional(),
                has_issues: z.boolean().optional(),
                has_pages: z.boolean().optional(),
                has_projects: z.boolean().optional(),
                has_wiki: z.boolean().optional(),
                homepage: z.string().optional().nullable(),
                hooks_url: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                is_template: z.boolean().optional(),
                issue_comment_url: z.string().optional(),
                issue_events_url: z.string().optional(),
                issues_url: z.string().optional(),
                keys_url: z.string().optional(),
                labels_url: z.string().optional(),
                language: z.string().optional().nullable(),
                languages_url: z.string().optional(),
                license: z.record(z.unknown()).optional().nullable(),
                merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
                  .optional(),
                merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
                merges_url: z.string().optional(),
                milestones_url: z.string().optional(),
                mirror_url: z.unknown().optional(),
                name: z.string().optional(),
                node_id: z.string().optional(),
                notifications_url: z.string().optional(),
                open_issues: z.number().optional(),
                open_issues_count: z.number().optional(),
                owner: z
                  .object({
                    avatar_url: z.string().optional(),
                    events_url: z.string().optional(),
                    followers_url: z.string().optional(),
                    following_url: z.string().optional(),
                    gists_url: z.string().optional(),
                    gravatar_id: z.string().optional(),
                    html_url: z.string().optional(),
                    id: z.number().optional(),
                    login: z.string().optional(),
                    node_id: z.string().optional(),
                    organizations_url: z.string().optional(),
                    received_events_url: z.string().optional(),
                    repos_url: z.string().optional(),
                    site_admin: z.boolean().optional(),
                    starred_url: z.string().optional(),
                    subscriptions_url: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  })
                  .optional(),
                private: z.boolean().optional(),
                pulls_url: z.string().optional(),
                pushed_at: z.string().optional(),
                releases_url: z.string().optional(),
                size: z.number().optional(),
                squash_merge_commit_message: z
                  .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
                  .optional(),
                squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
                ssh_url: z.string().optional(),
                stargazers_count: z.number().optional(),
                stargazers_url: z.string().optional(),
                statuses_url: z.string().optional(),
                subscribers_url: z.string().optional(),
                subscription_url: z.string().optional(),
                svn_url: z.string().optional(),
                tags_url: z.string().optional(),
                teams_url: z.string().optional(),
                topics: z.array(z.string().nullable()).optional(),
                trees_url: z.string().optional(),
                updated_at: z.string().optional(),
                url: z.string().optional(),
                use_squash_pr_title_as_default: z.boolean().optional(),
                visibility: z.string().optional(),
                watchers: z.number().optional(),
                watchers_count: z.number().optional(),
                web_commit_signoff_required: z.boolean().optional(),
              })
              .optional(),
            sha: z.string().optional(),
            user: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        issue_url: z.string().optional(),
        labels: z.array(z.record(z.unknown()).nullable()).optional(),
        locked: z.boolean().optional(),
        maintainer_can_modify: z.boolean().optional(),
        merge_commit_sha: z.string().optional().nullable(),
        mergeable: z.boolean().optional().nullable(),
        mergeable_state: z.string().optional(),
        merged: z.boolean(),
        merged_at: z.string().nullable(),
        merged_by: z.record(z.unknown()).nullable(),
        milestone: z.record(z.unknown()).optional().nullable(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        patch_url: z.string().optional(),
        rebaseable: z.boolean().optional().nullable(),
        requested_reviewers: z.array(z.record(z.unknown()).nullable()).optional(),
        requested_teams: z.array(z.record(z.unknown()).nullable()).optional(),
        review_comment_url: z.string().optional(),
        review_comments: z.number().optional(),
        review_comments_url: z.string().optional(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        statuses_url: z.string().optional(),
        title: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewCommentCreatedSchema = z.object({
  action: z.literal('created'),
  comment: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    commit_id: z.string(),
    created_at: z.string(),
    diff_hunk: z.string(),
    html_url: z.string(),
    id: z.number(),
    in_reply_to_id: z.number().optional(),
    line: z.number().nullable(),
    node_id: z.string(),
    original_commit_id: z.string(),
    original_line: z.number().nullable(),
    original_position: z.number(),
    original_start_line: z.number().nullable(),
    path: z.string(),
    position: z.number().nullable(),
    pull_request_review_id: z.number().nullable(),
    pull_request_url: z.string(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    side: z.union([z.literal('LEFT'), z.literal('RIGHT')]),
    start_line: z.number().nullable(),
    start_side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).nullable(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .optional()
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean().optional(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean().optional(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewCommentDeletedSchema = z.object({
  action: z.literal('deleted'),
  comment: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    commit_id: z.string(),
    created_at: z.string(),
    diff_hunk: z.string(),
    html_url: z.string(),
    id: z.number(),
    in_reply_to_id: z.number().optional(),
    line: z.number().nullable(),
    node_id: z.string(),
    original_commit_id: z.string(),
    original_line: z.number(),
    original_position: z.number(),
    original_start_line: z.number().nullable(),
    path: z.string(),
    position: z.number().nullable(),
    pull_request_review_id: z.number().nullable(),
    pull_request_url: z.string(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    side: z.union([z.literal('LEFT'), z.literal('RIGHT')]),
    start_line: z.number().nullable(),
    start_side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).nullable(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .optional()
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean().optional(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewCommentEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  comment: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string(),
    commit_id: z.string(),
    created_at: z.string(),
    diff_hunk: z.string(),
    html_url: z.string(),
    id: z.number(),
    in_reply_to_id: z.number().optional(),
    line: z.number().nullable(),
    node_id: z.string(),
    original_commit_id: z.string(),
    original_line: z.number(),
    original_position: z.number(),
    original_start_line: z.number().nullable(),
    path: z.string(),
    position: z.number().nullable(),
    pull_request_review_id: z.number().nullable(),
    pull_request_url: z.string(),
    reactions: z.object({
      '+1': z.number(),
      '-1': z.number(),
      confused: z.number(),
      eyes: z.number(),
      heart: z.number(),
      hooray: z.number(),
      laugh: z.number(),
      rocket: z.number(),
      total_count: z.number(),
      url: z.string(),
    }),
    side: z.union([z.literal('LEFT'), z.literal('RIGHT')]),
    start_line: z.number().nullable(),
    start_side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).nullable(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .optional()
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean().optional(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewDismissedSchema = z.object({
  action: z.literal('dismissed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  review: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    commit_id: z.string(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    pull_request_url: z.string(),
    state: z.union([z.literal('dismissed'), z.literal('approved'), z.literal('changes_requested')]),
    submitted_at: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  review: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    commit_id: z.string(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    pull_request_url: z.string(),
    state: z.string(),
    submitted_at: z.string().nullable(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  sender: simpleUserSchema,
});

export const webhookPullRequestReviewRequestRemovedSchema = z.union([
  z.object({
    action: z.literal('review_request_removed'),
    enterprise: enterpriseSchema.optional(),
    installation: simpleInstallationSchema.optional(),
    number: z.number(),
    organization: organizationSimpleSchema.optional(),
    pull_request: z.object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          members_url: z.string(),
          name: z.string(),
          node_id: z.string(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
          repositories_url: z.string(),
          slug: z.string(),
          url: z.string(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    repository: repositorySchema,
    requested_reviewer: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sender: simpleUserSchema,
  }),
  z.object({
    action: z.literal('review_request_removed'),
    enterprise: enterpriseSchema.optional(),
    installation: simpleInstallationSchema.optional(),
    number: z.number(),
    organization: organizationSimpleSchema.optional(),
    pull_request: z.object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          members_url: z.string(),
          name: z.string(),
          node_id: z.string(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
          repositories_url: z.string(),
          slug: z.string(),
          url: z.string(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    repository: repositorySchema,
    requested_team: z.object({
      deleted: z.boolean().optional(),
      description: z.string().nullable(),
      html_url: z.string(),
      id: z.number(),
      members_url: z.string(),
      name: z.string(),
      node_id: z.string(),
      parent: z
        .object({
          description: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          members_url: z.string(),
          name: z.string(),
          node_id: z.string(),
          permission: z.string(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
          repositories_url: z.string(),
          slug: z.string(),
          url: z.string(),
        })
        .optional()
        .nullable(),
      permission: z.string(),
      privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
      repositories_url: z.string(),
      slug: z.string(),
      url: z.string(),
    }),
    sender: simpleUserSchema,
  }),
]);

export const action61Schema = z.literal('review_request_removed');

export const webhookPullRequestReviewRequestedSchema = z.union([
  z.object({
    action: z.literal('review_requested'),
    enterprise: enterpriseSchema.optional(),
    installation: simpleInstallationSchema.optional(),
    number: z.number(),
    organization: organizationSimpleSchema.optional(),
    pull_request: z.object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    repository: repositorySchema,
    requested_reviewer: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sender: simpleUserSchema,
  }),
  z.object({
    action: z.literal('review_requested'),
    enterprise: enterpriseSchema.optional(),
    installation: simpleInstallationSchema.optional(),
    number: z.number(),
    organization: organizationSimpleSchema.optional(),
    pull_request: z.object({
      _links: z.object({
        comments: z.object({
          href: z.string(),
        }),
        commits: z.object({
          href: z.string(),
        }),
        html: z.object({
          href: z.string(),
        }),
        issue: z.object({
          href: z.string(),
        }),
        review_comment: z.object({
          href: z.string(),
        }),
        review_comments: z.object({
          href: z.string(),
        }),
        self: z.object({
          href: z.string(),
        }),
        statuses: z.object({
          href: z.string(),
        }),
      }),
      active_lock_reason: z
        .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
        .nullable(),
      additions: z.number().optional(),
      assignee: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
      assignees: z.array(
        z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      ),
      author_association: z.union([
        z.literal('COLLABORATOR'),
        z.literal('CONTRIBUTOR'),
        z.literal('FIRST_TIMER'),
        z.literal('FIRST_TIME_CONTRIBUTOR'),
        z.literal('MANNEQUIN'),
        z.literal('MEMBER'),
        z.literal('NONE'),
        z.literal('OWNER'),
      ]),
      auto_merge: z
        .object({
          commit_message: z.string().nullable(),
          commit_title: z.string().nullable(),
          enabled_by: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
        })
        .nullable(),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      body: z.string().nullable(),
      changed_files: z.number().optional(),
      closed_at: z.string().nullable(),
      comments: z.number().optional(),
      comments_url: z.string(),
      commits: z.number().optional(),
      commits_url: z.string(),
      created_at: z.string(),
      deletions: z.number().optional(),
      diff_url: z.string(),
      draft: z.boolean(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        repo: z.object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        }),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
      html_url: z.string(),
      id: z.number(),
      issue_url: z.string(),
      labels: z.array(
        z.object({
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
          id: z.number(),
          name: z.string(),
          node_id: z.string(),
          url: z.string(),
        }),
      ),
      locked: z.boolean(),
      maintainer_can_modify: z.boolean().optional(),
      merge_commit_sha: z.string().nullable(),
      mergeable: z.boolean().optional().nullable(),
      mergeable_state: z.string().optional(),
      merged: z.boolean().optional().nullable(),
      merged_at: z.string().nullable(),
      merged_by: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      milestone: z
        .object({
          closed_at: z.string().nullable(),
          closed_issues: z.number(),
          created_at: z.string(),
          creator: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z
                .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
                .optional(),
              url: z.string().optional(),
            })
            .nullable(),
          description: z.string().nullable(),
          due_on: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          labels_url: z.string(),
          node_id: z.string(),
          number: z.number(),
          open_issues: z.number(),
          state: z.union([z.literal('open'), z.literal('closed')]),
          title: z.string(),
          updated_at: z.string(),
          url: z.string(),
        })
        .nullable(),
      node_id: z.string(),
      number: z.number(),
      patch_url: z.string(),
      rebaseable: z.boolean().optional().nullable(),
      requested_reviewers: z.array(
        z
          .union([
            z.object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            }),
            z.object({
              deleted: z.boolean().optional(),
              description: z.string().optional().nullable(),
              html_url: z.string().optional(),
              id: z.number(),
              members_url: z.string().optional(),
              name: z.string(),
              node_id: z.string().optional(),
              parent: z
                .object({
                  description: z.string().nullable(),
                  html_url: z.string(),
                  id: z.number(),
                  members_url: z.string(),
                  name: z.string(),
                  node_id: z.string(),
                  permission: z.string(),
                  privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                  repositories_url: z.string(),
                  slug: z.string(),
                  url: z.string(),
                })
                .optional()
                .nullable(),
              permission: z.string().optional(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
              repositories_url: z.string().optional(),
              slug: z.string().optional(),
              url: z.string().optional(),
            }),
          ])
          .nullable(),
      ),
      requested_teams: z.array(
        z.object({
          deleted: z.boolean().optional(),
          description: z.string().optional().nullable(),
          html_url: z.string().optional(),
          id: z.number(),
          members_url: z.string().optional(),
          name: z.string(),
          node_id: z.string().optional(),
          parent: z
            .object({
              description: z.string().nullable(),
              html_url: z.string(),
              id: z.number(),
              members_url: z.string(),
              name: z.string(),
              node_id: z.string(),
              permission: z.string(),
              privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
              repositories_url: z.string(),
              slug: z.string(),
              url: z.string(),
            })
            .optional()
            .nullable(),
          permission: z.string().optional(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
          repositories_url: z.string().optional(),
          slug: z.string().optional(),
          url: z.string().optional(),
        }),
      ),
      review_comment_url: z.string(),
      review_comments: z.number().optional(),
      review_comments_url: z.string(),
      state: z.union([z.literal('open'), z.literal('closed')]),
      statuses_url: z.string(),
      title: z.string(),
      updated_at: z.string(),
      url: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    repository: repositorySchema,
    requested_team: z.object({
      deleted: z.boolean().optional(),
      description: z.string().optional().nullable(),
      html_url: z.string().optional(),
      id: z.number(),
      members_url: z.string().optional(),
      name: z.string(),
      node_id: z.string().optional(),
      parent: z
        .object({
          description: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          members_url: z.string(),
          name: z.string(),
          node_id: z.string(),
          permission: z.string(),
          privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
          repositories_url: z.string(),
          slug: z.string(),
          url: z.string(),
        })
        .optional()
        .nullable(),
      permission: z.string().optional(),
      privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
      repositories_url: z.string().optional(),
      slug: z.string().optional(),
      url: z.string().optional(),
    }),
    sender: simpleUserSchema,
  }),
]);

export const action62Schema = z.literal('review_requested');

export const webhookPullRequestReviewSubmittedSchema = z.object({
  action: z.literal('submitted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  review: z.object({
    _links: z.object({
      html: z.object({
        href: z.string(),
      }),
      pull_request: z.object({
        href: z.string(),
      }),
    }),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    body: z.string().nullable(),
    commit_id: z.string(),
    html_url: z.string(),
    id: z.number(),
    node_id: z.string(),
    pull_request_url: z.string(),
    state: z.string(),
    submitted_at: z.string().nullable(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  sender: simpleUserSchema,
});

export const action63Schema = z.literal('submitted');

export const webhookPullRequestReviewThreadResolvedSchema = z.object({
  action: z.literal('resolved'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
  thread: z.object({
    comments: z.array(
      z.object({
        _links: z.object({
          html: z.object({
            href: z.string(),
          }),
          pull_request: z.object({
            href: z.string(),
          }),
          self: z.object({
            href: z.string(),
          }),
        }),
        author_association: z.union([
          z.literal('COLLABORATOR'),
          z.literal('CONTRIBUTOR'),
          z.literal('FIRST_TIMER'),
          z.literal('FIRST_TIME_CONTRIBUTOR'),
          z.literal('MANNEQUIN'),
          z.literal('MEMBER'),
          z.literal('NONE'),
          z.literal('OWNER'),
        ]),
        body: z.string(),
        commit_id: z.string(),
        created_at: z.string(),
        diff_hunk: z.string(),
        html_url: z.string(),
        id: z.number(),
        in_reply_to_id: z.number().optional(),
        line: z.number().nullable(),
        node_id: z.string(),
        original_commit_id: z.string(),
        original_line: z.number().nullable(),
        original_position: z.number(),
        original_start_line: z.number().nullable(),
        path: z.string(),
        position: z.number().nullable(),
        pull_request_review_id: z.number().nullable(),
        pull_request_url: z.string(),
        reactions: z.object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        }),
        side: z.union([z.literal('LEFT'), z.literal('RIGHT')]),
        start_line: z.number().nullable(),
        start_side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).nullable(),
        updated_at: z.string(),
        url: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
    ),
    node_id: z.string(),
  }),
});

export const action64Schema = z.literal('resolved');

export const webhookPullRequestReviewThreadUnresolvedSchema = z.object({
  action: z.literal('unresolved'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    closed_at: z.string().nullable(),
    comments_url: z.string(),
    commits_url: z.string(),
    created_at: z.string(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    merge_commit_sha: z.string().nullable(),
    merged_at: z.string().nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
  thread: z.object({
    comments: z.array(
      z.object({
        _links: z.object({
          html: z.object({
            href: z.string(),
          }),
          pull_request: z.object({
            href: z.string(),
          }),
          self: z.object({
            href: z.string(),
          }),
        }),
        author_association: z.union([
          z.literal('COLLABORATOR'),
          z.literal('CONTRIBUTOR'),
          z.literal('FIRST_TIMER'),
          z.literal('FIRST_TIME_CONTRIBUTOR'),
          z.literal('MANNEQUIN'),
          z.literal('MEMBER'),
          z.literal('NONE'),
          z.literal('OWNER'),
        ]),
        body: z.string(),
        commit_id: z.string(),
        created_at: z.string(),
        diff_hunk: z.string(),
        html_url: z.string(),
        id: z.number(),
        in_reply_to_id: z.number().optional(),
        line: z.number().nullable(),
        node_id: z.string(),
        original_commit_id: z.string(),
        original_line: z.number(),
        original_position: z.number(),
        original_start_line: z.number().nullable(),
        path: z.string(),
        position: z.number().nullable(),
        pull_request_review_id: z.number().nullable(),
        pull_request_url: z.string(),
        reactions: z.object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        }),
        side: z.union([z.literal('LEFT'), z.literal('RIGHT')]),
        start_line: z.number().nullable(),
        start_side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).nullable(),
        updated_at: z.string(),
        url: z.string(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
      }),
    ),
    node_id: z.string(),
  }),
});

export const action65Schema = z.literal('unresolved');

export const webhookPullRequestSynchronizeSchema = z.object({
  action: z.literal('synchronize'),
  after: z.string(),
  before: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action66Schema = z.literal('synchronize');

export const webhookPullRequestUnassignedSchema = z.object({
  action: z.literal('unassigned'),
  assignee: z
    .object({
      avatar_url: z.string().optional(),
      deleted: z.boolean().optional(),
      email: z.string().optional().nullable(),
      events_url: z.string().optional(),
      followers_url: z.string().optional(),
      following_url: z.string().optional(),
      gists_url: z.string().optional(),
      gravatar_id: z.string().optional(),
      html_url: z.string().optional(),
      id: z.number(),
      login: z.string(),
      name: z.string().optional(),
      node_id: z.string().optional(),
      organizations_url: z.string().optional(),
      received_events_url: z.string().optional(),
      repos_url: z.string().optional(),
      site_admin: z.boolean().optional(),
      starred_url: z.string().optional(),
      subscriptions_url: z.string().optional(),
      type: z
        .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
        .optional(),
      url: z.string().optional(),
    })
    .optional()
    .nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookPullRequestUnlabeledSchema = z.object({
  action: z.literal('unlabeled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  label: z
    .object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    })
    .optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z
            .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
            .optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string().nullable(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string().nullable(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z
              .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
              .optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z
          .union([z.literal('Bot'), z.literal('User'), z.literal('Organization'), z.literal('Mannequin')])
          .optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPullRequestUnlockedSchema = z.object({
  action: z.literal('unlocked'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  number: z.number(),
  organization: organizationSimpleSchema.optional(),
  pull_request: z.object({
    _links: z.object({
      comments: z.object({
        href: z.string(),
      }),
      commits: z.object({
        href: z.string(),
      }),
      html: z.object({
        href: z.string(),
      }),
      issue: z.object({
        href: z.string(),
      }),
      review_comment: z.object({
        href: z.string(),
      }),
      review_comments: z.object({
        href: z.string(),
      }),
      self: z.object({
        href: z.string(),
      }),
      statuses: z.object({
        href: z.string(),
      }),
    }),
    active_lock_reason: z
      .union([z.literal('resolved'), z.literal('off-topic'), z.literal('too heated'), z.literal('spam')])
      .nullable(),
    additions: z.number().optional(),
    assignee: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    assignees: z.array(
      z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    ),
    author_association: z.union([
      z.literal('COLLABORATOR'),
      z.literal('CONTRIBUTOR'),
      z.literal('FIRST_TIMER'),
      z.literal('FIRST_TIME_CONTRIBUTOR'),
      z.literal('MANNEQUIN'),
      z.literal('MEMBER'),
      z.literal('NONE'),
      z.literal('OWNER'),
    ]),
    auto_merge: z
      .object({
        commit_message: z.string().nullable(),
        commit_title: z.string(),
        enabled_by: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]),
      })
      .nullable(),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z.object({
        allow_auto_merge: z.boolean().optional(),
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        allow_update_branch: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.union([z.number(), z.string()]),
        default_branch: z.string(),
        delete_branch_on_merge: z.boolean().optional(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean().optional(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
        merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        organization: z.string().optional(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        public: z.boolean().optional(),
        pulls_url: z.string(),
        pushed_at: z.union([z.number(), z.string()]).nullable(),
        releases_url: z.string(),
        role_name: z.string().optional().nullable(),
        size: z.number(),
        squash_merge_commit_message: z
          .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
          .optional(),
        squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
        ssh_url: z.string(),
        stargazers: z.number().optional(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        topics: z.array(z.string()),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        use_squash_pr_title_as_default: z.boolean().optional(),
        visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      }),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    body: z.string().nullable(),
    changed_files: z.number().optional(),
    closed_at: z.string().nullable(),
    comments: z.number().optional(),
    comments_url: z.string(),
    commits: z.number().optional(),
    commits_url: z.string(),
    created_at: z.string(),
    deletions: z.number().optional(),
    diff_url: z.string(),
    draft: z.boolean(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      repo: z
        .object({
          allow_auto_merge: z.boolean().optional(),
          allow_forking: z.boolean().optional(),
          allow_merge_commit: z.boolean().optional(),
          allow_rebase_merge: z.boolean().optional(),
          allow_squash_merge: z.boolean().optional(),
          allow_update_branch: z.boolean().optional(),
          archive_url: z.string(),
          archived: z.boolean(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          clone_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          created_at: z.union([z.number(), z.string()]),
          default_branch: z.string(),
          delete_branch_on_merge: z.boolean().optional(),
          deployments_url: z.string(),
          description: z.string().nullable(),
          disabled: z.boolean().optional(),
          downloads_url: z.string(),
          events_url: z.string(),
          fork: z.boolean(),
          forks: z.number(),
          forks_count: z.number(),
          forks_url: z.string(),
          full_name: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          has_discussions: z.boolean(),
          has_downloads: z.boolean(),
          has_issues: z.boolean(),
          has_pages: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          homepage: z.string().nullable(),
          hooks_url: z.string(),
          html_url: z.string(),
          id: z.number(),
          is_template: z.boolean().optional(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          language: z.string().nullable(),
          languages_url: z.string(),
          license: z
            .object({
              key: z.string(),
              name: z.string(),
              node_id: z.string(),
              spdx_id: z.string(),
              url: z.string().nullable(),
            })
            .nullable(),
          master_branch: z.string().optional(),
          merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
          merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
          merges_url: z.string(),
          milestones_url: z.string(),
          mirror_url: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          notifications_url: z.string(),
          open_issues: z.number(),
          open_issues_count: z.number(),
          organization: z.string().optional(),
          owner: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .nullable(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean().optional(),
              pull: z.boolean(),
              push: z.boolean(),
              triage: z.boolean().optional(),
            })
            .optional(),
          private: z.boolean(),
          public: z.boolean().optional(),
          pulls_url: z.string(),
          pushed_at: z.union([z.number(), z.string()]).nullable(),
          releases_url: z.string(),
          role_name: z.string().optional().nullable(),
          size: z.number(),
          squash_merge_commit_message: z
            .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
            .optional(),
          squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
          ssh_url: z.string(),
          stargazers: z.number().optional(),
          stargazers_count: z.number(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          svn_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          topics: z.array(z.string()),
          trees_url: z.string(),
          updated_at: z.string(),
          url: z.string(),
          use_squash_pr_title_as_default: z.boolean().optional(),
          visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
          watchers: z.number(),
          watchers_count: z.number(),
          web_commit_signoff_required: z.boolean().optional(),
        })
        .nullable(),
      sha: z.string(),
      user: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
    }),
    html_url: z.string(),
    id: z.number(),
    issue_url: z.string(),
    labels: z.array(
      z.object({
        color: z.string(),
        default: z.boolean(),
        description: z.string().nullable(),
        id: z.number(),
        name: z.string(),
        node_id: z.string(),
        url: z.string(),
      }),
    ),
    locked: z.boolean(),
    maintainer_can_modify: z.boolean().optional(),
    merge_commit_sha: z.string().nullable(),
    mergeable: z.boolean().optional().nullable(),
    mergeable_state: z.string().optional(),
    merged: z.boolean().optional().nullable(),
    merged_at: z.string().nullable(),
    merged_by: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .optional()
      .nullable(),
    milestone: z
      .object({
        closed_at: z.string().nullable(),
        closed_issues: z.number(),
        created_at: z.string(),
        creator: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        description: z.string().nullable(),
        due_on: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        labels_url: z.string(),
        node_id: z.string(),
        number: z.number(),
        open_issues: z.number(),
        state: z.union([z.literal('open'), z.literal('closed')]),
        title: z.string(),
        updated_at: z.string(),
        url: z.string(),
      })
      .nullable(),
    node_id: z.string(),
    number: z.number(),
    patch_url: z.string(),
    rebaseable: z.boolean().optional().nullable(),
    requested_reviewers: z.array(
      z
        .union([
          z.object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          }),
          z.object({
            deleted: z.boolean().optional(),
            description: z.string().optional().nullable(),
            html_url: z.string().optional(),
            id: z.number(),
            members_url: z.string().optional(),
            name: z.string(),
            node_id: z.string().optional(),
            parent: z
              .object({
                description: z.string().nullable(),
                html_url: z.string(),
                id: z.number(),
                members_url: z.string(),
                name: z.string(),
                node_id: z.string(),
                permission: z.string(),
                privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
                repositories_url: z.string(),
                slug: z.string(),
                url: z.string(),
              })
              .optional()
              .nullable(),
            permission: z.string().optional(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
            repositories_url: z.string().optional(),
            slug: z.string().optional(),
            url: z.string().optional(),
          }),
        ])
        .nullable(),
    ),
    requested_teams: z.array(
      z.object({
        deleted: z.boolean().optional(),
        description: z.string().optional().nullable(),
        html_url: z.string().optional(),
        id: z.number(),
        members_url: z.string().optional(),
        name: z.string(),
        node_id: z.string().optional(),
        parent: z
          .object({
            description: z.string().nullable(),
            html_url: z.string(),
            id: z.number(),
            members_url: z.string(),
            name: z.string(),
            node_id: z.string(),
            permission: z.string(),
            privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
            repositories_url: z.string(),
            slug: z.string(),
            url: z.string(),
          })
          .optional()
          .nullable(),
        permission: z.string().optional(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
        repositories_url: z.string().optional(),
        slug: z.string().optional(),
        url: z.string().optional(),
      }),
    ),
    review_comment_url: z.string(),
    review_comments: z.number().optional(),
    review_comments_url: z.string(),
    state: z.union([z.literal('open'), z.literal('closed')]),
    statuses_url: z.string(),
    title: z.string(),
    updated_at: z.string(),
    url: z.string(),
    user: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookPushSchema = z.object({
  after: z.string(),
  base_ref: z.string().nullable(),
  before: z.string(),
  commits: z.array(
    z.object({
      added: z.array(z.string()).optional(),
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      distinct: z.boolean(),
      id: z.string(),
      message: z.string(),
      modified: z.array(z.string()).optional(),
      removed: z.array(z.string()).optional(),
      timestamp: z.string(),
      tree_id: z.string(),
      url: z.string(),
    }),
  ),
  compare: z.string(),
  created: z.boolean(),
  deleted: z.boolean(),
  enterprise: enterpriseSchema.optional(),
  forced: z.boolean(),
  head_commit: z
    .object({
      added: z.array(z.string()).optional(),
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      distinct: z.boolean(),
      id: z.string(),
      message: z.string(),
      modified: z.array(z.string()).optional(),
      removed: z.array(z.string()).optional(),
      timestamp: z.string(),
      tree_id: z.string(),
      url: z.string(),
    })
    .nullable(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  pusher: z.object({
    date: z.string().optional(),
    email: z.string().optional().nullable(),
    name: z.string(),
    username: z.string().optional(),
  }),
  ref: z.string(),
  repository: z.object({
    allow_auto_merge: z.boolean().optional(),
    allow_forking: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_rebase_merge: z.boolean().optional(),
    allow_squash_merge: z.boolean().optional(),
    allow_update_branch: z.boolean().optional(),
    archive_url: z.string(),
    archived: z.boolean(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    clone_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string(),
    created_at: z.union([z.number(), z.string()]),
    default_branch: z.string(),
    delete_branch_on_merge: z.boolean().optional(),
    deployments_url: z.string(),
    description: z.string().nullable(),
    disabled: z.boolean().optional(),
    downloads_url: z.string(),
    events_url: z.string(),
    fork: z.boolean(),
    forks: z.number(),
    forks_count: z.number(),
    forks_url: z.string(),
    full_name: z.string(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    has_discussions: z.boolean(),
    has_downloads: z.boolean(),
    has_issues: z.boolean(),
    has_pages: z.boolean(),
    has_projects: z.boolean(),
    has_wiki: z.boolean(),
    homepage: z.string().nullable(),
    hooks_url: z.string(),
    html_url: z.string(),
    id: z.number(),
    is_template: z.boolean().optional(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    language: z.string().nullable(),
    languages_url: z.string(),
    license: z
      .object({
        key: z.string(),
        name: z.string(),
        node_id: z.string(),
        spdx_id: z.string(),
        url: z.string().nullable(),
      })
      .nullable(),
    master_branch: z.string().optional(),
    merges_url: z.string(),
    milestones_url: z.string(),
    mirror_url: z.string().nullable(),
    name: z.string(),
    node_id: z.string(),
    notifications_url: z.string(),
    open_issues: z.number(),
    open_issues_count: z.number(),
    organization: z.string().optional(),
    owner: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean().optional(),
        pull: z.boolean(),
        push: z.boolean(),
        triage: z.boolean().optional(),
      })
      .optional(),
    private: z.boolean(),
    public: z.boolean().optional(),
    pulls_url: z.string(),
    pushed_at: z.union([z.number(), z.string()]).nullable(),
    releases_url: z.string(),
    role_name: z.string().optional().nullable(),
    size: z.number(),
    ssh_url: z.string(),
    stargazers: z.number().optional(),
    stargazers_count: z.number(),
    stargazers_url: z.string(),
    statuses_url: z.string(),
    subscribers_url: z.string(),
    subscription_url: z.string(),
    svn_url: z.string(),
    tags_url: z.string(),
    teams_url: z.string(),
    topics: z.array(z.string()),
    trees_url: z.string(),
    updated_at: z.string(),
    url: z.string(),
    visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
    watchers: z.number(),
    watchers_count: z.number(),
    web_commit_signoff_required: z.boolean().optional(),
  }),
  sender: simpleUserSchema.optional(),
});

export const webhookRegistryPackagePublishedSchema = z.object({
  action: z.literal('published'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  registry_package: z.object({
    created_at: z.string().nullable(),
    description: z.string().nullable(),
    ecosystem: z.string(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    namespace: z.string(),
    owner: z.object({
      avatar_url: z.string(),
      events_url: z.string(),
      followers_url: z.string(),
      following_url: z.string(),
      gists_url: z.string(),
      gravatar_id: z.string(),
      html_url: z.string(),
      id: z.number(),
      login: z.string(),
      node_id: z.string(),
      organizations_url: z.string(),
      received_events_url: z.string(),
      repos_url: z.string(),
      site_admin: z.boolean(),
      starred_url: z.string(),
      subscriptions_url: z.string(),
      type: z.string(),
      url: z.string(),
    }),
    package_type: z.string(),
    package_version: z
      .object({
        author: z
          .object({
            avatar_url: z.string(),
            events_url: z.string(),
            followers_url: z.string(),
            following_url: z.string(),
            gists_url: z.string(),
            gravatar_id: z.string(),
            html_url: z.string(),
            id: z.number(),
            login: z.string(),
            node_id: z.string(),
            organizations_url: z.string(),
            received_events_url: z.string(),
            repos_url: z.string(),
            site_admin: z.boolean(),
            starred_url: z.string(),
            subscriptions_url: z.string(),
            type: z.string(),
            url: z.string(),
          })
          .optional(),
        body: z.union([z.string(), z.record(z.unknown())]).optional(),
        body_html: z.string().optional(),
        container_metadata: z
          .object({
            labels: z.record(z.unknown()).optional().nullable(),
            manifest: z.record(z.unknown()).optional().nullable(),
            tag: z
              .object({
                digest: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
          })
          .optional(),
        created_at: z.string().optional(),
        description: z.string(),
        docker_metadata: z.array(z.unknown()).optional(),
        draft: z.boolean().optional(),
        html_url: z.string(),
        id: z.number(),
        installation_command: z.string(),
        manifest: z.string().optional(),
        metadata: z.array(z.record(z.unknown())),
        name: z.string(),
        npm_metadata: z
          .object({
            author: z
              .union([z.string(), z.record(z.unknown())])
              .optional()
              .nullable(),
            bin: z.record(z.unknown()).optional(),
            bugs: z
              .union([z.string(), z.record(z.unknown())])
              .optional()
              .nullable(),
            commit_oid: z.string().optional(),
            contributors: z.array(z.string()).optional(),
            cpu: z.array(z.string()).optional(),
            deleted_by_id: z.number().optional(),
            dependencies: z.record(z.unknown()).optional(),
            description: z.string().optional(),
            dev_dependencies: z.record(z.unknown()).optional(),
            directories: z
              .union([z.string(), z.record(z.unknown())])
              .optional()
              .nullable(),
            dist: z
              .union([z.string(), z.record(z.unknown())])
              .optional()
              .nullable(),
            engines: z.record(z.unknown()).optional(),
            files: z.array(z.string()).optional(),
            git_head: z.string().optional(),
            has_shrinkwrap: z.boolean().optional(),
            homepage: z.string().optional(),
            id: z.string().optional(),
            installation_command: z.string().optional(),
            keywords: z.array(z.string()).optional(),
            license: z.string().optional(),
            main: z.string().optional(),
            maintainers: z.array(z.string()).optional(),
            man: z.record(z.unknown()).optional(),
            name: z.string().optional(),
            node_version: z.string().optional(),
            npm_user: z.string().optional(),
            npm_version: z.string().optional(),
            optional_dependencies: z.record(z.unknown()).optional(),
            os: z.array(z.string()).optional(),
            peer_dependencies: z.record(z.unknown()).optional(),
            published_via_actions: z.boolean().optional(),
            readme: z.string().optional(),
            release_id: z.number().optional(),
            repository: z
              .union([z.string(), z.record(z.unknown())])
              .optional()
              .nullable(),
            scripts: z.record(z.unknown()).optional(),
            version: z.string().optional(),
          })
          .optional()
          .nullable(),
        nuget_metadata: z
          .array(
            z.object({
              id: z
                .union([z.string(), z.record(z.unknown()), z.number()])
                .optional()
                .nullable(),
              name: z.string().optional(),
              value: z
                .union([
                  z.boolean(),
                  z.string(),
                  z.number(),
                  z.object({
                    branch: z.string().optional(),
                    commit: z.string().optional(),
                    type: z.string().optional(),
                    url: z.string().optional(),
                  }),
                ])
                .optional(),
            }),
          )
          .optional()
          .nullable(),
        package_files: z.array(
          z.object({
            content_type: z.string(),
            created_at: z.string(),
            download_url: z.string(),
            id: z.number(),
            md5: z.string().nullable(),
            name: z.string(),
            sha1: z.string().nullable(),
            sha256: z.string().nullable(),
            size: z.number(),
            state: z.string().nullable(),
            updated_at: z.string(),
          }),
        ),
        package_url: z.string(),
        prerelease: z.boolean().optional(),
        release: z
          .object({
            author: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
            created_at: z.string().optional(),
            draft: z.boolean().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            name: z.string().optional().nullable(),
            prerelease: z.boolean().optional(),
            published_at: z.string().optional(),
            tag_name: z.string().optional(),
            target_commitish: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        rubygems_metadata: z.array(z.unknown()).optional(),
        summary: z.string(),
        tag_name: z.string().optional(),
        target_commitish: z.string().optional(),
        target_oid: z.string().optional(),
        updated_at: z.string().optional(),
        version: z.string(),
      })
      .nullable(),
    registry: z
      .object({
        about_url: z.string().optional(),
        name: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
        vendor: z.string().optional(),
      })
      .nullable(),
    updated_at: z.string().nullable(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookRegistryPackageUpdatedSchema = z.object({
  action: z.string(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  registry_package: z.object({
    created_at: z.string(),
    description: z.unknown(),
    ecosystem: z.string(),
    html_url: z.string(),
    id: z.number(),
    name: z.string(),
    namespace: z.string(),
    owner: z.object({
      avatar_url: z.string(),
      events_url: z.string(),
      followers_url: z.string(),
      following_url: z.string(),
      gists_url: z.string(),
      gravatar_id: z.string(),
      html_url: z.string(),
      id: z.number(),
      login: z.string(),
      node_id: z.string(),
      organizations_url: z.string(),
      received_events_url: z.string(),
      repos_url: z.string(),
      site_admin: z.boolean(),
      starred_url: z.string(),
      subscriptions_url: z.string(),
      type: z.string(),
      url: z.string(),
    }),
    package_type: z.string(),
    package_version: z.object({
      author: z.object({
        avatar_url: z.string(),
        events_url: z.string(),
        followers_url: z.string(),
        following_url: z.string(),
        gists_url: z.string(),
        gravatar_id: z.string(),
        html_url: z.string(),
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organizations_url: z.string(),
        received_events_url: z.string(),
        repos_url: z.string(),
        site_admin: z.boolean(),
        starred_url: z.string(),
        subscriptions_url: z.string(),
        type: z.string(),
        url: z.string(),
      }),
      body: z.string(),
      body_html: z.string(),
      created_at: z.string(),
      description: z.string(),
      docker_metadata: z.array(z.unknown()).optional(),
      draft: z.boolean().optional(),
      html_url: z.string(),
      id: z.number(),
      installation_command: z.string(),
      manifest: z.string().optional(),
      metadata: z.array(z.unknown()),
      name: z.string(),
      package_files: z.array(
        z.object({
          content_type: z.string().optional(),
          created_at: z.string().optional(),
          download_url: z.string().optional(),
          id: z.number().optional(),
          md5: z.string().optional().nullable(),
          name: z.string().optional(),
          sha1: z.string().optional().nullable(),
          sha256: z.string().optional(),
          size: z.number().optional(),
          state: z.string().optional(),
          updated_at: z.string().optional(),
        }),
      ),
      package_url: z.string(),
      prerelease: z.boolean().optional(),
      release: z
        .object({
          author: z.object({
            avatar_url: z.string(),
            events_url: z.string(),
            followers_url: z.string(),
            following_url: z.string(),
            gists_url: z.string(),
            gravatar_id: z.string(),
            html_url: z.string(),
            id: z.number(),
            login: z.string(),
            node_id: z.string(),
            organizations_url: z.string(),
            received_events_url: z.string(),
            repos_url: z.string(),
            site_admin: z.boolean(),
            starred_url: z.string(),
            subscriptions_url: z.string(),
            type: z.string(),
            url: z.string(),
          }),
          created_at: z.string(),
          draft: z.boolean(),
          html_url: z.string(),
          id: z.number(),
          name: z.string(),
          prerelease: z.boolean(),
          published_at: z.string(),
          tag_name: z.string(),
          target_commitish: z.string(),
          url: z.string(),
        })
        .optional(),
      rubygems_metadata: z.array(z.unknown()).optional(),
      summary: z.string(),
      tag_name: z.string().optional(),
      target_commitish: z.string(),
      target_oid: z.string(),
      updated_at: z.string(),
      version: z.string(),
    }),
    registry: z.record(z.unknown()).nullable(),
    updated_at: z.string(),
  }),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
});

export const webhookReleaseCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z.object({
    assets: z.array(
      z.object({
        browser_download_url: z.string(),
        content_type: z.string(),
        created_at: z.string(),
        download_count: z.number(),
        id: z.number(),
        label: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        size: z.number(),
        state: z.literal('uploaded'),
        updated_at: z.string(),
        uploader: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        url: z.string(),
      }),
    ),
    assets_url: z.string(),
    author: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    body: z.string().nullable(),
    created_at: z.string().nullable(),
    discussion_url: z.string().optional(),
    draft: z.boolean(),
    html_url: z.string(),
    id: z.number(),
    name: z.string().nullable(),
    node_id: z.string(),
    prerelease: z.boolean(),
    published_at: z.string().nullable(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    tag_name: z.string(),
    tarball_url: z.string().nullable(),
    target_commitish: z.string(),
    upload_url: z.string(),
    url: z.string(),
    zipball_url: z.string().nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookReleaseDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z.object({
    assets: z.array(
      z.object({
        browser_download_url: z.string(),
        content_type: z.string(),
        created_at: z.string(),
        download_count: z.number(),
        id: z.number(),
        label: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        size: z.number(),
        state: z.literal('uploaded'),
        updated_at: z.string(),
        uploader: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        url: z.string(),
      }),
    ),
    assets_url: z.string(),
    author: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    body: z.string().nullable(),
    created_at: z.string().nullable(),
    discussion_url: z.string().optional(),
    draft: z.boolean(),
    html_url: z.string(),
    id: z.number(),
    name: z.string().nullable(),
    node_id: z.string(),
    prerelease: z.boolean(),
    published_at: z.string().nullable(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    tag_name: z.string(),
    tarball_url: z.string().nullable(),
    target_commitish: z.string(),
    upload_url: z.string(),
    url: z.string(),
    zipball_url: z.string().nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookReleaseEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
    name: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z.object({
    assets: z.array(
      z.object({
        browser_download_url: z.string(),
        content_type: z.string(),
        created_at: z.string(),
        download_count: z.number(),
        id: z.number(),
        label: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        size: z.number(),
        state: z.literal('uploaded'),
        updated_at: z.string(),
        uploader: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        url: z.string(),
      }),
    ),
    assets_url: z.string(),
    author: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    body: z.string().nullable(),
    created_at: z.string().nullable(),
    discussion_url: z.string().optional(),
    draft: z.boolean(),
    html_url: z.string(),
    id: z.number(),
    name: z.string().nullable(),
    node_id: z.string(),
    prerelease: z.boolean(),
    published_at: z.string().nullable(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    tag_name: z.string(),
    tarball_url: z.string().nullable(),
    target_commitish: z.string(),
    upload_url: z.string(),
    url: z.string(),
    zipball_url: z.string().nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookReleasePrereleasedSchema = z.object({
  action: z.literal('prereleased'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z
    .object({
      assets: z.array(
        z.object({
          browser_download_url: z.string(),
          content_type: z.string(),
          created_at: z.string(),
          download_count: z.number(),
          id: z.number(),
          label: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          size: z.number(),
          state: z.literal('uploaded'),
          updated_at: z.string(),
          uploader: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .optional()
            .nullable(),
          url: z.string(),
        }),
      ),
      assets_url: z.string(),
      author: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      body: z.string().nullable(),
      created_at: z.string().nullable(),
      discussion_url: z.string().optional(),
      draft: z.boolean(),
      html_url: z.string(),
      id: z.number(),
      name: z.string().nullable(),
      node_id: z.string(),
      prerelease: z.boolean(),
      published_at: z.string().nullable(),
      reactions: z
        .object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        })
        .optional(),
      tag_name: z.string(),
      tarball_url: z.string().nullable(),
      target_commitish: z.string(),
      upload_url: z.string(),
      url: z.string(),
      zipball_url: z.string().nullable(),
    })
    .and(
      z.object({
        assets: z.array(z.record(z.unknown()).nullable()).optional(),
        assets_url: z.string().optional(),
        author: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        created_at: z.string().optional(),
        draft: z.boolean().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        name: z.string().optional().nullable(),
        node_id: z.string().optional(),
        prerelease: z.boolean(),
        published_at: z.string().optional().nullable(),
        tag_name: z.string().optional(),
        tarball_url: z.string().optional().nullable(),
        target_commitish: z.string().optional(),
        upload_url: z.string().optional(),
        url: z.string().optional(),
        zipball_url: z.string().optional().nullable(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const action67Schema = z.literal('prereleased');

export const webhookReleasePublishedSchema = z.object({
  action: z.literal('published'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z
    .object({
      assets: z.array(
        z.object({
          browser_download_url: z.string(),
          content_type: z.string(),
          created_at: z.string(),
          download_count: z.number(),
          id: z.number(),
          label: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          size: z.number(),
          state: z.literal('uploaded'),
          updated_at: z.string(),
          uploader: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .optional()
            .nullable(),
          url: z.string(),
        }),
      ),
      assets_url: z.string(),
      author: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      body: z.string().nullable(),
      created_at: z.string().nullable(),
      discussion_url: z.string().optional(),
      draft: z.boolean(),
      html_url: z.string(),
      id: z.number(),
      name: z.string().nullable(),
      node_id: z.string(),
      prerelease: z.boolean(),
      published_at: z.string().nullable(),
      reactions: z
        .object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        })
        .optional(),
      tag_name: z.string(),
      tarball_url: z.string().nullable(),
      target_commitish: z.string(),
      upload_url: z.string(),
      url: z.string(),
      zipball_url: z.string().nullable(),
    })
    .and(
      z.object({
        assets: z.array(z.record(z.unknown()).nullable()).optional(),
        assets_url: z.string().optional(),
        author: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        created_at: z.string().optional(),
        draft: z.boolean().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        name: z.string().optional().nullable(),
        node_id: z.string().optional(),
        prerelease: z.boolean().optional(),
        published_at: z.string().nullable(),
        tag_name: z.string().optional(),
        tarball_url: z.string().optional().nullable(),
        target_commitish: z.string().optional(),
        upload_url: z.string().optional(),
        url: z.string().optional(),
        zipball_url: z.string().optional().nullable(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookReleaseReleasedSchema = z.object({
  action: z.literal('released'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z.object({
    assets: z.array(
      z.object({
        browser_download_url: z.string(),
        content_type: z.string(),
        created_at: z.string(),
        download_count: z.number(),
        id: z.number(),
        label: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        size: z.number(),
        state: z.literal('uploaded'),
        updated_at: z.string(),
        uploader: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        url: z.string(),
      }),
    ),
    assets_url: z.string(),
    author: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    body: z.string().nullable(),
    created_at: z.string().nullable(),
    discussion_url: z.string().optional(),
    draft: z.boolean(),
    html_url: z.string(),
    id: z.number(),
    name: z.string().nullable(),
    node_id: z.string(),
    prerelease: z.boolean(),
    published_at: z.string().nullable(),
    reactions: z
      .object({
        '+1': z.number(),
        '-1': z.number(),
        confused: z.number(),
        eyes: z.number(),
        heart: z.number(),
        hooray: z.number(),
        laugh: z.number(),
        rocket: z.number(),
        total_count: z.number(),
        url: z.string(),
      })
      .optional(),
    tag_name: z.string(),
    tarball_url: z.string().nullable(),
    target_commitish: z.string(),
    upload_url: z.string(),
    url: z.string(),
    zipball_url: z.string().nullable(),
  }),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const action68Schema = z.literal('released');

export const webhookReleaseUnpublishedSchema = z.object({
  action: z.literal('unpublished'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  release: z
    .object({
      assets: z.array(
        z.object({
          browser_download_url: z.string(),
          content_type: z.string(),
          created_at: z.string(),
          download_count: z.number(),
          id: z.number(),
          label: z.string().nullable(),
          name: z.string(),
          node_id: z.string(),
          size: z.number(),
          state: z.literal('uploaded'),
          updated_at: z.string(),
          uploader: z
            .object({
              avatar_url: z.string().optional(),
              deleted: z.boolean().optional(),
              email: z.string().optional().nullable(),
              events_url: z.string().optional(),
              followers_url: z.string().optional(),
              following_url: z.string().optional(),
              gists_url: z.string().optional(),
              gravatar_id: z.string().optional(),
              html_url: z.string().optional(),
              id: z.number(),
              login: z.string(),
              name: z.string().optional(),
              node_id: z.string().optional(),
              organizations_url: z.string().optional(),
              received_events_url: z.string().optional(),
              repos_url: z.string().optional(),
              site_admin: z.boolean().optional(),
              starred_url: z.string().optional(),
              subscriptions_url: z.string().optional(),
              type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
              url: z.string().optional(),
            })
            .optional()
            .nullable(),
          url: z.string(),
        }),
      ),
      assets_url: z.string(),
      author: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      body: z.string().nullable(),
      created_at: z.string().nullable(),
      discussion_url: z.string().optional(),
      draft: z.boolean(),
      html_url: z.string(),
      id: z.number(),
      name: z.string().nullable(),
      node_id: z.string(),
      prerelease: z.boolean(),
      published_at: z.string().nullable(),
      reactions: z
        .object({
          '+1': z.number(),
          '-1': z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        })
        .optional(),
      tag_name: z.string(),
      tarball_url: z.string().nullable(),
      target_commitish: z.string(),
      upload_url: z.string(),
      url: z.string(),
      zipball_url: z.string().nullable(),
    })
    .and(
      z.object({
        assets: z.array(z.record(z.unknown()).nullable()).optional(),
        assets_url: z.string().optional(),
        author: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        body: z.string().optional().nullable(),
        created_at: z.string().optional(),
        draft: z.boolean().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        name: z.string().optional().nullable(),
        node_id: z.string().optional(),
        prerelease: z.boolean().optional(),
        published_at: z.string().nullable(),
        tag_name: z.string().optional(),
        tarball_url: z.string().optional().nullable(),
        target_commitish: z.string().optional(),
        upload_url: z.string().optional(),
        url: z.string().optional(),
        zipball_url: z.string().optional().nullable(),
      }),
    ),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const action69Schema = z.literal('unpublished');

export const webhookRepositoryArchivedSchema = z.object({
  action: z.literal('archived'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryDispatchSampleSchema = z.object({
  action: z.string(),
  branch: z.string(),
  client_payload: z.record(z.unknown()).nullable(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema,
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    default_branch: z
      .object({
        from: z.string(),
      })
      .optional(),
    description: z
      .object({
        from: z.string().nullable(),
      })
      .optional(),
    homepage: z
      .object({
        from: z.string().nullable(),
      })
      .optional(),
    topics: z
      .object({
        from: z.array(z.string()).optional().nullable(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryImportSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  status: z.union([z.literal('success'), z.literal('cancelled'), z.literal('failure')]),
});

export const status13Schema = z.union([z.literal('success'), z.literal('cancelled'), z.literal('failure')]);

export const webhookRepositoryPrivatizedSchema = z.object({
  action: z.literal('privatized'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action70Schema = z.literal('privatized');

export const webhookRepositoryPublicizedSchema = z.object({
  action: z.literal('publicized'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action71Schema = z.literal('publicized');

export const webhookRepositoryRenamedSchema = z.object({
  action: z.literal('renamed'),
  changes: z.object({
    repository: z.object({
      name: z.object({
        from: z.string(),
      }),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryTransferredSchema = z.object({
  action: z.literal('transferred'),
  changes: z.object({
    owner: z.object({
      from: z.object({
        organization: z
          .object({
            avatar_url: z.string(),
            description: z.string().nullable(),
            events_url: z.string(),
            hooks_url: z.string(),
            html_url: z.string().optional(),
            id: z.number(),
            issues_url: z.string(),
            login: z.string(),
            members_url: z.string(),
            node_id: z.string(),
            public_members_url: z.string(),
            repos_url: z.string(),
            url: z.string(),
          })
          .optional(),
        user: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
      }),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookRepositoryUnarchivedSchema = z.object({
  action: z.literal('unarchived'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action72Schema = z.literal('unarchived');

export const webhookRepositoryVulnerabilityAlertCreateSchema = z.object({
  action: z.literal('create'),
  alert: z
    .object({
      affected_package_name: z.string(),
      affected_range: z.string(),
      created_at: z.string(),
      dismiss_reason: z.string().optional(),
      dismissed_at: z.string().optional(),
      dismisser: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      external_identifier: z.string(),
      external_reference: z.string().nullable(),
      fix_reason: z.string().optional(),
      fixed_at: z.string().optional(),
      fixed_in: z.string().optional(),
      ghsa_id: z.string(),
      id: z.number(),
      node_id: z.string(),
      number: z.number(),
      severity: z.string(),
      state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
    })
    .and(
      z.object({
        affected_package_name: z.string().optional(),
        affected_range: z.string().optional(),
        created_at: z.string().optional(),
        external_identifier: z.string().optional(),
        external_reference: z.string().optional().nullable(),
        fixed_in: z.string().optional(),
        ghsa_id: z.string().optional(),
        id: z.number().optional(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        severity: z.string().optional(),
        state: z.literal('open'),
      }),
    ),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action73Schema = z.literal('create');

export const webhookRepositoryVulnerabilityAlertDismissSchema = z.object({
  action: z.literal('dismiss'),
  alert: z
    .object({
      affected_package_name: z.string(),
      affected_range: z.string(),
      created_at: z.string(),
      dismiss_comment: z.string().optional().nullable(),
      dismiss_reason: z.string().optional(),
      dismissed_at: z.string().optional(),
      dismisser: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      external_identifier: z.string(),
      external_reference: z.string().nullable(),
      fix_reason: z.string().optional(),
      fixed_at: z.string().optional(),
      fixed_in: z.string().optional(),
      ghsa_id: z.string(),
      id: z.number(),
      node_id: z.string(),
      number: z.number(),
      severity: z.string(),
      state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
    })
    .and(
      z.object({
        affected_package_name: z.string().optional(),
        affected_range: z.string().optional(),
        created_at: z.string().optional(),
        dismiss_comment: z.string().optional().nullable(),
        dismiss_reason: z.string(),
        dismissed_at: z.string(),
        dismisser: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        external_identifier: z.string().optional(),
        external_reference: z.string().optional().nullable(),
        fixed_in: z.string().optional(),
        ghsa_id: z.string().optional(),
        id: z.number().optional(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        severity: z.string().optional(),
        state: z.literal('dismissed'),
      }),
    ),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action74Schema = z.literal('dismiss');

export const webhookRepositoryVulnerabilityAlertReopenSchema = z.object({
  action: z.literal('reopen'),
  alert: z
    .object({
      affected_package_name: z.string(),
      affected_range: z.string(),
      created_at: z.string(),
      dismiss_reason: z.string().optional(),
      dismissed_at: z.string().optional(),
      dismisser: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      external_identifier: z.string(),
      external_reference: z.string().nullable(),
      fix_reason: z.string().optional(),
      fixed_at: z.string().optional(),
      fixed_in: z.string().optional(),
      ghsa_id: z.string(),
      id: z.number(),
      node_id: z.string(),
      number: z.number(),
      severity: z.string(),
      state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
    })
    .and(
      z.object({
        affected_package_name: z.string().optional(),
        affected_range: z.string().optional(),
        created_at: z.string().optional(),
        external_identifier: z.string().optional(),
        external_reference: z.string().optional().nullable(),
        fixed_in: z.string().optional(),
        ghsa_id: z.string().optional(),
        id: z.number().optional(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        severity: z.string().optional(),
        state: z.literal('open'),
      }),
    ),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action75Schema = z.literal('reopen');

export const webhookRepositoryVulnerabilityAlertResolveSchema = z.object({
  action: z.literal('resolve'),
  alert: z
    .object({
      affected_package_name: z.string(),
      affected_range: z.string(),
      created_at: z.string(),
      dismiss_reason: z.string().optional(),
      dismissed_at: z.string().optional(),
      dismisser: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .optional()
        .nullable(),
      external_identifier: z.string(),
      external_reference: z.string().nullable(),
      fix_reason: z.string().optional(),
      fixed_at: z.string().optional(),
      fixed_in: z.string().optional(),
      ghsa_id: z.string(),
      id: z.number(),
      node_id: z.string(),
      number: z.number(),
      severity: z.string(),
      state: z.union([z.literal('open'), z.literal('dismissed'), z.literal('fixed')]),
    })
    .and(
      z.object({
        affected_package_name: z.string().optional(),
        affected_range: z.string().optional(),
        created_at: z.string().optional(),
        external_identifier: z.string().optional(),
        external_reference: z.string().optional().nullable(),
        fix_reason: z.string().optional(),
        fixed_at: z.string().optional(),
        fixed_in: z.string().optional(),
        ghsa_id: z.string().optional(),
        id: z.number().optional(),
        node_id: z.string().optional(),
        number: z.number().optional(),
        severity: z.string().optional(),
        state: z.union([z.literal('fixed'), z.literal('open')]),
      }),
    ),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action76Schema = z.literal('resolve');

export const webhookSecretScanningAlertCreatedSchema = z.object({
  action: z.literal('created'),
  alert: secretScanningAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const secretScanningLocationSchema = z.object({
  details: z.union([
    secretScanningLocationCommitSchema,
    secretScanningLocationIssueTitleSchema,
    secretScanningLocationIssueBodySchema,
    secretScanningLocationIssueCommentSchema,
  ]),
  type: z.union([z.literal('commit'), z.literal('issue_title'), z.literal('issue_body'), z.literal('issue_comment')]),
});

export const webhookSecretScanningAlertLocationCreatedFormEncodedSchema = z.object({
  payload: z.string(),
});

export const webhookSecretScanningAlertReopenedSchema = z.object({
  action: z.literal('reopened'),
  alert: secretScanningAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookSecretScanningAlertResolvedSchema = z.object({
  action: z.literal('resolved'),
  alert: z.object({
    created_at: alertCreatedAtSchema.optional(),
    html_url: alertHtmlUrlSchema.optional(),
    locations_url: z.string().optional(),
    number: alertNumberSchema.optional(),
    push_protection_bypassed: z.boolean().optional().nullable(),
    push_protection_bypassed_at: z.string().optional().nullable(),
    push_protection_bypassed_by: nullableSimpleUserSchema.optional(),
    resolution: z
      .union([
        z.literal('false_positive'),
        z.literal('wont_fix'),
        z.literal('revoked'),
        z.literal('used_in_tests'),
        z.literal('pattern_deleted'),
        z.literal('pattern_edited'),
      ])
      .optional()
      .nullable(),
    resolution_comment: z.string().optional().nullable(),
    resolved_at: z.string().optional().nullable(),
    resolved_by: nullableSimpleUserSchema.optional(),
    secret: z.string().optional(),
    secret_type: z.string().optional(),
    secret_type_display_name: z.string().optional(),
    state: secretScanningAlertStateSchema.optional(),
    updated_at: alertUpdatedAtSchema.optional(),
    url: alertUrlSchema.optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const resolutionSchema = z.union([
  z.literal('false_positive'),
  z.literal('wont_fix'),
  z.literal('revoked'),
  z.literal('used_in_tests'),
  z.literal('pattern_deleted'),
  z.literal('pattern_edited'),
]);

export const webhookSecretScanningAlertRevokedSchema = z.object({
  action: z.literal('revoked'),
  alert: secretScanningAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema.optional(),
});

export const webhookSecurityAdvisoryPublishedSchema = z.object({
  action: z.literal('published'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  security_advisory: z.object({
    cvss: z.object({
      score: z.number(),
      vector_string: z.string().nullable(),
    }),
    cwes: z.array(
      z.object({
        cwe_id: z.string(),
        name: z.string(),
      }),
    ),
    description: z.string(),
    ghsa_id: z.string(),
    identifiers: z.array(
      z.object({
        type: z.string(),
        value: z.string(),
      }),
    ),
    published_at: z.string(),
    references: z.array(
      z.object({
        url: z.string(),
      }),
    ),
    severity: z.string(),
    summary: z.string(),
    updated_at: z.string(),
    vulnerabilities: z.array(
      z.object({
        first_patched_version: z
          .object({
            identifier: z.string(),
          })
          .nullable(),
        package: z.object({
          ecosystem: z.string(),
          name: z.string(),
        }),
        severity: z.string(),
        vulnerable_version_range: z.string(),
      }),
    ),
    withdrawn_at: z.string().nullable(),
  }),
  sender: simpleUserSchema.optional(),
});

export const webhookSecurityAdvisoryUpdatedSchema = z.object({
  action: z.literal('updated'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  security_advisory: z.object({
    cvss: z.object({
      score: z.number(),
      vector_string: z.string().nullable(),
    }),
    cwes: z.array(
      z.object({
        cwe_id: z.string(),
        name: z.string(),
      }),
    ),
    description: z.string(),
    ghsa_id: z.string(),
    identifiers: z.array(
      z.object({
        type: z.string(),
        value: z.string(),
      }),
    ),
    published_at: z.string(),
    references: z.array(
      z.object({
        url: z.string(),
      }),
    ),
    severity: z.string(),
    summary: z.string(),
    updated_at: z.string(),
    vulnerabilities: z.array(
      z.object({
        first_patched_version: z
          .object({
            identifier: z.string(),
          })
          .nullable(),
        package: z.object({
          ecosystem: z.string(),
          name: z.string(),
        }),
        severity: z.string(),
        vulnerable_version_range: z.string(),
      }),
    ),
    withdrawn_at: z.string().nullable(),
  }),
  sender: simpleUserSchema.optional(),
});

export const webhookSecurityAdvisoryWithdrawnSchema = z.object({
  action: z.literal('withdrawn'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  security_advisory: z.object({
    cvss: z.object({
      score: z.number(),
      vector_string: z.string().nullable(),
    }),
    cwes: z.array(
      z.object({
        cwe_id: z.string(),
        name: z.string(),
      }),
    ),
    description: z.string(),
    ghsa_id: z.string(),
    identifiers: z.array(
      z.object({
        type: z.string(),
        value: z.string(),
      }),
    ),
    published_at: z.string(),
    references: z.array(
      z.object({
        url: z.string(),
      }),
    ),
    severity: z.string(),
    summary: z.string(),
    updated_at: z.string(),
    vulnerabilities: z.array(
      z.object({
        first_patched_version: z
          .object({
            identifier: z.string(),
          })
          .nullable(),
        package: z.object({
          ecosystem: z.string(),
          name: z.string(),
        }),
        severity: z.string(),
        vulnerable_version_range: z.string(),
      }),
    ),
    withdrawn_at: z.string(),
  }),
  sender: simpleUserSchema.optional(),
});

export const action77Schema = z.literal('withdrawn');

export const fullRepositorySchema = z.object({
  allow_auto_merge: z.boolean().optional(),
  allow_forking: z.boolean().optional(),
  allow_merge_commit: z.boolean().optional(),
  allow_rebase_merge: z.boolean().optional(),
  allow_squash_merge: z.boolean().optional(),
  allow_update_branch: z.boolean().optional(),
  anonymous_access_enabled: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string(),
  code_of_conduct: codeOfConductSimpleSchema.optional(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string(),
  default_branch: z.string(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number(),
  forks_count: z.number(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  has_discussions: z.boolean(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().nullable(),
  languages_url: z.string(),
  license: nullableLicenseSimpleSchema,
  master_branch: z.string().optional(),
  merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
  merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().nullable(),
  name: z.string(),
  network_count: z.number(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number(),
  open_issues_count: z.number(),
  organization: nullableSimpleUserSchema.optional(),
  owner: simpleUserSchema,
  parent: repositorySchema.optional(),
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string(),
  releases_url: z.string(),
  security_and_analysis: securityAndAnalysisSchema.optional(),
  size: z.number(),
  source: repositorySchema.optional(),
  squash_merge_commit_message: z
    .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
    .optional(),
  squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_count: z.number(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional().nullable(),
  template_repository: nullableRepositorySchema.optional(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
  use_squash_pr_title_as_default: z.boolean().optional(),
  visibility: z.string().optional(),
  watchers: z.number(),
  watchers_count: z.number(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const webhookSponsorshipCancelledSchema = z.object({
  action: z.literal('cancelled'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const webhookSponsorshipCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const webhookSponsorshipEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    privacy_level: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const webhookSponsorshipPendingCancellationSchema = z.object({
  action: z.literal('pending_cancellation'),
  effective_date: z.string().optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const action78Schema = z.literal('pending_cancellation');

export const webhookSponsorshipPendingTierChangeSchema = z.object({
  action: z.literal('pending_tier_change'),
  changes: z.object({
    tier: z.object({
      from: z.object({
        created_at: z.string(),
        description: z.string(),
        is_custom_ammount: z.boolean().optional(),
        is_custom_amount: z.boolean().optional(),
        is_one_time: z.boolean(),
        monthly_price_in_cents: z.number(),
        monthly_price_in_dollars: z.number(),
        name: z.string(),
        node_id: z.string(),
      }),
    }),
  }),
  effective_date: z.string().optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const action79Schema = z.literal('pending_tier_change');

export const webhookSponsorshipTierChangedSchema = z.object({
  action: z.literal('tier_changed'),
  changes: z.object({
    tier: z.object({
      from: z.object({
        created_at: z.string(),
        description: z.string(),
        is_custom_ammount: z.boolean().optional(),
        is_custom_amount: z.boolean().optional(),
        is_one_time: z.boolean(),
        monthly_price_in_cents: z.number(),
        monthly_price_in_dollars: z.number(),
        name: z.string(),
        node_id: z.string(),
      }),
    }),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema.optional(),
  sender: simpleUserSchema,
  sponsorship: z.object({
    created_at: z.string(),
    maintainer: z
      .object({
        avatar_url: z.string().optional(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.string().optional(),
        url: z.string().optional(),
      })
      .optional(),
    node_id: z.string(),
    privacy_level: z.string(),
    sponsor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    sponsorable: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    tier: z.object({
      created_at: z.string(),
      description: z.string(),
      is_custom_ammount: z.boolean().optional(),
      is_custom_amount: z.boolean().optional(),
      is_one_time: z.boolean(),
      monthly_price_in_cents: z.number(),
      monthly_price_in_dollars: z.number(),
      name: z.string(),
      node_id: z.string(),
    }),
  }),
});

export const action80Schema = z.literal('tier_changed');

export const webhookStarCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  starred_at: z.string().nullable(),
});

export const webhookStarDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  starred_at: z.unknown(),
});

export const webhookStatusSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  branches: z.array(
    z.object({
      commit: z.object({
        sha: z.string().nullable(),
        url: z.string().nullable(),
      }),
      name: z.string(),
      protected: z.boolean(),
    }),
  ),
  commit: z.object({
    author: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    comments_url: z.string(),
    commit: z.object({
      author: z
        .object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        })
        .and(
          z.object({
            date: z.string(),
            email: z.string().optional(),
            name: z.string().optional(),
          }),
        ),
      comment_count: z.number(),
      committer: z
        .object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        })
        .and(
          z.object({
            date: z.string(),
            email: z.string().optional(),
            name: z.string().optional(),
          }),
        ),
      message: z.string(),
      tree: z.object({
        sha: z.string(),
        url: z.string(),
      }),
      url: z.string(),
      verification: z.object({
        payload: z.string().nullable(),
        reason: z.union([
          z.literal('expired_key'),
          z.literal('not_signing_key'),
          z.literal('gpgverify_error'),
          z.literal('gpgverify_unavailable'),
          z.literal('unsigned'),
          z.literal('unknown_signature_type'),
          z.literal('no_user'),
          z.literal('unverified_email'),
          z.literal('bad_email'),
          z.literal('unknown_key'),
          z.literal('malformed_signature'),
          z.literal('invalid'),
          z.literal('valid'),
          z.literal('bad_cert'),
          z.literal('ocsp_pending'),
        ]),
        signature: z.string().nullable(),
        verified: z.boolean(),
      }),
    }),
    committer: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        login: z.string().optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    html_url: z.string(),
    node_id: z.string(),
    parents: z.array(
      z.object({
        html_url: z.string(),
        sha: z.string(),
        url: z.string(),
      }),
    ),
    sha: z.string(),
    url: z.string(),
  }),
  context: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  enterprise: enterpriseSchema.optional(),
  id: z.number(),
  installation: simpleInstallationSchema.optional(),
  name: z.string(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  sha: z.string(),
  state: z.union([z.literal('pending'), z.literal('success'), z.literal('failure'), z.literal('error')]),
  target_url: z.string().nullable(),
  updated_at: z.string(),
});

export const reasonSchema = z.union([
  z.literal('expired_key'),
  z.literal('not_signing_key'),
  z.literal('gpgverify_error'),
  z.literal('gpgverify_unavailable'),
  z.literal('unsigned'),
  z.literal('unknown_signature_type'),
  z.literal('no_user'),
  z.literal('unverified_email'),
  z.literal('bad_email'),
  z.literal('unknown_key'),
  z.literal('malformed_signature'),
  z.literal('invalid'),
  z.literal('valid'),
  z.literal('bad_cert'),
  z.literal('ocsp_pending'),
]);

export const state11Schema = z.union([
  z.literal('pending'),
  z.literal('success'),
  z.literal('failure'),
  z.literal('error'),
]);

export const webhookTeamAddSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const webhookTeamAddedToRepositorySchema = z.object({
  action: z.literal('added_to_repository'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
    })
    .optional(),
  sender: simpleUserSchema.optional(),
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const action81Schema = z.literal('added_to_repository');

export const webhookTeamCreatedSchema = z.object({
  action: z.literal('created'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
    })
    .optional(),
  sender: simpleUserSchema,
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const webhookTeamDeletedSchema = z.object({
  action: z.literal('deleted'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
    })
    .optional(),
  sender: simpleUserSchema.optional(),
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const webhookTeamEditedSchema = z.object({
  action: z.literal('edited'),
  changes: z.object({
    description: z
      .object({
        from: z.string(),
      })
      .optional(),
    name: z
      .object({
        from: z.string(),
      })
      .optional(),
    privacy: z
      .object({
        from: z.string(),
      })
      .optional(),
    repository: z
      .object({
        permissions: z.object({
          from: z.object({
            admin: z.boolean().optional(),
            pull: z.boolean().optional(),
            push: z.boolean().optional(),
          }),
        }),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
    })
    .optional(),
  sender: simpleUserSchema,
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const webhookTeamRemovedFromRepositorySchema = z.object({
  action: z.literal('removed_from_repository'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  repository: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.union([z.number(), z.string()]),
      default_branch: z.string(),
      delete_branch_on_merge: z.boolean().optional(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean().optional(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          node_id: z.string(),
          spdx_id: z.string(),
          url: z.string().nullable(),
        })
        .nullable(),
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      organization: z.string().optional(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      public: z.boolean().optional(),
      pulls_url: z.string(),
      pushed_at: z.union([z.number(), z.string()]).nullable(),
      releases_url: z.string(),
      role_name: z.string().optional().nullable(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers: z.number().optional(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      topics: z.array(z.string()),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]),
      watchers: z.number(),
      watchers_count: z.number(),
    })
    .optional(),
  sender: simpleUserSchema,
  team: z.object({
    deleted: z.boolean().optional(),
    description: z.string().optional().nullable(),
    html_url: z.string().optional(),
    id: z.number(),
    members_url: z.string().optional(),
    name: z.string(),
    node_id: z.string().optional(),
    parent: z
      .object({
        description: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        members_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        permission: z.string(),
        privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]),
        repositories_url: z.string(),
        slug: z.string(),
        url: z.string(),
      })
      .optional()
      .nullable(),
    permission: z.string().optional(),
    privacy: z.union([z.literal('open'), z.literal('closed'), z.literal('secret')]).optional(),
    repositories_url: z.string().optional(),
    slug: z.string().optional(),
    url: z.string().optional(),
  }),
});

export const action82Schema = z.literal('removed_from_repository');

export const webhookWatchStartedSchema = z.object({
  action: z.literal('started'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const action83Schema = z.literal('started');

export const webhookWorkflowDispatchSchema = z.object({
  enterprise: enterpriseSchema.optional(),
  inputs: z
    .object({
      name: z.string().optional(),
      number: z.string().optional(),
    })
    .nullable(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  ref: z.string(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z.string(),
});

export const webhookWorkflowJobCompletedSchema = z.object({
  action: z.literal('completed'),
  deployment: deploymentSchema.optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow_job: z
    .object({
      check_run_url: z.string(),
      completed_at: z.string().nullable(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('skipped'),
          z.literal('cancelled'),
          z.literal('action_required'),
          z.literal('neutral'),
          z.literal('timed_out'),
        ])
        .nullable(),
      head_branch: z.string().nullable(),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z.array(z.string()),
      name: z.string(),
      node_id: z.string(),
      run_attempt: z.number(),
      run_id: z.number(),
      run_url: z.string(),
      runner_group_id: z.number().nullable(),
      runner_group_name: z.string().nullable(),
      runner_id: z.number().nullable(),
      runner_name: z.string().nullable(),
      started_at: z.string(),
      status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed'), z.literal('waiting')]),
      steps: z.array(
        z.object({
          completed_at: z.string().nullable(),
          conclusion: z
            .union([z.literal('failure'), z.literal('skipped'), z.literal('success'), z.literal('cancelled')])
            .nullable(),
          name: z.string(),
          number: z.number(),
          started_at: z.string().nullable(),
          status: z.union([z.literal('in_progress'), z.literal('completed'), z.literal('queued')]),
        }),
      ),
      url: z.string(),
      workflow_name: z.string().nullable(),
    })
    .and(
      z.object({
        check_run_url: z.string().optional(),
        completed_at: z.string().optional(),
        conclusion: z.union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('skipped'),
          z.literal('cancelled'),
          z.literal('action_required'),
          z.literal('neutral'),
          z.literal('timed_out'),
        ]),
        head_branch: z.string().optional().nullable(),
        head_sha: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.string().nullable()).optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        run_attempt: z.number().optional(),
        run_id: z.number().optional(),
        run_url: z.string().optional(),
        runner_group_id: z.number().optional().nullable(),
        runner_group_name: z.string().optional().nullable(),
        runner_id: z.number().optional().nullable(),
        runner_name: z.string().optional().nullable(),
        started_at: z.string().optional(),
        status: z.string().optional(),
        steps: z.array(z.record(z.unknown()).nullable()).optional(),
        url: z.string().optional(),
        workflow_name: z.string().optional().nullable(),
      }),
    ),
});

export const status14Schema = z.union([
  z.literal('queued'),
  z.literal('in_progress'),
  z.literal('completed'),
  z.literal('waiting'),
]);

export const webhookWorkflowJobInProgressSchema = z.object({
  action: z.literal('in_progress'),
  deployment: deploymentSchema.optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow_job: z
    .object({
      check_run_url: z.string(),
      completed_at: z.string().nullable(),
      conclusion: z
        .union([z.literal('success'), z.literal('failure'), z.literal('cancelled'), z.literal('neutral')])
        .nullable(),
      head_branch: z.string().nullable(),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      labels: z.array(z.string()),
      name: z.string(),
      node_id: z.string(),
      run_attempt: z.number(),
      run_id: z.number(),
      run_url: z.string(),
      runner_group_id: z.number().nullable(),
      runner_group_name: z.string().nullable(),
      runner_id: z.number().nullable(),
      runner_name: z.string().nullable(),
      started_at: z.string(),
      status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]),
      steps: z.array(
        z.object({
          completed_at: z.string().nullable(),
          conclusion: z
            .union([z.literal('failure'), z.literal('skipped'), z.literal('success'), z.literal('cancelled')])
            .nullable(),
          name: z.string(),
          number: z.number(),
          started_at: z.string().nullable(),
          status: z.union([
            z.literal('in_progress'),
            z.literal('completed'),
            z.literal('queued'),
            z.literal('pending'),
          ]),
        }),
      ),
      url: z.string(),
      workflow_name: z.string().nullable(),
    })
    .and(
      z.object({
        check_run_url: z.string().optional(),
        completed_at: z.string().optional().nullable(),
        conclusion: z.string().optional().nullable(),
        head_branch: z.string().optional().nullable(),
        head_sha: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        labels: z.array(z.string()).optional(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        run_attempt: z.number().optional(),
        run_id: z.number().optional(),
        run_url: z.string().optional(),
        runner_group_id: z.number().optional().nullable(),
        runner_group_name: z.string().optional().nullable(),
        runner_id: z.number().optional().nullable(),
        runner_name: z.string().optional().nullable(),
        started_at: z.string().optional(),
        status: z.union([z.literal('in_progress'), z.literal('completed'), z.literal('queued')]),
        steps: z.array(
          z.object({
            completed_at: z.string().nullable(),
            conclusion: z.string().nullable(),
            name: z.string(),
            number: z.number(),
            started_at: z.string().nullable(),
            status: z.union([
              z.literal('in_progress'),
              z.literal('completed'),
              z.literal('pending'),
              z.literal('queued'),
            ]),
          }),
        ),
        url: z.string().optional(),
        workflow_name: z.string().optional().nullable(),
      }),
    ),
});

export const action84Schema = z.literal('in_progress');

export const conclusion6Schema = z.union([
  z.literal('success'),
  z.literal('failure'),
  z.literal('cancelled'),
  z.literal('neutral'),
]);

export const webhookWorkflowJobQueuedSchema = z.object({
  action: z.literal('queued'),
  deployment: deploymentSchema.optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow_job: z.object({
    check_run_url: z.string(),
    completed_at: z.string().nullable(),
    conclusion: z.string().nullable(),
    head_branch: z.string().nullable(),
    head_sha: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z.array(z.string()),
    name: z.string(),
    node_id: z.string(),
    run_attempt: z.number(),
    run_id: z.number(),
    run_url: z.string(),
    runner_group_id: z.number().nullable(),
    runner_group_name: z.string().nullable(),
    runner_id: z.number().nullable(),
    runner_name: z.string().nullable(),
    started_at: z.string(),
    status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed'), z.literal('waiting')]),
    steps: z.array(
      z.object({
        completed_at: z.string().nullable(),
        conclusion: z
          .union([z.literal('failure'), z.literal('skipped'), z.literal('success'), z.literal('cancelled')])
          .nullable(),
        name: z.string(),
        number: z.number(),
        started_at: z.string().nullable(),
        status: z.union([z.literal('completed'), z.literal('in_progress'), z.literal('queued'), z.literal('pending')]),
      }),
    ),
    url: z.string(),
    workflow_name: z.string().nullable(),
  }),
});

export const action85Schema = z.literal('queued');

export const webhookWorkflowJobWaitingSchema = z.object({
  action: z.literal('waiting'),
  deployment: deploymentSchema.optional(),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow_job: z.object({
    check_run_url: z.string(),
    completed_at: z.string().nullable(),
    conclusion: z.string().nullable(),
    head_branch: z.string().nullable(),
    head_sha: z.string(),
    html_url: z.string(),
    id: z.number(),
    labels: z.array(z.string()),
    name: z.string(),
    node_id: z.string(),
    run_attempt: z.number(),
    run_id: z.number(),
    run_url: z.string(),
    runner_group_id: z.number().nullable(),
    runner_group_name: z.string().nullable(),
    runner_id: z.number().nullable(),
    runner_name: z.string().nullable(),
    started_at: z.string(),
    status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed'), z.literal('waiting')]),
    steps: z.array(
      z.object({
        completed_at: z.string().nullable(),
        conclusion: z
          .union([z.literal('failure'), z.literal('skipped'), z.literal('success'), z.literal('cancelled')])
          .nullable(),
        name: z.string(),
        number: z.number(),
        started_at: z.string().nullable(),
        status: z.union([
          z.literal('completed'),
          z.literal('in_progress'),
          z.literal('queued'),
          z.literal('pending'),
          z.literal('waiting'),
        ]),
      }),
    ),
    url: z.string(),
    workflow_name: z.string().nullable(),
  }),
});

export const action86Schema = z.literal('waiting');

export const webhookWorkflowRunCompletedSchema = z.object({
  action: z.literal('completed'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z
    .object({
      badge_url: z.string(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      state: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .nullable(),
  workflow_run: z
    .object({
      actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      artifacts_url: z.string(),
      cancel_url: z.string(),
      check_suite_id: z.number(),
      check_suite_node_id: z.string(),
      check_suite_url: z.string(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
          z.literal('skipped'),
        ])
        .nullable(),
      created_at: z.string(),
      event: z.string(),
      head_branch: z.string().nullable(),
      head_commit: z.object({
        author: z.object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        }),
        committer: z.object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        }),
        id: z.string(),
        message: z.string(),
        timestamp: z.string(),
        tree_id: z.string(),
      }),
      head_repository: z.object({
        archive_url: z.string(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        languages_url: z.string(),
        merges_url: z.string(),
        milestones_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        private: z.boolean(),
        pulls_url: z.string(),
        releases_url: z.string(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        trees_url: z.string(),
        url: z.string(),
      }),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      jobs_url: z.string(),
      logs_url: z.string(),
      name: z.string().nullable(),
      node_id: z.string(),
      path: z.string(),
      previous_attempt_url: z.string().nullable(),
      pull_requests: z.array(
        z.object({
          base: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          head: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          id: z.number(),
          number: z.number(),
          url: z.string(),
        }),
      ),
      referenced_workflows: z
        .array(
          z.object({
            path: z.string(),
            ref: z.string().optional(),
            sha: z.string(),
          }),
        )
        .optional()
        .nullable(),
      repository: z.object({
        archive_url: z.string(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        languages_url: z.string(),
        merges_url: z.string(),
        milestones_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        private: z.boolean(),
        pulls_url: z.string(),
        releases_url: z.string(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        trees_url: z.string(),
        url: z.string(),
      }),
      rerun_url: z.string(),
      run_attempt: z.number(),
      run_number: z.number(),
      run_started_at: z.string(),
      status: z.union([
        z.literal('requested'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('queued'),
        z.literal('pending'),
        z.literal('waiting'),
      ]),
      triggering_actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      updated_at: z.string(),
      url: z.string(),
      workflow_id: z.number(),
      workflow_url: z.string(),
    })
    .and(
      z.object({
        actor: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        artifacts_url: z.string().optional(),
        cancel_url: z.string().optional(),
        check_suite_id: z.number().optional(),
        check_suite_node_id: z.string().optional(),
        check_suite_url: z.string().optional(),
        conclusion: z.union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
          z.literal('skipped'),
        ]),
        created_at: z.string().optional(),
        event: z.string().optional(),
        head_branch: z.string().optional().nullable(),
        head_commit: z
          .object({
            author: z
              .object({
                email: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
            committer: z
              .object({
                email: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
            id: z.string().optional(),
            message: z.string().optional(),
            timestamp: z.string().optional(),
            tree_id: z.string().optional(),
          })
          .optional(),
        head_repository: z
          .object({
            archive_url: z.string().optional(),
            assignees_url: z.string().optional(),
            blobs_url: z.string().optional(),
            branches_url: z.string().optional(),
            collaborators_url: z.string().optional(),
            comments_url: z.string().optional(),
            commits_url: z.string().optional(),
            compare_url: z.string().optional(),
            contents_url: z.string().optional(),
            contributors_url: z.string().optional(),
            deployments_url: z.string().optional(),
            description: z.string().optional().nullable(),
            downloads_url: z.string().optional(),
            events_url: z.string().optional(),
            fork: z.boolean().optional(),
            forks_url: z.string().optional(),
            full_name: z.string().optional(),
            git_commits_url: z.string().optional(),
            git_refs_url: z.string().optional(),
            git_tags_url: z.string().optional(),
            hooks_url: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            issue_comment_url: z.string().optional(),
            issue_events_url: z.string().optional(),
            issues_url: z.string().optional(),
            keys_url: z.string().optional(),
            labels_url: z.string().optional(),
            languages_url: z.string().optional(),
            merges_url: z.string().optional(),
            milestones_url: z.string().optional(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            notifications_url: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
            private: z.boolean().optional(),
            pulls_url: z.string().optional(),
            releases_url: z.string().optional(),
            stargazers_url: z.string().optional(),
            statuses_url: z.string().optional(),
            subscribers_url: z.string().optional(),
            subscription_url: z.string().optional(),
            tags_url: z.string().optional(),
            teams_url: z.string().optional(),
            trees_url: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        head_sha: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        jobs_url: z.string().optional(),
        logs_url: z.string().optional(),
        name: z.string().optional().nullable(),
        node_id: z.string().optional(),
        path: z.string().optional(),
        previous_attempt_url: z.string().optional().nullable(),
        pull_requests: z.array(z.record(z.unknown()).nullable()).optional(),
        referenced_workflows: z
          .array(
            z.object({
              path: z.string(),
              ref: z.string().optional(),
              sha: z.string(),
            }),
          )
          .optional()
          .nullable(),
        repository: z
          .object({
            archive_url: z.string().optional(),
            assignees_url: z.string().optional(),
            blobs_url: z.string().optional(),
            branches_url: z.string().optional(),
            collaborators_url: z.string().optional(),
            comments_url: z.string().optional(),
            commits_url: z.string().optional(),
            compare_url: z.string().optional(),
            contents_url: z.string().optional(),
            contributors_url: z.string().optional(),
            deployments_url: z.string().optional(),
            description: z.string().optional().nullable(),
            downloads_url: z.string().optional(),
            events_url: z.string().optional(),
            fork: z.boolean().optional(),
            forks_url: z.string().optional(),
            full_name: z.string().optional(),
            git_commits_url: z.string().optional(),
            git_refs_url: z.string().optional(),
            git_tags_url: z.string().optional(),
            hooks_url: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            issue_comment_url: z.string().optional(),
            issue_events_url: z.string().optional(),
            issues_url: z.string().optional(),
            keys_url: z.string().optional(),
            labels_url: z.string().optional(),
            languages_url: z.string().optional(),
            merges_url: z.string().optional(),
            milestones_url: z.string().optional(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            notifications_url: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
            private: z.boolean().optional(),
            pulls_url: z.string().optional(),
            releases_url: z.string().optional(),
            stargazers_url: z.string().optional(),
            statuses_url: z.string().optional(),
            subscribers_url: z.string().optional(),
            subscription_url: z.string().optional(),
            tags_url: z.string().optional(),
            teams_url: z.string().optional(),
            trees_url: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        rerun_url: z.string().optional(),
        run_attempt: z.number().optional(),
        run_number: z.number().optional(),
        run_started_at: z.string().optional(),
        status: z.string().optional(),
        triggering_actor: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional()
          .nullable(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        workflow_id: z.number().optional(),
        workflow_url: z.string().optional(),
      }),
    ),
});

export const webhookWorkflowRunInProgressSchema = z.object({
  action: z.literal('in_progress'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z
    .object({
      badge_url: z.string(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      state: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .nullable(),
  workflow_run: z
    .object({
      actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      artifacts_url: z.string(),
      cancel_url: z.string(),
      check_suite_id: z.number(),
      check_suite_node_id: z.string(),
      check_suite_url: z.string(),
      conclusion: z
        .union([
          z.literal('success'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('cancelled'),
          z.literal('timed_out'),
          z.literal('action_required'),
          z.literal('stale'),
          z.literal('skipped'),
        ])
        .nullable(),
      created_at: z.string(),
      event: z.string(),
      head_branch: z.string().nullable(),
      head_commit: z.object({
        author: z.object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        }),
        committer: z.object({
          date: z.string().optional(),
          email: z.string().nullable(),
          name: z.string(),
          username: z.string().optional(),
        }),
        id: z.string(),
        message: z.string(),
        timestamp: z.string(),
        tree_id: z.string(),
      }),
      head_repository: z.object({
        archive_url: z.string(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        languages_url: z.string(),
        merges_url: z.string(),
        milestones_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        private: z.boolean(),
        pulls_url: z.string(),
        releases_url: z.string(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        trees_url: z.string(),
        url: z.string(),
      }),
      head_sha: z.string(),
      html_url: z.string(),
      id: z.number(),
      jobs_url: z.string(),
      logs_url: z.string(),
      name: z.string().nullable(),
      node_id: z.string(),
      path: z.string(),
      previous_attempt_url: z.string().nullable(),
      pull_requests: z.array(
        z.object({
          base: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          head: z.object({
            ref: z.string(),
            repo: z.object({
              id: z.number(),
              name: z.string(),
              url: z.string(),
            }),
            sha: z.string(),
          }),
          id: z.number(),
          number: z.number(),
          url: z.string(),
        }),
      ),
      referenced_workflows: z
        .array(
          z.object({
            path: z.string(),
            ref: z.string().optional(),
            sha: z.string(),
          }),
        )
        .optional()
        .nullable(),
      repository: z.object({
        archive_url: z.string(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        languages_url: z.string(),
        merges_url: z.string(),
        milestones_url: z.string(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        owner: z
          .object({
            avatar_url: z.string().optional(),
            deleted: z.boolean().optional(),
            email: z.string().optional().nullable(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number(),
            login: z.string(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
            url: z.string().optional(),
          })
          .nullable(),
        private: z.boolean(),
        pulls_url: z.string(),
        releases_url: z.string(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        trees_url: z.string(),
        url: z.string(),
      }),
      rerun_url: z.string(),
      run_attempt: z.number(),
      run_number: z.number(),
      run_started_at: z.string(),
      status: z.union([
        z.literal('requested'),
        z.literal('in_progress'),
        z.literal('completed'),
        z.literal('queued'),
        z.literal('pending'),
      ]),
      triggering_actor: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      updated_at: z.string(),
      url: z.string(),
      workflow_id: z.number(),
      workflow_url: z.string(),
    })
    .and(
      z.object({
        actor: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        artifacts_url: z.string().optional(),
        cancel_url: z.string().optional(),
        check_suite_id: z.number().optional(),
        check_suite_node_id: z.string().optional(),
        check_suite_url: z.string().optional(),
        conclusion: z
          .union([
            z.literal('success'),
            z.literal('failure'),
            z.literal('neutral'),
            z.literal('cancelled'),
            z.literal('timed_out'),
            z.literal('action_required'),
            z.literal('skipped'),
            z.literal('stale'),
          ])
          .nullable(),
        created_at: z.string().optional(),
        event: z.string().optional(),
        head_branch: z.string().optional().nullable(),
        head_commit: z
          .object({
            author: z
              .object({
                email: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
            committer: z
              .object({
                email: z.string().optional(),
                name: z.string().optional(),
              })
              .optional(),
            id: z.string().optional(),
            message: z.string().optional(),
            timestamp: z.string().optional(),
            tree_id: z.string().optional(),
          })
          .optional(),
        head_repository: z
          .object({
            archive_url: z.string().optional(),
            assignees_url: z.string().optional(),
            blobs_url: z.string().optional(),
            branches_url: z.string().optional(),
            collaborators_url: z.string().optional(),
            comments_url: z.string().optional(),
            commits_url: z.string().optional(),
            compare_url: z.string().optional(),
            contents_url: z.string().optional(),
            contributors_url: z.string().optional(),
            deployments_url: z.string().optional(),
            description: z.string().optional().nullable(),
            downloads_url: z.string().optional(),
            events_url: z.string().optional(),
            fork: z.boolean().optional(),
            forks_url: z.string().optional(),
            full_name: z.string().optional(),
            git_commits_url: z.string().optional(),
            git_refs_url: z.string().optional(),
            git_tags_url: z.string().optional(),
            hooks_url: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            issue_comment_url: z.string().optional(),
            issue_events_url: z.string().optional(),
            issues_url: z.string().optional(),
            keys_url: z.string().optional(),
            labels_url: z.string().optional(),
            languages_url: z.string().optional(),
            merges_url: z.string().optional(),
            milestones_url: z.string().optional(),
            name: z.string().optional().nullable(),
            node_id: z.string().optional(),
            notifications_url: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
            private: z.boolean().optional(),
            pulls_url: z.string().optional(),
            releases_url: z.string().optional(),
            stargazers_url: z.string().optional(),
            statuses_url: z.string().optional(),
            subscribers_url: z.string().optional(),
            subscription_url: z.string().optional(),
            tags_url: z.string().optional(),
            teams_url: z.string().optional(),
            trees_url: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        head_sha: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number().optional(),
        jobs_url: z.string().optional(),
        logs_url: z.string().optional(),
        name: z.string().optional().nullable(),
        node_id: z.string().optional(),
        path: z.string().optional(),
        previous_attempt_url: z.string().optional().nullable(),
        pull_requests: z.array(z.record(z.unknown()).nullable()).optional(),
        referenced_workflows: z
          .array(
            z.object({
              path: z.string(),
              ref: z.string().optional(),
              sha: z.string(),
            }),
          )
          .optional()
          .nullable(),
        repository: z
          .object({
            archive_url: z.string().optional(),
            assignees_url: z.string().optional(),
            blobs_url: z.string().optional(),
            branches_url: z.string().optional(),
            collaborators_url: z.string().optional(),
            comments_url: z.string().optional(),
            commits_url: z.string().optional(),
            compare_url: z.string().optional(),
            contents_url: z.string().optional(),
            contributors_url: z.string().optional(),
            deployments_url: z.string().optional(),
            description: z.string().optional().nullable(),
            downloads_url: z.string().optional(),
            events_url: z.string().optional(),
            fork: z.boolean().optional(),
            forks_url: z.string().optional(),
            full_name: z.string().optional(),
            git_commits_url: z.string().optional(),
            git_refs_url: z.string().optional(),
            git_tags_url: z.string().optional(),
            hooks_url: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            issue_comment_url: z.string().optional(),
            issue_events_url: z.string().optional(),
            issues_url: z.string().optional(),
            keys_url: z.string().optional(),
            labels_url: z.string().optional(),
            languages_url: z.string().optional(),
            merges_url: z.string().optional(),
            milestones_url: z.string().optional(),
            name: z.string().optional(),
            node_id: z.string().optional(),
            notifications_url: z.string().optional(),
            owner: z
              .object({
                avatar_url: z.string().optional(),
                events_url: z.string().optional(),
                followers_url: z.string().optional(),
                following_url: z.string().optional(),
                gists_url: z.string().optional(),
                gravatar_id: z.string().optional(),
                html_url: z.string().optional(),
                id: z.number().optional(),
                login: z.string().optional(),
                node_id: z.string().optional(),
                organizations_url: z.string().optional(),
                received_events_url: z.string().optional(),
                repos_url: z.string().optional(),
                site_admin: z.boolean().optional(),
                starred_url: z.string().optional(),
                subscriptions_url: z.string().optional(),
                type: z.string().optional(),
                url: z.string().optional(),
              })
              .optional(),
            private: z.boolean().optional(),
            pulls_url: z.string().optional(),
            releases_url: z.string().optional(),
            stargazers_url: z.string().optional(),
            statuses_url: z.string().optional(),
            subscribers_url: z.string().optional(),
            subscription_url: z.string().optional(),
            tags_url: z.string().optional(),
            teams_url: z.string().optional(),
            trees_url: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        rerun_url: z.string().optional(),
        run_attempt: z.number().optional(),
        run_number: z.number().optional(),
        run_started_at: z.string().optional(),
        status: z.string().optional(),
        triggering_actor: z
          .object({
            avatar_url: z.string().optional(),
            events_url: z.string().optional(),
            followers_url: z.string().optional(),
            following_url: z.string().optional(),
            gists_url: z.string().optional(),
            gravatar_id: z.string().optional(),
            html_url: z.string().optional(),
            id: z.number().optional(),
            login: z.string().optional(),
            node_id: z.string().optional(),
            organizations_url: z.string().optional(),
            received_events_url: z.string().optional(),
            repos_url: z.string().optional(),
            site_admin: z.boolean().optional(),
            starred_url: z.string().optional(),
            subscriptions_url: z.string().optional(),
            type: z.string().optional(),
            url: z.string().optional(),
          })
          .optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        workflow_id: z.number().optional(),
        workflow_url: z.string().optional(),
      }),
    ),
});

export const webhookWorkflowRunRequestedSchema = z.object({
  action: z.literal('requested'),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
  workflow: z
    .object({
      badge_url: z.string(),
      created_at: z.string(),
      html_url: z.string(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      path: z.string(),
      state: z.string(),
      updated_at: z.string(),
      url: z.string(),
    })
    .nullable(),
  workflow_run: z.object({
    actor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    artifacts_url: z.string(),
    cancel_url: z.string(),
    check_suite_id: z.number(),
    check_suite_node_id: z.string(),
    check_suite_url: z.string(),
    conclusion: z
      .union([
        z.literal('success'),
        z.literal('failure'),
        z.literal('neutral'),
        z.literal('cancelled'),
        z.literal('timed_out'),
        z.literal('action_required'),
        z.literal('stale'),
        z.literal('skipped'),
        z.literal('startup_failure'),
      ])
      .nullable(),
    created_at: z.string(),
    display_title: z.string(),
    event: z.string(),
    head_branch: z.string().nullable(),
    head_commit: z.object({
      author: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      committer: z.object({
        date: z.string().optional(),
        email: z.string().nullable(),
        name: z.string(),
        username: z.string().optional(),
      }),
      id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      tree_id: z.string(),
    }),
    head_repository: z.object({
      archive_url: z.string(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      languages_url: z.string(),
      merges_url: z.string(),
      milestones_url: z.string(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      private: z.boolean(),
      pulls_url: z.string(),
      releases_url: z.string(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      trees_url: z.string(),
      url: z.string(),
    }),
    head_sha: z.string(),
    html_url: z.string(),
    id: z.number(),
    jobs_url: z.string(),
    logs_url: z.string(),
    name: z.string().nullable(),
    node_id: z.string(),
    path: z.string(),
    previous_attempt_url: z.string().nullable(),
    pull_requests: z.array(
      z.object({
        base: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        head: z.object({
          ref: z.string(),
          repo: z.object({
            id: z.number(),
            name: z.string(),
            url: z.string(),
          }),
          sha: z.string(),
        }),
        id: z.number(),
        number: z.number(),
        url: z.string(),
      }),
    ),
    referenced_workflows: z
      .array(
        z.object({
          path: z.string(),
          ref: z.string().optional(),
          sha: z.string(),
        }),
      )
      .optional()
      .nullable(),
    repository: z.object({
      archive_url: z.string(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      languages_url: z.string(),
      merges_url: z.string(),
      milestones_url: z.string(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      owner: z
        .object({
          avatar_url: z.string().optional(),
          deleted: z.boolean().optional(),
          email: z.string().optional().nullable(),
          events_url: z.string().optional(),
          followers_url: z.string().optional(),
          following_url: z.string().optional(),
          gists_url: z.string().optional(),
          gravatar_id: z.string().optional(),
          html_url: z.string().optional(),
          id: z.number(),
          login: z.string(),
          name: z.string().optional(),
          node_id: z.string().optional(),
          organizations_url: z.string().optional(),
          received_events_url: z.string().optional(),
          repos_url: z.string().optional(),
          site_admin: z.boolean().optional(),
          starred_url: z.string().optional(),
          subscriptions_url: z.string().optional(),
          type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
          url: z.string().optional(),
        })
        .nullable(),
      private: z.boolean(),
      pulls_url: z.string(),
      releases_url: z.string(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      trees_url: z.string(),
      url: z.string(),
    }),
    rerun_url: z.string(),
    run_attempt: z.number(),
    run_number: z.number(),
    run_started_at: z.string(),
    status: z.union([
      z.literal('requested'),
      z.literal('in_progress'),
      z.literal('completed'),
      z.literal('queued'),
      z.literal('pending'),
      z.literal('waiting'),
    ]),
    triggering_actor: z
      .object({
        avatar_url: z.string().optional(),
        deleted: z.boolean().optional(),
        email: z.string().optional().nullable(),
        events_url: z.string().optional(),
        followers_url: z.string().optional(),
        following_url: z.string().optional(),
        gists_url: z.string().optional(),
        gravatar_id: z.string().optional(),
        html_url: z.string().optional(),
        id: z.number(),
        login: z.string(),
        name: z.string().optional(),
        node_id: z.string().optional(),
        organizations_url: z.string().optional(),
        received_events_url: z.string().optional(),
        repos_url: z.string().optional(),
        site_admin: z.boolean().optional(),
        starred_url: z.string().optional(),
        subscriptions_url: z.string().optional(),
        type: z.union([z.literal('Bot'), z.literal('User'), z.literal('Organization')]).optional(),
        url: z.string().optional(),
      })
      .nullable(),
    updated_at: z.string(),
    url: z.string(),
    workflow_id: z.number(),
    workflow_url: z.string(),
  }),
});

export const workflowSchema = z.object({
  badge_url: z.string(),
  created_at: z.string(),
  deleted_at: z.string().optional(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  path: z.string(),
  state: z.union([
    z.literal('active'),
    z.literal('deleted'),
    z.literal('disabled_fork'),
    z.literal('disabled_inactivity'),
    z.literal('disabled_manually'),
  ]),
  updated_at: z.string(),
  url: z.string(),
});

export const state12Schema = z.union([
  z.literal('active'),
  z.literal('deleted'),
  z.literal('disabled_fork'),
  z.literal('disabled_inactivity'),
  z.literal('disabled_manually'),
]);

export const workflowRunSchema = z.object({
  actor: simpleUserSchema.optional(),
  artifacts_url: z.string(),
  cancel_url: z.string(),
  check_suite_id: z.number().optional(),
  check_suite_node_id: z.string().optional(),
  check_suite_url: z.string(),
  conclusion: z.string().nullable(),
  created_at: z.string(),
  display_title: z.string(),
  event: z.string(),
  head_branch: z.string().nullable(),
  head_commit: nullableSimpleCommitSchema,
  head_repository: minimalRepositorySchema,
  head_repository_id: z.number().optional(),
  head_sha: z.string(),
  html_url: z.string(),
  id: z.number(),
  jobs_url: z.string(),
  logs_url: z.string(),
  name: z.string().optional().nullable(),
  node_id: z.string(),
  path: z.string(),
  previous_attempt_url: z.string().optional().nullable(),
  pull_requests: z.array(pullRequestMinimalSchema).nullable(),
  referenced_workflows: z.array(referencedWorkflowSchema).optional().nullable(),
  repository: minimalRepositorySchema,
  rerun_url: z.string(),
  run_attempt: z.number().optional(),
  run_number: z.number(),
  run_started_at: z.string().optional(),
  status: z.string().nullable(),
  triggering_actor: simpleUserSchema.optional(),
  updated_at: z.string(),
  url: z.string(),
  workflow_id: z.number(),
  workflow_url: z.string(),
});

export const workflowRunUsageSchema = z.object({
  billable: z.object({
    MACOS: z
      .object({
        job_runs: z
          .array(
            z.object({
              duration_ms: z.number(),
              job_id: z.number(),
            }),
          )
          .optional(),
        jobs: z.number(),
        total_ms: z.number(),
      })
      .optional(),
    UBUNTU: z
      .object({
        job_runs: z
          .array(
            z.object({
              duration_ms: z.number(),
              job_id: z.number(),
            }),
          )
          .optional(),
        jobs: z.number(),
        total_ms: z.number(),
      })
      .optional(),
    WINDOWS: z
      .object({
        job_runs: z
          .array(
            z.object({
              duration_ms: z.number(),
              job_id: z.number(),
            }),
          )
          .optional(),
        jobs: z.number(),
        total_ms: z.number(),
      })
      .optional(),
  }),
  run_duration_ms: z.number().optional(),
});

export const workflowUsageSchema = z.object({
  billable: z.object({
    MACOS: z
      .object({
        total_ms: z.number().optional(),
      })
      .optional(),
    UBUNTU: z
      .object({
        total_ms: z.number().optional(),
      })
      .optional(),
    WINDOWS: z
      .object({
        total_ms: z.number().optional(),
      })
      .optional(),
  }),
});

export const metaRootResponseSchema = rootSchema;

export const metaRootErrorSchema = z.unknown();

export const appsGetAuthenticatedResponseSchema = integrationSchema;

export const appsGetAuthenticatedErrorSchema = z.unknown();

export const appsCreateFromManifestDataSchema = z.object({
  path: z.object({
    code: z.string(),
  }),
});

export const appsCreateFromManifestResponseSchema = integrationSchema.and(
  z.record(z.union([z.unknown(), z.string()])).and(
    z.object({
      client_id: z.string(),
      client_secret: z.string(),
      pem: z.string(),
      webhook_secret: z.string().nullable(),
    }),
  ),
);

export const appsCreateFromManifestErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const appsGetWebhookConfigForAppResponseSchema = webhookConfigSchema;

export const appsGetWebhookConfigForAppErrorSchema = z.unknown();

export const appsUpdateWebhookConfigForAppDataSchema = z.object({
  body: z.object({
    content_type: webhookConfigContentTypeSchema.optional(),
    insecure_ssl: webhookConfigInsecureSslSchema.optional(),
    secret: webhookConfigSecretSchema.optional(),
    url: webhookConfigUrlSchema.optional(),
  }),
});

export const appsUpdateWebhookConfigForAppResponseSchema = webhookConfigSchema;

export const appsUpdateWebhookConfigForAppErrorSchema = z.unknown();

export const appsListWebhookDeliveriesDataSchema = z.object({
  query: z
    .object({
      cursor: z.string().optional(),
      per_page: z.number().optional(),
      redelivery: z.boolean().optional(),
    })
    .optional(),
});

export const appsListWebhookDeliveriesResponseSchema = z.array(hookDeliveryItemSchema);

export const appsListWebhookDeliveriesErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsGetWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
  }),
});

export const appsGetWebhookDeliveryResponseSchema = hookDeliverySchema;

export const appsGetWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsRedeliverWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
  }),
});

export const appsRedeliverWebhookDeliveryResponseSchema = z.record(z.unknown());

export const appsRedeliverWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsListInstallationsDataSchema = z.object({
  query: z
    .object({
      outdated: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const appsListInstallationsResponseSchema = z.array(installationSchema);

export const appsListInstallationsErrorSchema = z.unknown();

export const appsDeleteInstallationDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
  }),
});

export const appsDeleteInstallationResponseSchema = z.void();

export const appsDeleteInstallationErrorSchema = basicErrorSchema;

export const appsGetInstallationDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
  }),
});

export const appsGetInstallationResponseSchema = installationSchema;

export const appsGetInstallationErrorSchema = basicErrorSchema;

export const appsCreateInstallationAccessTokenDataSchema = z.object({
  body: z
    .object({
      permissions: appPermissionsSchema.optional(),
      repositories: z.array(z.string()).optional(),
      repository_ids: z.array(z.number()).optional(),
    })
    .optional(),
  path: z.object({
    installation_id: z.number(),
  }),
});

export const appsCreateInstallationAccessTokenResponseSchema = installationTokenSchema;

export const appsCreateInstallationAccessTokenErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsUnsuspendInstallationDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
  }),
});

export const appsUnsuspendInstallationResponseSchema = z.void();

export const appsUnsuspendInstallationErrorSchema = basicErrorSchema;

export const appsSuspendInstallationDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
  }),
});

export const appsSuspendInstallationResponseSchema = z.void();

export const appsSuspendInstallationErrorSchema = basicErrorSchema;

export const appsDeleteAuthorizationDataSchema = z.object({
  body: z.object({
    access_token: z.string(),
  }),
  path: z.object({
    client_id: z.string(),
  }),
});

export const appsDeleteAuthorizationResponseSchema = z.void();

export const appsDeleteAuthorizationErrorSchema = validationErrorSchema;

export const appsDeleteTokenDataSchema = z.object({
  body: z.object({
    access_token: z.string(),
  }),
  path: z.object({
    client_id: z.string(),
  }),
});

export const appsDeleteTokenResponseSchema = z.void();

export const appsDeleteTokenErrorSchema = validationErrorSchema;

export const appsResetTokenDataSchema = z.object({
  body: z.object({
    access_token: z.string(),
  }),
  path: z.object({
    client_id: z.string(),
  }),
});

export const authorizationSchema = z.object({
  app: z.object({
    client_id: z.string(),
    name: z.string(),
    url: z.string(),
  }),
  created_at: z.string(),
  expires_at: z.string().nullable(),
  fingerprint: z.string().nullable(),
  hashed_token: z.string().nullable(),
  id: z.number(),
  installation: nullableScopedInstallationSchema.optional(),
  note: z.string().nullable(),
  note_url: z.string().nullable(),
  scopes: z.array(z.string()).nullable(),
  token: z.string(),
  token_last_eight: z.string().nullable(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema.optional(),
});

export const appsResetTokenErrorSchema = validationErrorSchema;

export const appsCheckTokenDataSchema = z.object({
  body: z.object({
    access_token: z.string(),
  }),
  path: z.object({
    client_id: z.string(),
  }),
});

export const appsCheckTokenResponseSchema = authorizationSchema;

export const appsCheckTokenErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsScopeTokenDataSchema = z.object({
  body: z.object({
    access_token: z.string(),
    permissions: appPermissionsSchema.optional(),
    repositories: z.array(z.string()).optional(),
    repository_ids: z.array(z.number()).optional(),
    target: z.string().optional(),
    target_id: z.number().optional(),
  }),
  path: z.object({
    client_id: z.string(),
  }),
});

export const appsScopeTokenResponseSchema = authorizationSchema;

export const appsScopeTokenErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsGetBySlugDataSchema = z.object({
  path: z.object({
    app_slug: z.string(),
  }),
});

export const appsGetBySlugResponseSchema = integrationSchema;

export const appsGetBySlugErrorSchema = basicErrorSchema;

export const codesOfConductGetAllCodesOfConductResponseSchema = z.array(codeOfConductSchema);

export const codesOfConductGetAllCodesOfConductErrorSchema = z.unknown();

export const codesOfConductGetConductCodeDataSchema = z.object({
  path: z.object({
    key: z.string(),
  }),
});

export const codesOfConductGetConductCodeResponseSchema = codeOfConductSchema;

export const codesOfConductGetConductCodeErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const emojisGetResponseSchema = z.record(z.string());

export const emojisGetErrorSchema = z.unknown();

export const dependabotListAlertsForEnterpriseDataSchema = z.object({
  path: z.object({
    enterprise: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      ecosystem: z.string().optional(),
      first: z.number().optional(),
      last: z.number().optional(),
      package: z.string().optional(),
      per_page: z.number().optional(),
      scope: z.union([z.literal('development'), z.literal('runtime')]).optional(),
      severity: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.string().optional(),
    })
    .optional(),
});

export const dependabotListAlertsForEnterpriseResponseSchema = z.array(dependabotAlertWithRepositorySchema);

export const dependabotListAlertsForEnterpriseErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const secretScanningListAlertsForEnterpriseDataSchema = z.object({
  path: z.object({
    enterprise: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      per_page: z.number().optional(),
      resolution: z.string().optional(),
      secret_type: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.union([z.literal('open'), z.literal('resolved')]).optional(),
    })
    .optional(),
});

export const organizationSecretScanningAlertSchema = z.object({
  created_at: alertCreatedAtSchema.optional(),
  html_url: alertHtmlUrlSchema.optional(),
  locations_url: z.string().optional(),
  number: alertNumberSchema.optional(),
  push_protection_bypassed: z.boolean().optional().nullable(),
  push_protection_bypassed_at: z.string().optional().nullable(),
  push_protection_bypassed_by: nullableSimpleUserSchema.optional(),
  repository: simpleRepositorySchema.optional(),
  resolution: secretScanningAlertResolutionSchema.optional(),
  resolution_comment: z.string().optional().nullable(),
  resolved_at: z.string().optional().nullable(),
  resolved_by: nullableSimpleUserSchema.optional(),
  secret: z.string().optional(),
  secret_type: z.string().optional(),
  secret_type_display_name: z.string().optional(),
  state: secretScanningAlertStateSchema.optional(),
  updated_at: nullableAlertUpdatedAtSchema.optional(),
  url: alertUrlSchema.optional(),
});

export const secretScanningListAlertsForEnterpriseErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const activityListPublicEventsDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const eventSchema = z.object({
  actor: actorSchema,
  created_at: z.string().nullable(),
  id: z.string(),
  org: actorSchema.optional(),
  payload: z.object({
    action: z.string().optional(),
    comment: issueCommentSchema.optional(),
    issue: issueSchema.optional(),
    pages: z
      .array(
        z.object({
          action: z.string().optional(),
          html_url: z.string().optional(),
          page_name: z.string().optional(),
          sha: z.string().optional(),
          summary: z.string().optional().nullable(),
          title: z.string().optional(),
        }),
      )
      .optional(),
  }),
  public: z.boolean(),
  repo: z.object({
    id: z.number(),
    name: z.string(),
    url: z.string(),
  }),
  type: z.string().nullable(),
});

export const activityListPublicEventsErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const feedSchema = z.object({
  _links: z.object({
    current_user: linkWithTypeSchema.optional(),
    current_user_actor: linkWithTypeSchema.optional(),
    current_user_organization: linkWithTypeSchema.optional(),
    current_user_organizations: z.array(linkWithTypeSchema).optional(),
    current_user_public: linkWithTypeSchema.optional(),
    repository_discussions: linkWithTypeSchema.optional(),
    repository_discussions_category: linkWithTypeSchema.optional(),
    security_advisories: linkWithTypeSchema.optional(),
    timeline: linkWithTypeSchema,
    user: linkWithTypeSchema,
  }),
  current_user_actor_url: z.string().optional(),
  current_user_organization_url: z.string().optional(),
  current_user_organization_urls: z.array(z.string()).optional(),
  current_user_public_url: z.string().optional(),
  current_user_url: z.string().optional(),
  repository_discussions_category_url: z.string().optional(),
  repository_discussions_url: z.string().optional(),
  security_advisories_url: z.string().optional(),
  timeline_url: z.string(),
  user_url: z.string(),
});

export const activityGetFeedsErrorSchema = z.unknown();

export const gistsListDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const gistsListResponseSchema = z.array(baseGistSchema);

export const gistsListErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsCreateDataSchema = z.object({
  body: z.object({
    description: z.string().optional(),
    files: z.record(
      z.object({
        content: z.string(),
      }),
    ),
    public: z.union([z.boolean(), z.literal('true'), z.literal('false')]).optional(),
  }),
});

export const gistSimpleSchema = z.object({
  comments: z.number().optional(),
  comments_url: z.string().optional(),
  commits_url: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  files: z
    .record(
      z
        .object({
          content: z.string().optional(),
          filename: z.string().optional(),
          language: z.string().optional(),
          raw_url: z.string().optional(),
          size: z.number().optional(),
          truncated: z.boolean().optional(),
          type: z.string().optional(),
        })
        .nullable(),
    )
    .optional(),
  fork_of: z
    .object({
      comments: z.number(),
      comments_url: z.string(),
      commits_url: z.string(),
      created_at: z.string(),
      description: z.string().nullable(),
      files: z.record(
        z.object({
          filename: z.string().optional(),
          language: z.string().optional(),
          raw_url: z.string().optional(),
          size: z.number().optional(),
          type: z.string().optional(),
        }),
      ),
      forks: z.array(z.unknown()).optional(),
      forks_url: z.string(),
      git_pull_url: z.string(),
      git_push_url: z.string(),
      history: z.array(z.unknown()).optional(),
      html_url: z.string(),
      id: z.string(),
      node_id: z.string(),
      owner: nullableSimpleUserSchema.optional(),
      public: z.boolean(),
      truncated: z.boolean().optional(),
      updated_at: z.string(),
      url: z.string(),
      user: nullableSimpleUserSchema,
    })
    .optional()
    .nullable(),
  forks: z
    .array(
      z.object({
        created_at: z.string().optional(),
        id: z.string().optional(),
        updated_at: z.string().optional(),
        url: z.string().optional(),
        user: publicUserSchema.optional(),
      }),
    )
    .optional()
    .nullable(),
  forks_url: z.string().optional(),
  git_pull_url: z.string().optional(),
  git_push_url: z.string().optional(),
  history: z.array(gistHistorySchema).optional().nullable(),
  html_url: z.string().optional(),
  id: z.string().optional(),
  node_id: z.string().optional(),
  owner: simpleUserSchema.optional(),
  public: z.boolean().optional(),
  truncated: z.boolean().optional(),
  updated_at: z.string().optional(),
  url: z.string().optional(),
  user: z.string().optional().nullable(),
});

export const gistsCreateErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const gistsListPublicDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const gistsListPublicResponseSchema = z.array(baseGistSchema);

export const gistsListPublicErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const gistsListStarredDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const gistsListStarredResponseSchema = z.array(baseGistSchema);

export const gistsListStarredErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsDeleteDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsDeleteResponseSchema = z.void();

export const gistsDeleteErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsGetDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsGetResponseSchema = gistSimpleSchema;

export const gistsGetErrorSchema = z.union([
  z.unknown(),
  z.object({
    block: z
      .object({
        created_at: z.string().optional(),
        html_url: z.string().optional().nullable(),
        reason: z.string().optional(),
      })
      .optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
  basicErrorSchema,
]);

export const gistsUpdateDataSchema = z.object({
  body: z
    .union([
      z.unknown(),
      z.object({
        description: z.string().optional(),
        files: z
          .record(
            z
              .union([
                z.unknown(),
                z.record(z.unknown()),
                z.object({
                  content: z.string().optional(),
                  filename: z.string().optional().nullable(),
                }),
              ])
              .nullable(),
          )
          .optional(),
      }),
    ])
    .nullable(),
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsUpdateResponseSchema = gistSimpleSchema;

export const gistsUpdateErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gistsListCommentsDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const gistsListCommentsResponseSchema = z.array(gistCommentSchema);

export const gistsListCommentsErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsCreateCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsCreateCommentResponseSchema = gistCommentSchema;

export const gistsCreateCommentErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsDeleteCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    gist_id: z.string(),
  }),
});

export const gistsDeleteCommentResponseSchema = z.void();

export const gistsDeleteCommentErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsGetCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    gist_id: z.string(),
  }),
});

export const gistsGetCommentResponseSchema = gistCommentSchema;

export const gistsGetCommentErrorSchema = z.union([
  z.unknown(),
  z.object({
    block: z
      .object({
        created_at: z.string().optional(),
        html_url: z.string().optional().nullable(),
        reason: z.string().optional(),
      })
      .optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
  basicErrorSchema,
]);

export const gistsUpdateCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_id: z.number(),
    gist_id: z.string(),
  }),
});

export const gistsUpdateCommentResponseSchema = gistCommentSchema;

export const gistsUpdateCommentErrorSchema = basicErrorSchema;

export const gistsListCommitsDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const gistsListCommitsResponseSchema = z.array(gistCommitSchema);

export const gistsListCommitsErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsListForksDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const gistsListForksResponseSchema = z.array(gistSimpleSchema);

export const gistsListForksErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsForkDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsForkResponseSchema = baseGistSchema;

export const gistsForkErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const gistsUnstarDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsUnstarResponseSchema = z.void();

export const gistsUnstarErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsCheckIsStarredDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsCheckIsStarredResponseSchema = z.void();

export const gistsCheckIsStarredErrorSchema = z.union([z.unknown(), basicErrorSchema, z.record(z.unknown())]);

export const gistsStarDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
  }),
});

export const gistsStarResponseSchema = z.void();

export const gistsStarErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const gistsGetRevisionDataSchema = z.object({
  path: z.object({
    gist_id: z.string(),
    sha: z.string(),
  }),
});

export const gistsGetRevisionResponseSchema = gistSimpleSchema;

export const gistsGetRevisionErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitignoreGetAllTemplatesResponseSchema = z.array(z.string());

export const gitignoreGetAllTemplatesErrorSchema = z.unknown();

export const gitignoreGetTemplateDataSchema = z.object({
  path: z.object({
    name: z.string(),
  }),
});

export const gitignoreGetTemplateResponseSchema = gitignoreTemplateSchema;

export const gitignoreGetTemplateErrorSchema = z.unknown();

export const appsListReposAccessibleToInstallationDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListReposAccessibleToInstallationResponseSchema = z.object({
  repositories: z.array(repositorySchema),
  repository_selection: z.string().optional(),
  total_count: z.number(),
});

export const appsListReposAccessibleToInstallationErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsRevokeInstallationAccessTokenResponseSchema = z.void();

export const appsRevokeInstallationAccessTokenErrorSchema = z.unknown();

export const issuesListDataSchema = z.object({
  query: z
    .object({
      collab: z.boolean().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      filter: z
        .union([
          z.literal('assigned'),
          z.literal('created'),
          z.literal('mentioned'),
          z.literal('subscribed'),
          z.literal('repos'),
          z.literal('all'),
        ])
        .optional(),
      labels: z.string().optional(),
      orgs: z.boolean().optional(),
      owned: z.boolean().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      pulls: z.boolean().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated'), z.literal('comments')]).optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const issuesListResponseSchema = z.array(issueSchema);

export const issuesListErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const licensesGetAllCommonlyUsedDataSchema = z.object({
  query: z
    .object({
      featured: z.boolean().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const licensesGetAllCommonlyUsedResponseSchema = z.array(licenseSimpleSchema);

export const licensesGetAllCommonlyUsedErrorSchema = z.unknown();

export const licensesGetDataSchema = z.object({
  path: z.object({
    license: z.string(),
  }),
});

export const licensesGetResponseSchema = licenseSchema;

export const licensesGetErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const markdownRenderDataSchema = z.object({
  body: z.object({
    context: z.string().optional(),
    mode: z.union([z.literal('markdown'), z.literal('gfm')]).optional(),
    text: z.string(),
  }),
});

export const markdownRenderResponseSchema = z.string();

export const markdownRenderErrorSchema = z.unknown();

export const markdownRenderRawDataSchema = z.object({
  body: z.string().optional(),
});

export const markdownRenderRawResponseSchema = z.string();

export const markdownRenderRawErrorSchema = z.unknown();

export const appsGetSubscriptionPlanForAccountDataSchema = z.object({
  path: z.object({
    account_id: z.number(),
  }),
});

export const appsGetSubscriptionPlanForAccountResponseSchema = marketplacePurchaseSchema;

export const appsGetSubscriptionPlanForAccountErrorSchema = basicErrorSchema;

export const appsListPlansDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListPlansResponseSchema = z.array(marketplaceListingPlanSchema);

export const appsListPlansErrorSchema = basicErrorSchema;

export const appsListAccountsForPlanDataSchema = z.object({
  path: z.object({
    plan_id: z.number(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const appsListAccountsForPlanResponseSchema = z.array(marketplacePurchaseSchema);

export const appsListAccountsForPlanErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsGetSubscriptionPlanForAccountStubbedDataSchema = z.object({
  path: z.object({
    account_id: z.number(),
  }),
});

export const appsGetSubscriptionPlanForAccountStubbedResponseSchema = marketplacePurchaseSchema;

export const appsGetSubscriptionPlanForAccountStubbedErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const appsListPlansStubbedDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListPlansStubbedResponseSchema = z.array(marketplaceListingPlanSchema);

export const appsListPlansStubbedErrorSchema = basicErrorSchema;

export const appsListAccountsForPlanStubbedDataSchema = z.object({
  path: z.object({
    plan_id: z.number(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const appsListAccountsForPlanStubbedResponseSchema = z.array(marketplacePurchaseSchema);

export const appsListAccountsForPlanStubbedErrorSchema = basicErrorSchema;

export const metaGetResponseSchema = apiOverviewSchema;

export const metaGetErrorSchema = z.unknown();

export const activityListPublicEventsForRepoNetworkDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListPublicEventsForRepoNetworkResponseSchema = z.array(eventSchema);

export const activityListPublicEventsForRepoNetworkErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const activityListNotificationsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      all: z.boolean().optional(),
      before: z.string().optional(),
      page: z.number().optional(),
      participating: z.boolean().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const activityListNotificationsForAuthenticatedUserResponseSchema = z.array(threadSchema);

export const activityListNotificationsForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const activityMarkNotificationsAsReadDataSchema = z.object({
  body: z
    .object({
      last_read_at: z.string().optional(),
      read: z.boolean().optional(),
    })
    .optional(),
});

export const activityMarkNotificationsAsReadResponseSchema = z.union([
  z.object({
    message: z.string().optional(),
  }),
  z.unknown(),
]);

export const activityMarkNotificationsAsReadErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityGetThreadDataSchema = z.object({
  path: z.object({
    thread_id: z.number(),
  }),
});

export const activityGetThreadResponseSchema = threadSchema;

export const activityGetThreadErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityMarkThreadAsReadDataSchema = z.object({
  path: z.object({
    thread_id: z.number(),
  }),
});

export const activityMarkThreadAsReadResponseSchema = z.unknown();

export const activityMarkThreadAsReadErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityDeleteThreadSubscriptionDataSchema = z.object({
  path: z.object({
    thread_id: z.number(),
  }),
});

export const activityDeleteThreadSubscriptionResponseSchema = z.void();

export const activityDeleteThreadSubscriptionErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityGetThreadSubscriptionForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    thread_id: z.number(),
  }),
});

export const activityGetThreadSubscriptionForAuthenticatedUserResponseSchema = threadSubscriptionSchema;

export const activityGetThreadSubscriptionForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activitySetThreadSubscriptionDataSchema = z.object({
  body: z
    .object({
      ignored: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    thread_id: z.number(),
  }),
});

export const activitySetThreadSubscriptionResponseSchema = threadSubscriptionSchema;

export const activitySetThreadSubscriptionErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const metaGetOctocatDataSchema = z.object({
  query: z
    .object({
      s: z.string().optional(),
    })
    .optional(),
});

export const metaGetOctocatResponseSchema = z.string();

export const metaGetOctocatErrorSchema = z.unknown();

export const orgsListDataSchema = z.object({
  query: z
    .object({
      per_page: z.number().optional(),
      since: z.number().optional(),
    })
    .optional(),
});

export const orgsListResponseSchema = z.array(organizationSimpleSchema);

export const orgsListErrorSchema = z.unknown();

export const orgsGetDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const orgsGetResponseSchema = organizationFullSchema;

export const orgsGetErrorSchema = basicErrorSchema;

export const orgsUpdateDataSchema = z.object({
  body: z
    .object({
      advanced_security_enabled_for_new_repositories: z.boolean().optional(),
      billing_email: z.string().optional(),
      blog: z.string().optional(),
      company: z.string().optional(),
      default_repository_permission: z
        .union([z.literal('read'), z.literal('write'), z.literal('admin'), z.literal('none')])
        .optional(),
      dependabot_alerts_enabled_for_new_repositories: z.boolean().optional(),
      dependabot_security_updates_enabled_for_new_repositories: z.boolean().optional(),
      dependency_graph_enabled_for_new_repositories: z.boolean().optional(),
      description: z.string().optional(),
      email: z.string().optional(),
      has_organization_projects: z.boolean().optional(),
      has_repository_projects: z.boolean().optional(),
      location: z.string().optional(),
      members_allowed_repository_creation_type: z
        .union([z.literal('all'), z.literal('private'), z.literal('none')])
        .optional(),
      members_can_create_internal_repositories: z.boolean().optional(),
      members_can_create_pages: z.boolean().optional(),
      members_can_create_private_pages: z.boolean().optional(),
      members_can_create_private_repositories: z.boolean().optional(),
      members_can_create_public_pages: z.boolean().optional(),
      members_can_create_public_repositories: z.boolean().optional(),
      members_can_create_repositories: z.boolean().optional(),
      members_can_fork_private_repositories: z.boolean().optional(),
      name: z.string().optional(),
      secret_scanning_enabled_for_new_repositories: z.boolean().optional(),
      secret_scanning_push_protection_custom_link: z.string().optional(),
      secret_scanning_push_protection_custom_link_enabled: z.boolean().optional(),
      secret_scanning_push_protection_enabled_for_new_repositories: z.boolean().optional(),
      twitter_username: z.string().optional(),
      web_commit_signoff_required: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
  }),
});

export const orgsUpdateResponseSchema = organizationFullSchema;

export const orgsUpdateErrorSchema = z.union([
  basicErrorSchema,
  z.union([validationErrorSchema, validationErrorSimpleSchema]),
]);

export const actionsGetActionsCacheUsageForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsGetActionsCacheUsageForOrgResponseSchema = actionsCacheUsageOrgEnterpriseSchema;

export const actionsGetActionsCacheUsageForOrgErrorSchema = z.unknown();

export const actionsGetActionsCacheUsageByRepoForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsGetActionsCacheUsageByRepoForOrgResponseSchema = z.object({
  repository_cache_usages: z.array(actionsCacheUsageByRepositorySchema),
  total_count: z.number(),
});

export const actionsGetActionsCacheUsageByRepoForOrgErrorSchema = z.unknown();

export const oidcGetOidcCustomSubTemplateForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const oidcGetOidcCustomSubTemplateForOrgResponseSchema = oidcCustomSubSchema;

export const oidcGetOidcCustomSubTemplateForOrgErrorSchema = z.unknown();

export const oidcUpdateOidcCustomSubTemplateForOrgDataSchema = z.object({
  body: oidcCustomSubSchema,
  path: z.object({
    org: z.string(),
  }),
});

export const oidcUpdateOidcCustomSubTemplateForOrgResponseSchema = emptyObjectSchema;

export const oidcUpdateOidcCustomSubTemplateForOrgErrorSchema = basicErrorSchema;

export const actionsGetGithubActionsPermissionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsOrganizationPermissionsSchema = z.object({
  allowed_actions: allowedActionsSchema.optional(),
  enabled_repositories: enabledRepositoriesSchema,
  selected_actions_url: selectedActionsUrlSchema.optional(),
  selected_repositories_url: z.string().optional(),
});

export const actionsGetGithubActionsPermissionsOrganizationErrorSchema = z.unknown();

export const actionsSetGithubActionsPermissionsOrganizationDataSchema = z.object({
  body: z.object({
    allowed_actions: allowedActionsSchema.optional(),
    enabled_repositories: enabledRepositoriesSchema,
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsSetGithubActionsPermissionsOrganizationResponseSchema = z.void();

export const actionsSetGithubActionsPermissionsOrganizationErrorSchema = z.unknown();

export const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseSchema = z.object({
  repositories: z.array(repositorySchema),
  total_count: z.number(),
});

export const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationErrorSchema = z.unknown();

export const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseSchema = z.void();

export const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationErrorSchema = z.unknown();

export const actionsDisableSelectedRepositoryGithubActionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsDisableSelectedRepositoryGithubActionsOrganizationResponseSchema = z.void();

export const actionsDisableSelectedRepositoryGithubActionsOrganizationErrorSchema = z.unknown();

export const actionsEnableSelectedRepositoryGithubActionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsEnableSelectedRepositoryGithubActionsOrganizationResponseSchema = z.void();

export const actionsEnableSelectedRepositoryGithubActionsOrganizationErrorSchema = z.unknown();

export const actionsGetAllowedActionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsGetAllowedActionsOrganizationResponseSchema = selectedActionsSchema;

export const actionsGetAllowedActionsOrganizationErrorSchema = z.unknown();

export const actionsSetAllowedActionsOrganizationDataSchema = z.object({
  body: selectedActionsSchema.optional(),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsSetAllowedActionsOrganizationResponseSchema = z.void();

export const actionsSetAllowedActionsOrganizationErrorSchema = z.unknown();

export const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponseSchema =
  actionsGetDefaultWorkflowPermissionsSchema;

export const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationErrorSchema = z.unknown();

export const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationDataSchema = z.object({
  body: actionsSetDefaultWorkflowPermissionsSchema.optional(),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponseSchema = z.void();

export const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationErrorSchema = z.unknown();

export const actionsListRequiredWorkflowsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListRequiredWorkflowsResponseSchema = z.object({
  required_workflows: z.array(requiredWorkflowSchema),
  total_count: z.number(),
});

export const actionsListRequiredWorkflowsErrorSchema = z.unknown();

export const actionsCreateRequiredWorkflowDataSchema = z.object({
  body: z.object({
    repository_id: z.string(),
    scope: z.union([z.literal('selected'), z.literal('all')]).optional(),
    selected_repository_ids: z.array(z.number()).optional(),
    workflow_file_path: z.string(),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsCreateRequiredWorkflowResponseSchema = requiredWorkflowSchema;

export const actionsCreateRequiredWorkflowErrorSchema = validationErrorSimpleSchema;

export const actionsDeleteRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    required_workflow_id: z.number(),
  }),
});

export const actionsDeleteRequiredWorkflowResponseSchema = z.void();

export const actionsDeleteRequiredWorkflowErrorSchema = z.unknown();

export const actionsGetRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    required_workflow_id: z.number(),
  }),
});

export const actionsGetRequiredWorkflowResponseSchema = requiredWorkflowSchema;

export const actionsGetRequiredWorkflowErrorSchema = z.unknown();

export const actionsUpdateRequiredWorkflowDataSchema = z.object({
  body: z.object({
    repository_id: z.string().optional(),
    scope: z.union([z.literal('selected'), z.literal('all')]).optional(),
    selected_repository_ids: z.array(z.number()).optional(),
    workflow_file_path: z.string().optional(),
  }),
  path: z.object({
    org: z.string(),
    required_workflow_id: z.number(),
  }),
});

export const actionsUpdateRequiredWorkflowResponseSchema = requiredWorkflowSchema;

export const actionsUpdateRequiredWorkflowErrorSchema = validationErrorSimpleSchema;

export const actionsListSelectedRepositoriesRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    required_workflow_id: z.number(),
  }),
});

export const actionsListSelectedRepositoriesRequiredWorkflowResponseSchema = z.object({
  repositories: z.array(repositorySchema),
  total_count: z.number(),
});

export const actionsListSelectedRepositoriesRequiredWorkflowErrorSchema = z.unknown();

export const actionsSetSelectedReposToRequiredWorkflowDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    org: z.string(),
    required_workflow_id: z.number(),
  }),
});

export const actionsSetSelectedReposToRequiredWorkflowResponseSchema = z.void();

export const actionsSetSelectedReposToRequiredWorkflowErrorSchema = z.unknown();

export const actionsRemoveSelectedRepoFromRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    required_workflow_id: z.number(),
  }),
});

export const actionsRemoveSelectedRepoFromRequiredWorkflowResponseSchema = z.void();

export const actionsRemoveSelectedRepoFromRequiredWorkflowErrorSchema = z.unknown();

export const actionsAddSelectedRepoToRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    required_workflow_id: z.number(),
  }),
});

export const actionsAddSelectedRepoToRequiredWorkflowResponseSchema = z.void();

export const actionsAddSelectedRepoToRequiredWorkflowErrorSchema = z.unknown();

export const actionsListSelfHostedRunnersForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const runnerSchema = z.object({
  busy: z.boolean(),
  id: z.number(),
  labels: z.array(runnerLabelSchema),
  name: z.string(),
  os: z.string(),
  status: z.string(),
});

export const actionsListSelfHostedRunnersForOrgErrorSchema = z.unknown();

export const actionsListRunnerApplicationsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsListRunnerApplicationsForOrgResponseSchema = z.array(runnerApplicationSchema);

export const actionsListRunnerApplicationsForOrgErrorSchema = z.unknown();

export const actionsCreateRegistrationTokenForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const authenticationTokenSchema = z.object({
  expires_at: z.string(),
  permissions: z.record(z.unknown()).optional(),
  repositories: z.array(repositorySchema).optional(),
  repository_selection: z.union([z.literal('all'), z.literal('selected')]).optional(),
  single_file: z.string().optional().nullable(),
  token: z.string(),
});

export const actionsCreateRegistrationTokenForOrgErrorSchema = z.unknown();

export const actionsCreateRemoveTokenForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsCreateRemoveTokenForOrgResponseSchema = authenticationTokenSchema;

export const actionsCreateRemoveTokenForOrgErrorSchema = z.unknown();

export const actionsDeleteSelfHostedRunnerFromOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsDeleteSelfHostedRunnerFromOrgResponseSchema = z.void();

export const actionsDeleteSelfHostedRunnerFromOrgErrorSchema = z.unknown();

export const actionsGetSelfHostedRunnerForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsGetSelfHostedRunnerForOrgResponseSchema = runnerSchema;

export const actionsGetSelfHostedRunnerForOrgErrorSchema = z.unknown();

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgErrorSchema = basicErrorSchema;

export const actionsListLabelsForSelfHostedRunnerForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsListLabelsForSelfHostedRunnerForOrgResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsListLabelsForSelfHostedRunnerForOrgErrorSchema = basicErrorSchema;

export const actionsAddCustomLabelsToSelfHostedRunnerForOrgDataSchema = z.object({
  body: z.object({
    labels: z.array(z.string()),
  }),
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsAddCustomLabelsToSelfHostedRunnerForOrgResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsAddCustomLabelsToSelfHostedRunnerForOrgErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsSetCustomLabelsForSelfHostedRunnerForOrgDataSchema = z.object({
  body: z.object({
    labels: z.array(z.string()),
  }),
  path: z.object({
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsSetCustomLabelsForSelfHostedRunnerForOrgResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsSetCustomLabelsForSelfHostedRunnerForOrgErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsListOrgSecretsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListOrgSecretsResponseSchema = z.object({
  secrets: z.array(organizationActionsSecretSchema),
  total_count: z.number(),
});

export const actionsListOrgSecretsErrorSchema = z.unknown();

export const actionsGetOrgPublicKeyDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const actionsGetOrgPublicKeyResponseSchema = actionsPublicKeySchema;

export const actionsGetOrgPublicKeyErrorSchema = z.unknown();

export const actionsDeleteOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsDeleteOrgSecretResponseSchema = z.void();

export const actionsDeleteOrgSecretErrorSchema = z.unknown();

export const actionsGetOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsGetOrgSecretResponseSchema = organizationActionsSecretSchema;

export const actionsGetOrgSecretErrorSchema = z.unknown();

export const actionsCreateOrUpdateOrgSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    selected_repository_ids: z.array(z.number()).optional(),
    visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsCreateOrUpdateOrgSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const actionsCreateOrUpdateOrgSecretErrorSchema = z.unknown();

export const actionsListSelectedReposForOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListSelectedReposForOrgSecretResponseSchema = z.object({
  repositories: z.array(minimalRepositorySchema),
  total_count: z.number(),
});

export const actionsListSelectedReposForOrgSecretErrorSchema = z.unknown();

export const actionsSetSelectedReposForOrgSecretDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsSetSelectedReposForOrgSecretResponseSchema = z.void();

export const actionsSetSelectedReposForOrgSecretErrorSchema = z.unknown();

export const actionsRemoveSelectedRepoFromOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const actionsRemoveSelectedRepoFromOrgSecretResponseSchema = z.void();

export const actionsRemoveSelectedRepoFromOrgSecretErrorSchema = z.unknown();

export const actionsAddSelectedRepoToOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const actionsAddSelectedRepoToOrgSecretResponseSchema = z.void();

export const actionsAddSelectedRepoToOrgSecretErrorSchema = z.unknown();

export const actionsListOrgVariablesDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListOrgVariablesResponseSchema = z.object({
  total_count: z.number(),
  variables: z.array(organizationActionsVariableSchema),
});

export const actionsListOrgVariablesErrorSchema = z.unknown();

export const actionsCreateOrgVariableDataSchema = z.object({
  body: z.object({
    name: z.string(),
    selected_repository_ids: z.array(z.number()).optional(),
    value: z.string(),
    visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const actionsCreateOrgVariableResponseSchema = emptyObjectSchema;

export const actionsCreateOrgVariableErrorSchema = z.unknown();

export const actionsDeleteOrgVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
  }),
});

export const actionsDeleteOrgVariableResponseSchema = z.void();

export const actionsDeleteOrgVariableErrorSchema = z.unknown();

export const actionsGetOrgVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
  }),
});

export const actionsGetOrgVariableResponseSchema = organizationActionsVariableSchema;

export const actionsGetOrgVariableErrorSchema = z.unknown();

export const actionsUpdateOrgVariableDataSchema = z.object({
  body: z.object({
    name: z.string().optional(),
    selected_repository_ids: z.array(z.number()).optional(),
    value: z.string().optional(),
    visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]).optional(),
  }),
  path: z.object({
    name: z.string(),
    org: z.string(),
  }),
});

export const actionsUpdateOrgVariableResponseSchema = z.void();

export const actionsUpdateOrgVariableErrorSchema = z.unknown();

export const actionsListSelectedReposForOrgVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListSelectedReposForOrgVariableResponseSchema = z.object({
  repositories: z.array(minimalRepositorySchema),
  total_count: z.number(),
});

export const actionsListSelectedReposForOrgVariableErrorSchema = z.unknown();

export const actionsSetSelectedReposForOrgVariableDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    name: z.string(),
    org: z.string(),
  }),
});

export const actionsSetSelectedReposForOrgVariableResponseSchema = z.void();

export const actionsSetSelectedReposForOrgVariableErrorSchema = z.unknown();

export const actionsRemoveSelectedRepoFromOrgVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsRemoveSelectedRepoFromOrgVariableResponseSchema = z.void();

export const actionsRemoveSelectedRepoFromOrgVariableErrorSchema = z.unknown();

export const actionsAddSelectedRepoToOrgVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    org: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsAddSelectedRepoToOrgVariableResponseSchema = z.void();

export const actionsAddSelectedRepoToOrgVariableErrorSchema = z.unknown();

export const orgsListBlockedUsersDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListBlockedUsersResponseSchema = z.array(simpleUserSchema);

export const orgsListBlockedUsersErrorSchema = z.unknown();

export const orgsUnblockUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsUnblockUserResponseSchema = z.void();

export const orgsUnblockUserErrorSchema = z.unknown();

export const orgsCheckBlockedUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsCheckBlockedUserResponseSchema = z.void();

export const orgsCheckBlockedUserErrorSchema = basicErrorSchema;

export const orgsBlockUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsBlockUserResponseSchema = z.void();

export const orgsBlockUserErrorSchema = validationErrorSchema;

export const codeScanningListAlertsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      severity: codeScanningAlertSeveritySchema.optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: codeScanningAlertStateSchema.optional(),
      tool_guid: codeScanningAnalysisToolGuidSchema.optional(),
      tool_name: codeScanningAnalysisToolNameSchema.optional(),
    })
    .optional(),
});

export const codeScanningOrganizationAlertItemsSchema = z.object({
  created_at: alertCreatedAtSchema,
  dismissed_at: alertDismissedAtSchema,
  dismissed_by: nullableSimpleUserSchema,
  dismissed_comment: codeScanningAlertDismissedCommentSchema.optional(),
  dismissed_reason: codeScanningAlertDismissedReasonSchema,
  fixed_at: alertFixedAtSchema.optional(),
  html_url: alertHtmlUrlSchema,
  instances_url: alertInstancesUrlSchema,
  most_recent_instance: codeScanningAlertInstanceSchema,
  number: alertNumberSchema,
  repository: simpleRepositorySchema,
  rule: codeScanningAlertRuleSchema,
  state: codeScanningAlertStateSchema,
  tool: codeScanningAnalysisToolSchema,
  updated_at: alertUpdatedAtSchema.optional(),
  url: alertUrlSchema,
});

export const codeScanningListAlertsForOrgErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codespacesListInOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespaceSchema = z.object({
  billable_owner: simpleUserSchema,
  created_at: z.string(),
  devcontainer_path: z.string().optional().nullable(),
  display_name: z.string().optional().nullable(),
  environment_id: z.string().nullable(),
  git_status: z.object({
    ahead: z.number().optional(),
    behind: z.number().optional(),
    has_uncommitted_changes: z.boolean().optional(),
    has_unpushed_changes: z.boolean().optional(),
    ref: z.string().optional(),
  }),
  id: z.number(),
  idle_timeout_minutes: z.number().nullable(),
  idle_timeout_notice: z.string().optional().nullable(),
  last_known_stop_notice: z.string().optional().nullable(),
  last_used_at: z.string(),
  location: z.union([z.literal('EastUs'), z.literal('SouthEastAsia'), z.literal('WestEurope'), z.literal('WestUs2')]),
  machine: nullableCodespaceMachineSchema,
  machines_url: z.string(),
  name: z.string(),
  owner: simpleUserSchema,
  pending_operation: z.boolean().optional().nullable(),
  pending_operation_disabled_reason: z.string().optional().nullable(),
  prebuild: z.boolean().nullable(),
  publish_url: z.string().optional().nullable(),
  pulls_url: z.string().nullable(),
  recent_folders: z.array(z.string()),
  repository: minimalRepositorySchema,
  retention_expires_at: z.string().optional().nullable(),
  retention_period_minutes: z.number().optional().nullable(),
  runtime_constraints: z
    .object({
      allowed_port_privacy_settings: z.array(z.string()).optional().nullable(),
    })
    .optional(),
  start_url: z.string(),
  state: z.union([
    z.literal('Unknown'),
    z.literal('Created'),
    z.literal('Queued'),
    z.literal('Provisioning'),
    z.literal('Available'),
    z.literal('Awaiting'),
    z.literal('Unavailable'),
    z.literal('Deleted'),
    z.literal('Moved'),
    z.literal('Shutdown'),
    z.literal('Archived'),
    z.literal('Starting'),
    z.literal('ShuttingDown'),
    z.literal('Failed'),
    z.literal('Exporting'),
    z.literal('Updating'),
    z.literal('Rebuilding'),
  ]),
  stop_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
  web_url: z.string(),
});

export const codespacesListInOrganizationErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesSetCodespacesBillingDataSchema = z.object({
  body: z.object({
    selected_usernames: z.array(z.string()).optional(),
    visibility: z.union([
      z.literal('disabled'),
      z.literal('selected_members'),
      z.literal('all_members'),
      z.literal('all_members_and_outside_collaborators'),
    ]),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const codespacesSetCodespacesBillingResponseSchema = z.void();

export const codespacesSetCodespacesBillingErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const codespacesDeleteCodespacesBillingUsersDataSchema = z.object({
  body: z.object({
    selected_usernames: z.array(z.string()),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const codespacesDeleteCodespacesBillingUsersResponseSchema = z.void();

export const codespacesDeleteCodespacesBillingUsersErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const codespacesSetCodespacesBillingUsersDataSchema = z.object({
  body: z.object({
    selected_usernames: z.array(z.string()),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const codespacesSetCodespacesBillingUsersResponseSchema = z.void();

export const codespacesSetCodespacesBillingUsersErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const codespacesListOrgSecretsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListOrgSecretsResponseSchema = z.object({
  secrets: z.array(codespacesOrgSecretSchema),
  total_count: z.number(),
});

export const codespacesListOrgSecretsErrorSchema = z.unknown();

export const codespacesGetOrgPublicKeyDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const codespacesGetOrgPublicKeyResponseSchema = codespacesPublicKeySchema;

export const codespacesGetOrgPublicKeyErrorSchema = z.unknown();

export const codespacesDeleteOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesDeleteOrgSecretResponseSchema = z.void();

export const codespacesDeleteOrgSecretErrorSchema = basicErrorSchema;

export const codespacesGetOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesGetOrgSecretResponseSchema = codespacesOrgSecretSchema;

export const codespacesGetOrgSecretErrorSchema = z.unknown();

export const codespacesCreateOrUpdateOrgSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    selected_repository_ids: z.array(z.number()).optional(),
    visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesCreateOrUpdateOrgSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const codespacesCreateOrUpdateOrgSecretErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const codespacesListSelectedReposForOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListSelectedReposForOrgSecretResponseSchema = z.object({
  repositories: z.array(minimalRepositorySchema),
  total_count: z.number(),
});

export const codespacesListSelectedReposForOrgSecretErrorSchema = basicErrorSchema;

export const codespacesSetSelectedReposForOrgSecretDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesSetSelectedReposForOrgSecretResponseSchema = z.void();

export const codespacesSetSelectedReposForOrgSecretErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const codespacesRemoveSelectedRepoFromOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const codespacesRemoveSelectedRepoFromOrgSecretResponseSchema = z.void();

export const codespacesRemoveSelectedRepoFromOrgSecretErrorSchema = z.union([
  basicErrorSchema,
  z.unknown(),
  validationErrorSchema,
]);

export const codespacesAddSelectedRepoToOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const codespacesAddSelectedRepoToOrgSecretResponseSchema = z.void();

export const codespacesAddSelectedRepoToOrgSecretErrorSchema = z.union([
  basicErrorSchema,
  z.unknown(),
  validationErrorSchema,
]);

export const dependabotListAlertsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      ecosystem: z.string().optional(),
      first: z.number().optional(),
      last: z.number().optional(),
      package: z.string().optional(),
      per_page: z.number().optional(),
      scope: z.union([z.literal('development'), z.literal('runtime')]).optional(),
      severity: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.string().optional(),
    })
    .optional(),
});

export const dependabotListAlertsForOrgResponseSchema = z.array(dependabotAlertWithRepositorySchema);

export const dependabotListAlertsForOrgErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const dependabotListOrgSecretsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const dependabotListOrgSecretsResponseSchema = z.object({
  secrets: z.array(organizationDependabotSecretSchema),
  total_count: z.number(),
});

export const dependabotListOrgSecretsErrorSchema = z.unknown();

export const dependabotGetOrgPublicKeyDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const dependabotGetOrgPublicKeyResponseSchema = dependabotPublicKeySchema;

export const dependabotGetOrgPublicKeyErrorSchema = z.unknown();

export const dependabotDeleteOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotDeleteOrgSecretResponseSchema = z.void();

export const dependabotDeleteOrgSecretErrorSchema = z.unknown();

export const dependabotGetOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotGetOrgSecretResponseSchema = organizationDependabotSecretSchema;

export const dependabotGetOrgSecretErrorSchema = z.unknown();

export const dependabotCreateOrUpdateOrgSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    selected_repository_ids: z.array(z.string()).optional(),
    visibility: z.union([z.literal('all'), z.literal('private'), z.literal('selected')]),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotCreateOrUpdateOrgSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const dependabotCreateOrUpdateOrgSecretErrorSchema = z.unknown();

export const dependabotListSelectedReposForOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const dependabotListSelectedReposForOrgSecretResponseSchema = z.object({
  repositories: z.array(minimalRepositorySchema),
  total_count: z.number(),
});

export const dependabotListSelectedReposForOrgSecretErrorSchema = z.unknown();

export const dependabotSetSelectedReposForOrgSecretDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    org: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotSetSelectedReposForOrgSecretResponseSchema = z.void();

export const dependabotSetSelectedReposForOrgSecretErrorSchema = z.unknown();

export const dependabotRemoveSelectedRepoFromOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const dependabotRemoveSelectedRepoFromOrgSecretResponseSchema = z.void();

export const dependabotRemoveSelectedRepoFromOrgSecretErrorSchema = z.unknown();

export const dependabotAddSelectedRepoToOrgSecretDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const dependabotAddSelectedRepoToOrgSecretResponseSchema = z.void();

export const dependabotAddSelectedRepoToOrgSecretErrorSchema = z.unknown();

export const activityListPublicOrgEventsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListPublicOrgEventsResponseSchema = z.array(eventSchema);

export const activityListPublicOrgEventsErrorSchema = z.unknown();

export const orgsListFailedInvitationsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListFailedInvitationsResponseSchema = z.array(organizationInvitationSchema);

export const orgsListFailedInvitationsErrorSchema = basicErrorSchema;

export const orgsListWebhooksDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListWebhooksResponseSchema = z.array(orgHookSchema);

export const orgsListWebhooksErrorSchema = basicErrorSchema;

export const orgsCreateWebhookDataSchema = z.object({
  body: z.object({
    active: z.boolean().optional(),
    config: z.object({
      content_type: webhookConfigContentTypeSchema.optional(),
      insecure_ssl: webhookConfigInsecureSslSchema.optional(),
      password: z.string().optional(),
      secret: webhookConfigSecretSchema.optional(),
      url: webhookConfigUrlSchema,
      username: z.string().optional(),
    }),
    events: z.array(z.string()).optional(),
    name: z.string(),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const orgsCreateWebhookResponseSchema = orgHookSchema;

export const orgsCreateWebhookErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsDeleteWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsDeleteWebhookResponseSchema = z.void();

export const orgsDeleteWebhookErrorSchema = basicErrorSchema;

export const orgsGetWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsGetWebhookResponseSchema = orgHookSchema;

export const orgsGetWebhookErrorSchema = basicErrorSchema;

export const orgsUpdateWebhookDataSchema = z.object({
  body: z
    .object({
      active: z.boolean().optional(),
      config: z
        .object({
          content_type: webhookConfigContentTypeSchema.optional(),
          insecure_ssl: webhookConfigInsecureSslSchema.optional(),
          secret: webhookConfigSecretSchema.optional(),
          url: webhookConfigUrlSchema,
        })
        .optional(),
      events: z.array(z.string()).optional(),
      name: z.string().optional(),
    })
    .optional(),
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsUpdateWebhookResponseSchema = orgHookSchema;

export const orgsUpdateWebhookErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsGetWebhookConfigForOrgDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsGetWebhookConfigForOrgResponseSchema = webhookConfigSchema;

export const orgsGetWebhookConfigForOrgErrorSchema = z.unknown();

export const orgsUpdateWebhookConfigForOrgDataSchema = z.object({
  body: z
    .object({
      content_type: webhookConfigContentTypeSchema.optional(),
      insecure_ssl: webhookConfigInsecureSslSchema.optional(),
      secret: webhookConfigSecretSchema.optional(),
      url: webhookConfigUrlSchema.optional(),
    })
    .optional(),
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsUpdateWebhookConfigForOrgResponseSchema = webhookConfigSchema;

export const orgsUpdateWebhookConfigForOrgErrorSchema = z.unknown();

export const orgsListWebhookDeliveriesDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
  query: z
    .object({
      cursor: z.string().optional(),
      per_page: z.number().optional(),
      redelivery: z.boolean().optional(),
    })
    .optional(),
});

export const orgsListWebhookDeliveriesResponseSchema = z.array(hookDeliveryItemSchema);

export const orgsListWebhookDeliveriesErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsGetWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsGetWebhookDeliveryResponseSchema = hookDeliverySchema;

export const orgsGetWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsRedeliverWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsRedeliverWebhookDeliveryResponseSchema = z.record(z.unknown());

export const orgsRedeliverWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsPingWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    org: z.string(),
  }),
});

export const orgsPingWebhookResponseSchema = z.void();

export const orgsPingWebhookErrorSchema = basicErrorSchema;

export const appsGetOrgInstallationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const appsGetOrgInstallationResponseSchema = installationSchema;

export const appsGetOrgInstallationErrorSchema = z.unknown();

export const orgsListAppInstallationsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListAppInstallationsResponseSchema = z.object({
  installations: z.array(installationSchema),
  total_count: z.number(),
});

export const orgsListAppInstallationsErrorSchema = z.unknown();

export const interactionsRemoveRestrictionsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const interactionsRemoveRestrictionsForOrgResponseSchema = z.void();

export const interactionsRemoveRestrictionsForOrgErrorSchema = z.unknown();

export const interactionsGetRestrictionsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const interactionsGetRestrictionsForOrgResponseSchema = z.union([
  interactionLimitResponseSchema,
  z.record(z.unknown()),
]);

export const interactionsGetRestrictionsForOrgErrorSchema = z.unknown();

export const interactionsSetRestrictionsForOrgDataSchema = z.object({
  body: interactionLimitSchema,
  path: z.object({
    org: z.string(),
  }),
});

export const interactionsSetRestrictionsForOrgResponseSchema = interactionLimitResponseSchema;

export const interactionsSetRestrictionsForOrgErrorSchema = validationErrorSchema;

export const orgsListPendingInvitationsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      invitation_source: z.union([z.literal('all'), z.literal('member'), z.literal('scim')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      role: z
        .union([
          z.literal('all'),
          z.literal('admin'),
          z.literal('direct_member'),
          z.literal('billing_manager'),
          z.literal('hiring_manager'),
        ])
        .optional(),
    })
    .optional(),
});

export const orgsListPendingInvitationsResponseSchema = z.array(organizationInvitationSchema);

export const orgsListPendingInvitationsErrorSchema = basicErrorSchema;

export const orgsCreateInvitationDataSchema = z.object({
  body: z
    .object({
      email: z.string().optional(),
      invitee_id: z.number().optional(),
      role: z.union([z.literal('admin'), z.literal('direct_member'), z.literal('billing_manager')]).optional(),
      team_ids: z.array(z.number()).optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
  }),
});

export const orgsCreateInvitationResponseSchema = organizationInvitationSchema;

export const orgsCreateInvitationErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsCancelInvitationDataSchema = z.object({
  path: z.object({
    invitation_id: z.number(),
    org: z.string(),
  }),
});

export const orgsCancelInvitationResponseSchema = z.void();

export const orgsCancelInvitationErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const orgsListInvitationTeamsDataSchema = z.object({
  path: z.object({
    invitation_id: z.number(),
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListInvitationTeamsResponseSchema = z.array(teamSchema);

export const orgsListInvitationTeamsErrorSchema = basicErrorSchema;

export const issuesListForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      filter: z
        .union([
          z.literal('assigned'),
          z.literal('created'),
          z.literal('mentioned'),
          z.literal('subscribed'),
          z.literal('repos'),
          z.literal('all'),
        ])
        .optional(),
      labels: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated'), z.literal('comments')]).optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const issuesListForOrgResponseSchema = z.array(issueSchema);

export const issuesListForOrgErrorSchema = basicErrorSchema;

export const orgsListMembersDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      filter: z.union([z.literal('2fa_disabled'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      role: z.union([z.literal('all'), z.literal('admin'), z.literal('member')]).optional(),
    })
    .optional(),
});

export const orgsListMembersResponseSchema = z.array(simpleUserSchema);

export const orgsListMembersErrorSchema = validationErrorSchema;

export const orgsRemoveMemberDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsRemoveMemberResponseSchema = z.void();

export const orgsRemoveMemberErrorSchema = basicErrorSchema;

export const orgsCheckMembershipForUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsCheckMembershipForUserResponseSchema = z.void();

export const orgsCheckMembershipForUserErrorSchema = z.union([z.string(), z.unknown()]);

export const codespacesGetCodespacesForUserInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesGetCodespacesForUserInOrgResponseSchema = z.object({
  codespaces: z.array(codespaceSchema),
  total_count: z.number(),
});

export const codespacesGetCodespacesForUserInOrgErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesDeleteFromOrganizationDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
    org: z.string(),
    username: z.string(),
  }),
});

export const codespacesDeleteFromOrganizationResponseSchema = z.record(z.unknown());

export const codespacesDeleteFromOrganizationErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesStopInOrganizationDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
    org: z.string(),
    username: z.string(),
  }),
});

export const codespacesStopInOrganizationResponseSchema = codespaceSchema;

export const codespacesStopInOrganizationErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const orgsRemoveMembershipForUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsRemoveMembershipForUserResponseSchema = z.void();

export const orgsRemoveMembershipForUserErrorSchema = basicErrorSchema;

export const orgsGetMembershipForUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgMembershipSchema = z.object({
  organization: organizationSimpleSchema,
  organization_url: z.string(),
  permissions: z
    .object({
      can_create_repository: z.boolean(),
    })
    .optional(),
  role: z.union([z.literal('admin'), z.literal('member'), z.literal('billing_manager')]),
  state: z.union([z.literal('active'), z.literal('pending')]),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const orgsGetMembershipForUserErrorSchema = basicErrorSchema;

export const orgsSetMembershipForUserDataSchema = z.object({
  body: z
    .object({
      role: z.union([z.literal('admin'), z.literal('member')]).optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsSetMembershipForUserResponseSchema = orgMembershipSchema;

export const orgsSetMembershipForUserErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const migrationsListForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      exclude: z.array(z.literal('repositories')).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const migrationsListForOrgResponseSchema = z.array(migrationSchema);

export const migrationsListForOrgErrorSchema = z.unknown();

export const migrationsStartForOrgDataSchema = z.object({
  body: z.object({
    exclude: z.array(z.literal('repositories')).optional(),
    exclude_attachments: z.boolean().optional(),
    exclude_git_data: z.boolean().optional(),
    exclude_metadata: z.boolean().optional(),
    exclude_owner_projects: z.boolean().optional(),
    exclude_releases: z.boolean().optional(),
    lock_repositories: z.boolean().optional(),
    org_metadata_only: z.boolean().optional(),
    repositories: z.array(z.string()),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const migrationsStartForOrgResponseSchema = migrationSchema;

export const migrationsStartForOrgErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const migrationsGetStatusForOrgDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    org: z.string(),
  }),
  query: z
    .object({
      exclude: z.array(z.literal('repositories')).optional(),
    })
    .optional(),
});

export const migrationsGetStatusForOrgResponseSchema = migrationSchema;

export const migrationsGetStatusForOrgErrorSchema = basicErrorSchema;

export const migrationsDeleteArchiveForOrgDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    org: z.string(),
  }),
});

export const migrationsDeleteArchiveForOrgResponseSchema = z.void();

export const migrationsDeleteArchiveForOrgErrorSchema = basicErrorSchema;

export const migrationsDownloadArchiveForOrgDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    org: z.string(),
  }),
});

export const migrationsUnlockRepoForOrgDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    org: z.string(),
    repo_name: z.string(),
  }),
});

export const migrationsUnlockRepoForOrgResponseSchema = z.void();

export const migrationsUnlockRepoForOrgErrorSchema = basicErrorSchema;

export const migrationsListReposForOrgDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const migrationsListReposForOrgResponseSchema = z.array(minimalRepositorySchema);

export const migrationsListReposForOrgErrorSchema = basicErrorSchema;

export const orgsListOutsideCollaboratorsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      filter: z.union([z.literal('2fa_disabled'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListOutsideCollaboratorsResponseSchema = z.array(simpleUserSchema);

export const orgsListOutsideCollaboratorsErrorSchema = z.unknown();

export const orgsRemoveOutsideCollaboratorDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsRemoveOutsideCollaboratorResponseSchema = z.void();

export const orgsRemoveOutsideCollaboratorErrorSchema = z.object({
  documentation_url: z.string().optional(),
  message: z.string().optional(),
});

export const orgsConvertMemberToOutsideCollaboratorDataSchema = z.object({
  body: z
    .object({
      async: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsConvertMemberToOutsideCollaboratorResponseSchema = z.union([z.record(z.unknown()), z.void()]);

export const orgsConvertMemberToOutsideCollaboratorErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const packagesListPackagesForOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z.object({
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    page: z.number().optional(),
    per_page: z.number().optional(),
    visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]).optional(),
  }),
});

export const packagesListPackagesForOrganizationErrorSchema = basicErrorSchema;

export const packagesDeletePackageForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
});

export const packagesDeletePackageForOrgResponseSchema = z.void();

export const packagesDeletePackageForOrgErrorSchema = basicErrorSchema;

export const packagesGetPackageForOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
});

export const packageSchema = z.object({
  created_at: z.string(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  owner: nullableSimpleUserSchema.optional(),
  package_type: z.union([
    z.literal('npm'),
    z.literal('maven'),
    z.literal('rubygems'),
    z.literal('docker'),
    z.literal('nuget'),
    z.literal('container'),
  ]),
  repository: nullableMinimalRepositorySchema.optional(),
  updated_at: z.string(),
  url: z.string(),
  version_count: z.number(),
  visibility: z.union([z.literal('private'), z.literal('public')]),
});

export const packagesGetPackageForOrganizationErrorSchema = z.unknown();

export const packagesRestorePackageForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
  query: z
    .object({
      token: z.string().optional(),
    })
    .optional(),
});

export const packagesRestorePackageForOrgResponseSchema = z.void();

export const packagesRestorePackageForOrgErrorSchema = basicErrorSchema;

export const packagesGetAllPackageVersionsForPackageOwnedByOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('active'), z.literal('deleted')]).optional(),
    })
    .optional(),
});

export const packagesGetAllPackageVersionsForPackageOwnedByOrgResponseSchema = z.array(packageVersionSchema);

export const packagesGetAllPackageVersionsForPackageOwnedByOrgErrorSchema = basicErrorSchema;

export const packagesDeletePackageVersionForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesDeletePackageVersionForOrgResponseSchema = z.void();

export const packagesDeletePackageVersionForOrgErrorSchema = basicErrorSchema;

export const packagesGetPackageVersionForOrganizationDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesGetPackageVersionForOrganizationResponseSchema = packageVersionSchema;

export const packagesGetPackageVersionForOrganizationErrorSchema = z.unknown();

export const packagesRestorePackageVersionForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesRestorePackageVersionForOrgResponseSchema = z.void();

export const packagesRestorePackageVersionForOrgErrorSchema = basicErrorSchema;

export const projectsListForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const projectsListForOrgResponseSchema = z.array(projectSchema);

export const projectsListForOrgErrorSchema = validationErrorSimpleSchema;

export const projectsCreateForOrgDataSchema = z.object({
  body: z.object({
    body: z.string().optional(),
    name: z.string(),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const projectsCreateForOrgResponseSchema = projectSchema;

export const projectsCreateForOrgErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const orgsListPublicMembersDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListPublicMembersResponseSchema = z.array(simpleUserSchema);

export const orgsListPublicMembersErrorSchema = z.unknown();

export const orgsRemovePublicMembershipForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsRemovePublicMembershipForAuthenticatedUserResponseSchema = z.void();

export const orgsRemovePublicMembershipForAuthenticatedUserErrorSchema = z.unknown();

export const orgsCheckPublicMembershipForUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsCheckPublicMembershipForUserResponseSchema = z.void();

export const orgsCheckPublicMembershipForUserErrorSchema = z.unknown();

export const orgsSetPublicMembershipForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
});

export const orgsSetPublicMembershipForAuthenticatedUserResponseSchema = z.void();

export const orgsSetPublicMembershipForAuthenticatedUserErrorSchema = basicErrorSchema;

export const reposListForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z
        .union([z.literal('created'), z.literal('updated'), z.literal('pushed'), z.literal('full_name')])
        .optional(),
      type: z
        .union([
          z.literal('all'),
          z.literal('public'),
          z.literal('private'),
          z.literal('forks'),
          z.literal('sources'),
          z.literal('member'),
        ])
        .optional(),
    })
    .optional(),
});

export const reposListForOrgResponseSchema = z.array(minimalRepositorySchema);

export const reposListForOrgErrorSchema = z.unknown();

export const reposCreateInOrgDataSchema = z.object({
  body: z.object({
    allow_auto_merge: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_rebase_merge: z.boolean().optional(),
    allow_squash_merge: z.boolean().optional(),
    auto_init: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    description: z.string().optional(),
    gitignore_template: z.string().optional(),
    has_downloads: z.boolean().optional(),
    has_issues: z.boolean().optional(),
    has_projects: z.boolean().optional(),
    has_wiki: z.boolean().optional(),
    homepage: z.string().optional(),
    is_template: z.boolean().optional(),
    license_template: z.string().optional(),
    merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
    merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
    name: z.string(),
    private: z.boolean().optional(),
    squash_merge_commit_message: z
      .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
      .optional(),
    squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
    team_id: z.number().optional(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    visibility: z.union([z.literal('public'), z.literal('private')]).optional(),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const reposCreateInOrgResponseSchema = repositorySchema;

export const reposCreateInOrgErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const secretScanningListAlertsForOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      resolution: z.string().optional(),
      secret_type: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.union([z.literal('open'), z.literal('resolved')]).optional(),
    })
    .optional(),
});

export const secretScanningListAlertsForOrgResponseSchema = z.array(organizationSecretScanningAlertSchema);

export const secretScanningListAlertsForOrgErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const orgsListSecurityManagerTeamsDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const orgsListSecurityManagerTeamsResponseSchema = z.array(teamSimpleSchema);

export const orgsListSecurityManagerTeamsErrorSchema = z.unknown();

export const orgsRemoveSecurityManagerTeamDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const orgsRemoveSecurityManagerTeamResponseSchema = z.void();

export const orgsRemoveSecurityManagerTeamErrorSchema = z.unknown();

export const orgsAddSecurityManagerTeamDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const orgsAddSecurityManagerTeamResponseSchema = z.void();

export const orgsAddSecurityManagerTeamErrorSchema = z.unknown();

export const billingGetGithubActionsBillingOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const billingGetGithubActionsBillingOrgResponseSchema = actionsBillingUsageSchema;

export const billingGetGithubActionsBillingOrgErrorSchema = z.unknown();

export const billingGetGithubPackagesBillingOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const billingGetGithubPackagesBillingOrgResponseSchema = packagesBillingUsageSchema;

export const billingGetGithubPackagesBillingOrgErrorSchema = z.unknown();

export const billingGetSharedStorageBillingOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const billingGetSharedStorageBillingOrgResponseSchema = combinedBillingUsageSchema;

export const billingGetSharedStorageBillingOrgErrorSchema = z.unknown();

export const teamsListDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListResponseSchema = z.array(teamSchema);

export const teamsListErrorSchema = basicErrorSchema;

export const teamsCreateDataSchema = z.object({
  body: z.object({
    description: z.string().optional(),
    maintainers: z.array(z.string()).optional(),
    name: z.string(),
    parent_team_id: z.number().optional(),
    permission: z.union([z.literal('pull'), z.literal('push')]).optional(),
    privacy: z.union([z.literal('secret'), z.literal('closed')]).optional(),
    repo_names: z.array(z.string()).optional(),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const teamFullSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  html_url: z.string(),
  id: z.number(),
  ldap_dn: z.string().optional(),
  members_count: z.number(),
  members_url: z.string(),
  name: z.string(),
  node_id: z.string(),
  organization: teamOrganizationSchema,
  parent: nullableTeamSimpleSchema.optional(),
  permission: z.string(),
  privacy: z.union([z.literal('closed'), z.literal('secret')]).optional(),
  repos_count: z.number(),
  repositories_url: z.string(),
  slug: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const teamsCreateErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsDeleteInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsDeleteInOrgResponseSchema = z.void();

export const teamsDeleteInOrgErrorSchema = z.unknown();

export const teamsGetByNameDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsGetByNameResponseSchema = teamFullSchema;

export const teamsGetByNameErrorSchema = basicErrorSchema;

export const teamsUpdateInOrgDataSchema = z.object({
  body: z
    .object({
      description: z.string().optional(),
      name: z.string().optional(),
      parent_team_id: z.number().optional().nullable(),
      permission: z.union([z.literal('pull'), z.literal('push'), z.literal('admin')]).optional(),
      privacy: z.union([z.literal('secret'), z.literal('closed')]).optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsUpdateInOrgResponseSchema = teamFullSchema;

export const teamsUpdateInOrgErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsListDiscussionsInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      pinned: z.string().optional(),
    })
    .optional(),
});

export const teamsListDiscussionsInOrgResponseSchema = z.array(teamDiscussionSchema);

export const teamsListDiscussionsInOrgErrorSchema = z.unknown();

export const teamsCreateDiscussionInOrgDataSchema = z.object({
  body: z.object({
    body: z.string(),
    private: z.boolean().optional(),
    title: z.string(),
  }),
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsCreateDiscussionInOrgResponseSchema = teamDiscussionSchema;

export const teamsCreateDiscussionInOrgErrorSchema = z.unknown();

export const teamsDeleteDiscussionInOrgDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsDeleteDiscussionInOrgResponseSchema = z.void();

export const teamsDeleteDiscussionInOrgErrorSchema = z.unknown();

export const teamsGetDiscussionInOrgDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsGetDiscussionInOrgResponseSchema = teamDiscussionSchema;

export const teamsGetDiscussionInOrgErrorSchema = z.unknown();

export const teamsUpdateDiscussionInOrgDataSchema = z.object({
  body: z
    .object({
      body: z.string().optional(),
      title: z.string().optional(),
    })
    .optional(),
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsUpdateDiscussionInOrgResponseSchema = teamDiscussionSchema;

export const teamsUpdateDiscussionInOrgErrorSchema = z.unknown();

export const teamsListDiscussionCommentsInOrgDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListDiscussionCommentsInOrgResponseSchema = z.array(teamDiscussionCommentSchema);

export const teamsListDiscussionCommentsInOrgErrorSchema = z.unknown();

export const teamsCreateDiscussionCommentInOrgDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsCreateDiscussionCommentInOrgResponseSchema = teamDiscussionCommentSchema;

export const teamsCreateDiscussionCommentInOrgErrorSchema = z.unknown();

export const teamsDeleteDiscussionCommentInOrgDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsDeleteDiscussionCommentInOrgResponseSchema = z.void();

export const teamsDeleteDiscussionCommentInOrgErrorSchema = z.unknown();

export const teamsGetDiscussionCommentInOrgDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsGetDiscussionCommentInOrgResponseSchema = teamDiscussionCommentSchema;

export const teamsGetDiscussionCommentInOrgErrorSchema = z.unknown();

export const teamsUpdateDiscussionCommentInOrgDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsUpdateDiscussionCommentInOrgResponseSchema = teamDiscussionCommentSchema;

export const teamsUpdateDiscussionCommentInOrgErrorSchema = z.unknown();

export const reactionsListForTeamDiscussionCommentInOrgDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForTeamDiscussionCommentInOrgResponseSchema = z.array(reactionSchema);

export const reactionsListForTeamDiscussionCommentInOrgErrorSchema = z.unknown();

export const reactionsCreateForTeamDiscussionCommentInOrgDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const reactionsCreateForTeamDiscussionCommentInOrgResponseSchema = reactionSchema;

export const reactionsCreateForTeamDiscussionCommentInOrgErrorSchema = z.unknown();

export const reactionsDeleteForTeamDiscussionCommentDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    org: z.string(),
    reaction_id: z.number(),
    team_slug: z.string(),
  }),
});

export const reactionsDeleteForTeamDiscussionCommentResponseSchema = z.void();

export const reactionsDeleteForTeamDiscussionCommentErrorSchema = z.unknown();

export const reactionsListForTeamDiscussionInOrgDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForTeamDiscussionInOrgResponseSchema = z.array(reactionSchema);

export const reactionsListForTeamDiscussionInOrgErrorSchema = z.unknown();

export const reactionsCreateForTeamDiscussionInOrgDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    team_slug: z.string(),
  }),
});

export const reactionsCreateForTeamDiscussionInOrgResponseSchema = reactionSchema;

export const reactionsCreateForTeamDiscussionInOrgErrorSchema = z.unknown();

export const reactionsDeleteForTeamDiscussionDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    org: z.string(),
    reaction_id: z.number(),
    team_slug: z.string(),
  }),
});

export const reactionsDeleteForTeamDiscussionResponseSchema = z.void();

export const reactionsDeleteForTeamDiscussionErrorSchema = z.unknown();

export const teamsListPendingInvitationsInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListPendingInvitationsInOrgResponseSchema = z.array(organizationInvitationSchema);

export const teamsListPendingInvitationsInOrgErrorSchema = z.unknown();

export const teamsListMembersInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      role: z.union([z.literal('member'), z.literal('maintainer'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const teamsListMembersInOrgResponseSchema = z.array(simpleUserSchema);

export const teamsListMembersInOrgErrorSchema = z.unknown();

export const teamsRemoveMembershipForUserInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  }),
});

export const teamsRemoveMembershipForUserInOrgResponseSchema = z.void();

export const teamsRemoveMembershipForUserInOrgErrorSchema = z.unknown();

export const teamsGetMembershipForUserInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  }),
});

export const teamsGetMembershipForUserInOrgResponseSchema = teamMembershipSchema;

export const teamsGetMembershipForUserInOrgErrorSchema = z.unknown();

export const teamsAddOrUpdateMembershipForUserInOrgDataSchema = z.object({
  body: z
    .object({
      role: z.union([z.literal('member'), z.literal('maintainer')]).optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  }),
});

export const teamsAddOrUpdateMembershipForUserInOrgResponseSchema = teamMembershipSchema;

export const teamsAddOrUpdateMembershipForUserInOrgErrorSchema = z.unknown();

export const teamsListProjectsInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListProjectsInOrgResponseSchema = z.array(teamProjectSchema);

export const teamsListProjectsInOrgErrorSchema = z.unknown();

export const teamsRemoveProjectInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    project_id: z.number(),
    team_slug: z.string(),
  }),
});

export const teamsRemoveProjectInOrgResponseSchema = z.void();

export const teamsRemoveProjectInOrgErrorSchema = z.unknown();

export const teamsCheckPermissionsForProjectInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    project_id: z.number(),
    team_slug: z.string(),
  }),
});

export const teamsCheckPermissionsForProjectInOrgResponseSchema = teamProjectSchema;

export const teamsCheckPermissionsForProjectInOrgErrorSchema = z.unknown();

export const teamsAddOrUpdateProjectPermissionsInOrgDataSchema = z.object({
  body: z
    .object({
      permission: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    org: z.string(),
    project_id: z.number(),
    team_slug: z.string(),
  }),
});

export const teamsAddOrUpdateProjectPermissionsInOrgResponseSchema = z.void();

export const teamsAddOrUpdateProjectPermissionsInOrgErrorSchema = z.object({
  documentation_url: z.string().optional(),
  message: z.string().optional(),
});

export const teamsListReposInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListReposInOrgResponseSchema = z.array(minimalRepositorySchema);

export const teamsListReposInOrgErrorSchema = z.unknown();

export const teamsRemoveRepoInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    owner: z.string(),
    repo: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsRemoveRepoInOrgResponseSchema = z.void();

export const teamsRemoveRepoInOrgErrorSchema = z.unknown();

export const teamsCheckPermissionsForRepoInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    owner: z.string(),
    repo: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsCheckPermissionsForRepoInOrgResponseSchema = z.union([teamRepositorySchema, z.void()]);

export const teamsCheckPermissionsForRepoInOrgErrorSchema = z.unknown();

export const teamsAddOrUpdateRepoPermissionsInOrgDataSchema = z.object({
  body: z
    .object({
      permission: z.string().optional(),
    })
    .optional(),
  path: z.object({
    org: z.string(),
    owner: z.string(),
    repo: z.string(),
    team_slug: z.string(),
  }),
});

export const teamsAddOrUpdateRepoPermissionsInOrgResponseSchema = z.void();

export const teamsAddOrUpdateRepoPermissionsInOrgErrorSchema = z.unknown();

export const teamsListChildInOrgDataSchema = z.object({
  path: z.object({
    org: z.string(),
    team_slug: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListChildInOrgResponseSchema = z.array(teamSchema);

export const teamsListChildInOrgErrorSchema = z.unknown();

export const orgsEnableOrDisableSecurityProductOnAllOrgReposDataSchema = z.object({
  path: z.object({
    enablement: z.union([z.literal('enable_all'), z.literal('disable_all')]),
    org: z.string(),
    security_product: z.union([
      z.literal('dependency_graph'),
      z.literal('dependabot_alerts'),
      z.literal('dependabot_security_updates'),
      z.literal('advanced_security'),
      z.literal('secret_scanning'),
      z.literal('secret_scanning_push_protection'),
    ]),
  }),
});

export const orgsEnableOrDisableSecurityProductOnAllOrgReposResponseSchema = z.void();

export const orgsEnableOrDisableSecurityProductOnAllOrgReposErrorSchema = z.unknown();

export const projectsDeleteCardDataSchema = z.object({
  path: z.object({
    card_id: z.number(),
  }),
});

export const projectsDeleteCardResponseSchema = z.void();

export const projectsDeleteCardErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  }),
]);

export const projectsGetCardDataSchema = z.object({
  path: z.object({
    card_id: z.number(),
  }),
});

export const projectsGetCardResponseSchema = projectCardSchema;

export const projectsGetCardErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsUpdateCardDataSchema = z.object({
  body: z
    .object({
      archived: z.boolean().optional(),
      note: z.string().optional().nullable(),
    })
    .optional(),
  path: z.object({
    card_id: z.number(),
  }),
});

export const projectsUpdateCardResponseSchema = projectCardSchema;

export const projectsUpdateCardErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSimpleSchema]);

export const projectsMoveCardDataSchema = z.object({
  body: z.object({
    column_id: z.number().optional(),
    position: z.string(),
  }),
  path: z.object({
    card_id: z.number(),
  }),
});

export const projectsMoveCardResponseSchema = z.record(z.unknown());

export const projectsMoveCardErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    errors: z
      .array(
        z.object({
          code: z.string().optional(),
          field: z.string().optional(),
          message: z.string().optional(),
          resource: z.string().optional(),
        }),
      )
      .optional(),
    message: z.string().optional(),
  }),
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    errors: z
      .array(
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
        }),
      )
      .optional(),
    message: z.string().optional(),
  }),
]);

export const projectsDeleteColumnDataSchema = z.object({
  path: z.object({
    column_id: z.number(),
  }),
});

export const projectsDeleteColumnResponseSchema = z.void();

export const projectsDeleteColumnErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsGetColumnDataSchema = z.object({
  path: z.object({
    column_id: z.number(),
  }),
});

export const projectsGetColumnResponseSchema = projectColumnSchema;

export const projectsGetColumnErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsUpdateColumnDataSchema = z.object({
  body: z.object({
    name: z.string(),
  }),
  path: z.object({
    column_id: z.number(),
  }),
});

export const projectsUpdateColumnResponseSchema = projectColumnSchema;

export const projectsUpdateColumnErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsListCardsDataSchema = z.object({
  path: z.object({
    column_id: z.number(),
  }),
  query: z
    .object({
      archived_state: z.union([z.literal('all'), z.literal('archived'), z.literal('not_archived')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const projectsListCardsResponseSchema = z.array(projectCardSchema);

export const projectsListCardsErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsCreateCardDataSchema = z.object({
  body: z.union([
    z.object({
      note: z.string().nullable(),
    }),
    z.object({
      content_id: z.number(),
      content_type: z.string(),
    }),
  ]),
  path: z.object({
    column_id: z.number(),
  }),
});

export const projectsCreateCardResponseSchema = projectCardSchema;

export const projectsCreateCardErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.union([validationErrorSchema, validationErrorSimpleSchema]),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    errors: z
      .array(
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
        }),
      )
      .optional(),
    message: z.string().optional(),
  }),
]);

export const projectsMoveColumnDataSchema = z.object({
  body: z.object({
    position: z.string(),
  }),
  path: z.object({
    column_id: z.number(),
  }),
});

export const projectsMoveColumnResponseSchema = z.record(z.unknown());

export const projectsMoveColumnErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSimpleSchema]);

export const projectsDeleteDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
  }),
});

export const projectsDeleteResponseSchema = z.void();

export const projectsDeleteErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  }),
]);

export const projectsGetDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
  }),
});

export const projectsGetResponseSchema = projectSchema;

export const projectsGetErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsUpdateDataSchema = z.object({
  body: z
    .object({
      body: z.string().optional().nullable(),
      name: z.string().optional(),
      organization_permission: z
        .union([z.literal('read'), z.literal('write'), z.literal('admin'), z.literal('none')])
        .optional(),
      private: z.boolean().optional(),
      state: z.string().optional(),
    })
    .optional(),
  path: z.object({
    project_id: z.number(),
  }),
});

export const projectsUpdateResponseSchema = projectSchema;

export const projectsUpdateErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  }),
  validationErrorSimpleSchema,
]);

export const projectsListCollaboratorsDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
  }),
  query: z
    .object({
      affiliation: z.union([z.literal('outside'), z.literal('direct'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const projectsListCollaboratorsResponseSchema = z.array(simpleUserSchema);

export const projectsListCollaboratorsErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const projectsRemoveCollaboratorDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
    username: z.string(),
  }),
});

export const projectsRemoveCollaboratorResponseSchema = z.void();

export const projectsRemoveCollaboratorErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const projectsAddCollaboratorDataSchema = z.object({
  body: z
    .object({
      permission: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    project_id: z.number(),
    username: z.string(),
  }),
});

export const projectsAddCollaboratorResponseSchema = z.void();

export const projectsAddCollaboratorErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const projectsGetPermissionForUserDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
    username: z.string(),
  }),
});

export const projectsGetPermissionForUserResponseSchema = projectCollaboratorPermissionSchema;

export const projectsGetPermissionForUserErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const projectsListColumnsDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const projectsListColumnsResponseSchema = z.array(projectColumnSchema);

export const projectsListColumnsErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsCreateColumnDataSchema = z.object({
  body: z.object({
    name: z.string(),
  }),
  path: z.object({
    project_id: z.number(),
  }),
});

export const projectsCreateColumnResponseSchema = projectColumnSchema;

export const projectsCreateColumnErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSimpleSchema]);

export const rateLimitGetResponseSchema = rateLimitOverviewSchema;

export const rateLimitGetErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const actionsListRepoRequiredWorkflowsDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListRepoRequiredWorkflowsResponseSchema = z.object({
  required_workflows: z.array(repoRequiredWorkflowSchema),
  total_count: z.number(),
});

export const actionsListRepoRequiredWorkflowsErrorSchema = basicErrorSchema;

export const actionsGetRepoRequiredWorkflowDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repo: z.string(),
    required_workflow_id_for_repo: z.number(),
  }),
});

export const actionsGetRepoRequiredWorkflowResponseSchema = repoRequiredWorkflowSchema;

export const actionsGetRepoRequiredWorkflowErrorSchema = basicErrorSchema;

export const actionsGetRepoRequiredWorkflowUsageDataSchema = z.object({
  path: z.object({
    org: z.string(),
    repo: z.string(),
    required_workflow_id_for_repo: z.number(),
  }),
});

export const actionsGetRepoRequiredWorkflowUsageResponseSchema = workflowUsageSchema;

export const actionsGetRepoRequiredWorkflowUsageErrorSchema = basicErrorSchema;

export const reposDeleteDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteResponseSchema = z.void();

export const reposDeleteErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const reposGetDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetResponseSchema = fullRepositorySchema;

export const reposGetErrorSchema = basicErrorSchema;

export const reposUpdateDataSchema = z.object({
  body: z
    .object({
      allow_auto_merge: z.boolean().optional(),
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      allow_update_branch: z.boolean().optional(),
      archived: z.boolean().optional(),
      default_branch: z.string().optional(),
      delete_branch_on_merge: z.boolean().optional(),
      description: z.string().optional(),
      has_issues: z.boolean().optional(),
      has_projects: z.boolean().optional(),
      has_wiki: z.boolean().optional(),
      homepage: z.string().optional(),
      is_template: z.boolean().optional(),
      merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
      merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
      name: z.string().optional(),
      private: z.boolean().optional(),
      security_and_analysis: z
        .object({
          advanced_security: z
            .object({
              status: z.string().optional(),
            })
            .optional(),
          secret_scanning: z
            .object({
              status: z.string().optional(),
            })
            .optional(),
          secret_scanning_push_protection: z
            .object({
              status: z.string().optional(),
            })
            .optional(),
        })
        .optional()
        .nullable(),
      squash_merge_commit_message: z
        .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
        .optional(),
      squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
      use_squash_pr_title_as_default: z.boolean().optional(),
      visibility: z.union([z.literal('public'), z.literal('private')]).optional(),
      web_commit_signoff_required: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateResponseSchema = fullRepositorySchema;

export const reposUpdateErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const actionsListArtifactsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      name: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListArtifactsForRepoResponseSchema = z.object({
  artifacts: z.array(artifactSchema),
  total_count: z.number(),
});

export const actionsListArtifactsForRepoErrorSchema = z.unknown();

export const actionsDeleteArtifactDataSchema = z.object({
  path: z.object({
    artifact_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsDeleteArtifactResponseSchema = z.void();

export const actionsDeleteArtifactErrorSchema = z.unknown();

export const actionsGetArtifactDataSchema = z.object({
  path: z.object({
    artifact_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetArtifactResponseSchema = artifactSchema;

export const actionsGetArtifactErrorSchema = z.unknown();

export const actionsDownloadArtifactDataSchema = z.object({
  path: z.object({
    archive_format: z.string(),
    artifact_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetActionsCacheUsageDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetActionsCacheUsageResponseSchema = actionsCacheUsageByRepositorySchema;

export const actionsGetActionsCacheUsageErrorSchema = z.unknown();

export const actionsDeleteActionsCacheByKeyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z.object({
    key: z.string(),
    ref: codeScanningRefSchema.optional(),
  }),
});

export const actionsDeleteActionsCacheByKeyResponseSchema = actionsCacheListSchema;

export const actionsDeleteActionsCacheByKeyErrorSchema = z.unknown();

export const actionsGetActionsCacheListDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      key: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      ref: codeScanningRefSchema.optional(),
      sort: z.union([z.literal('created_at'), z.literal('last_accessed_at'), z.literal('size_in_bytes')]).optional(),
    })
    .optional(),
});

export const actionsGetActionsCacheListResponseSchema = actionsCacheListSchema;

export const actionsGetActionsCacheListErrorSchema = z.unknown();

export const actionsDeleteActionsCacheByIdDataSchema = z.object({
  path: z.object({
    cache_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsDeleteActionsCacheByIdResponseSchema = z.void();

export const actionsDeleteActionsCacheByIdErrorSchema = z.unknown();

export const actionsGetJobForWorkflowRunDataSchema = z.object({
  path: z.object({
    job_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetJobForWorkflowRunResponseSchema = jobSchema;

export const actionsGetJobForWorkflowRunErrorSchema = z.unknown();

export const actionsDownloadJobLogsForWorkflowRunDataSchema = z.object({
  path: z.object({
    job_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsReRunJobForWorkflowRunDataSchema = z.object({
  body: z
    .object({
      enable_debug_logging: z.boolean().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    job_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsReRunJobForWorkflowRunResponseSchema = emptyObjectSchema;

export const actionsReRunJobForWorkflowRunErrorSchema = basicErrorSchema;

export const actionsGetCustomOidcSubClaimForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetCustomOidcSubClaimForRepoResponseSchema = oidcCustomSubRepoSchema;

export const actionsGetCustomOidcSubClaimForRepoErrorSchema = basicErrorSchema;

export const actionsSetCustomOidcSubClaimForRepoDataSchema = z.object({
  body: z.object({
    include_claim_keys: z.array(z.string()).optional(),
    use_default: z.boolean(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsSetCustomOidcSubClaimForRepoResponseSchema = emptyObjectSchema;

export const actionsSetCustomOidcSubClaimForRepoErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const actionsGetGithubActionsPermissionsRepositoryDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetGithubActionsPermissionsRepositoryResponseSchema = actionsRepositoryPermissionsSchema;

export const actionsGetGithubActionsPermissionsRepositoryErrorSchema = z.unknown();

export const actionsSetGithubActionsPermissionsRepositoryDataSchema = z.object({
  body: z.object({
    allowed_actions: allowedActionsSchema.optional(),
    enabled: actionsEnabledSchema,
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsSetGithubActionsPermissionsRepositoryResponseSchema = z.void();

export const actionsSetGithubActionsPermissionsRepositoryErrorSchema = z.unknown();

export const actionsGetWorkflowAccessToRepositoryDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetWorkflowAccessToRepositoryResponseSchema = actionsWorkflowAccessToRepositorySchema;

export const actionsGetWorkflowAccessToRepositoryErrorSchema = z.unknown();

export const actionsSetWorkflowAccessToRepositoryDataSchema = z.object({
  body: actionsWorkflowAccessToRepositorySchema,
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsSetWorkflowAccessToRepositoryResponseSchema = z.void();

export const actionsSetWorkflowAccessToRepositoryErrorSchema = z.unknown();

export const actionsGetAllowedActionsRepositoryDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetAllowedActionsRepositoryResponseSchema = selectedActionsSchema;

export const actionsGetAllowedActionsRepositoryErrorSchema = z.unknown();

export const actionsSetAllowedActionsRepositoryDataSchema = z.object({
  body: selectedActionsSchema.optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsSetAllowedActionsRepositoryResponseSchema = z.void();

export const actionsSetAllowedActionsRepositoryErrorSchema = z.unknown();

export const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponseSchema =
  actionsGetDefaultWorkflowPermissionsSchema;

export const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryErrorSchema = z.unknown();

export const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryDataSchema = z.object({
  body: actionsSetDefaultWorkflowPermissionsSchema,
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponseSchema = z.void();

export const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryErrorSchema = z.unknown();

export const actionsListRequiredWorkflowRunsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    required_workflow_id_for_repo: z.number(),
  }),
  query: z
    .object({
      actor: z.string().optional(),
      branch: z.string().optional(),
      check_suite_id: z.number().optional(),
      created: z.string().optional(),
      event: z.string().optional(),
      exclude_pull_requests: z.boolean().optional(),
      head_sha: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      status: z
        .union([
          z.literal('completed'),
          z.literal('action_required'),
          z.literal('cancelled'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('skipped'),
          z.literal('stale'),
          z.literal('success'),
          z.literal('timed_out'),
          z.literal('in_progress'),
          z.literal('queued'),
          z.literal('requested'),
          z.literal('waiting'),
          z.literal('pending'),
        ])
        .optional(),
    })
    .optional(),
});

export const actionsListRequiredWorkflowRunsResponseSchema = z.object({
  total_count: z.number(),
  workflow_runs: z.array(workflowRunSchema),
});

export const actionsListRequiredWorkflowRunsErrorSchema = z.unknown();

export const actionsListSelfHostedRunnersForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListSelfHostedRunnersForRepoResponseSchema = z.object({
  runners: z.array(runnerSchema),
  total_count: z.number(),
});

export const actionsListSelfHostedRunnersForRepoErrorSchema = z.unknown();

export const actionsListRunnerApplicationsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsListRunnerApplicationsForRepoResponseSchema = z.array(runnerApplicationSchema);

export const actionsListRunnerApplicationsForRepoErrorSchema = z.unknown();

export const actionsCreateRegistrationTokenForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsCreateRegistrationTokenForRepoResponseSchema = authenticationTokenSchema;

export const actionsCreateRegistrationTokenForRepoErrorSchema = z.unknown();

export const actionsCreateRemoveTokenForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsCreateRemoveTokenForRepoResponseSchema = authenticationTokenSchema;

export const actionsCreateRemoveTokenForRepoErrorSchema = z.unknown();

export const actionsDeleteSelfHostedRunnerFromRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsDeleteSelfHostedRunnerFromRepoResponseSchema = z.void();

export const actionsDeleteSelfHostedRunnerFromRepoErrorSchema = z.unknown();

export const actionsGetSelfHostedRunnerForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsGetSelfHostedRunnerForRepoResponseSchema = runnerSchema;

export const actionsGetSelfHostedRunnerForRepoErrorSchema = z.unknown();

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoErrorSchema = basicErrorSchema;

export const actionsListLabelsForSelfHostedRunnerForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsListLabelsForSelfHostedRunnerForRepoResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsListLabelsForSelfHostedRunnerForRepoErrorSchema = basicErrorSchema;

export const actionsAddCustomLabelsToSelfHostedRunnerForRepoDataSchema = z.object({
  body: z.object({
    labels: z.array(z.string()),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsAddCustomLabelsToSelfHostedRunnerForRepoResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsAddCustomLabelsToSelfHostedRunnerForRepoErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsSetCustomLabelsForSelfHostedRunnerForRepoDataSchema = z.object({
  body: z.object({
    labels: z.array(z.string()),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsSetCustomLabelsForSelfHostedRunnerForRepoResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsSetCustomLabelsForSelfHostedRunnerForRepoErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoDataSchema = z.object({
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
    runner_id: z.number(),
  }),
});

export const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponseSchema = z.object({
  labels: z.array(runnerLabelSchema),
  total_count: z.number(),
});

export const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const actionsListWorkflowRunsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      actor: z.string().optional(),
      branch: z.string().optional(),
      check_suite_id: z.number().optional(),
      created: z.string().optional(),
      event: z.string().optional(),
      exclude_pull_requests: z.boolean().optional(),
      head_sha: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      status: z
        .union([
          z.literal('completed'),
          z.literal('action_required'),
          z.literal('cancelled'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('skipped'),
          z.literal('stale'),
          z.literal('success'),
          z.literal('timed_out'),
          z.literal('in_progress'),
          z.literal('queued'),
          z.literal('requested'),
          z.literal('waiting'),
          z.literal('pending'),
        ])
        .optional(),
    })
    .optional(),
});

export const actionsListWorkflowRunsForRepoResponseSchema = z.object({
  total_count: z.number(),
  workflow_runs: z.array(workflowRunSchema),
});

export const actionsListWorkflowRunsForRepoErrorSchema = z.unknown();

export const actionsDeleteWorkflowRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsDeleteWorkflowRunResponseSchema = z.void();

export const actionsDeleteWorkflowRunErrorSchema = z.unknown();

export const actionsGetWorkflowRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
  query: z
    .object({
      exclude_pull_requests: z.boolean().optional(),
    })
    .optional(),
});

export const actionsGetWorkflowRunResponseSchema = workflowRunSchema;

export const actionsGetWorkflowRunErrorSchema = z.unknown();

export const actionsGetReviewsForRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsGetReviewsForRunResponseSchema = z.array(environmentApprovalsSchema);

export const actionsGetReviewsForRunErrorSchema = z.unknown();

export const actionsApproveWorkflowRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsApproveWorkflowRunResponseSchema = emptyObjectSchema;

export const actionsApproveWorkflowRunErrorSchema = basicErrorSchema;

export const actionsListWorkflowRunArtifactsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListWorkflowRunArtifactsResponseSchema = z.object({
  artifacts: z.array(artifactSchema),
  total_count: z.number(),
});

export const actionsListWorkflowRunArtifactsErrorSchema = z.unknown();

export const actionsGetWorkflowRunAttemptDataSchema = z.object({
  path: z.object({
    attempt_number: z.number(),
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
  query: z
    .object({
      exclude_pull_requests: z.boolean().optional(),
    })
    .optional(),
});

export const actionsGetWorkflowRunAttemptResponseSchema = workflowRunSchema;

export const actionsGetWorkflowRunAttemptErrorSchema = z.unknown();

export const actionsListJobsForWorkflowRunAttemptDataSchema = z.object({
  path: z.object({
    attempt_number: z.number(),
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListJobsForWorkflowRunAttemptResponseSchema = z.object({
  jobs: z.array(jobSchema),
  total_count: z.number(),
});

export const actionsListJobsForWorkflowRunAttemptErrorSchema = basicErrorSchema;

export const actionsDownloadWorkflowRunAttemptLogsDataSchema = z.object({
  path: z.object({
    attempt_number: z.number(),
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsCancelWorkflowRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsCancelWorkflowRunResponseSchema = emptyObjectSchema;

export const actionsCancelWorkflowRunErrorSchema = basicErrorSchema;

export const actionsListJobsForWorkflowRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
  query: z
    .object({
      filter: z.union([z.literal('latest'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListJobsForWorkflowRunResponseSchema = z.object({
  jobs: z.array(jobSchema),
  total_count: z.number(),
});

export const actionsListJobsForWorkflowRunErrorSchema = z.unknown();

export const actionsDeleteWorkflowRunLogsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsDeleteWorkflowRunLogsResponseSchema = z.void();

export const actionsDeleteWorkflowRunLogsErrorSchema = basicErrorSchema;

export const actionsDownloadWorkflowRunLogsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsGetPendingDeploymentsForRunDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const pendingDeploymentSchema = z.object({
  current_user_can_approve: z.boolean(),
  environment: z.object({
    html_url: z.string().optional(),
    id: z.number().optional(),
    name: z.string().optional(),
    node_id: z.string().optional(),
    url: z.string().optional(),
  }),
  reviewers: z.array(
    z.object({
      reviewer: z.union([simpleUserSchema, teamSchema]).optional(),
      type: deploymentReviewerTypeSchema.optional(),
    }),
  ),
  wait_timer: z.number(),
  wait_timer_started_at: z.string().nullable(),
});

export const actionsGetPendingDeploymentsForRunErrorSchema = z.unknown();

export const actionsReviewPendingDeploymentsForRunDataSchema = z.object({
  body: z.object({
    comment: z.string(),
    environment_ids: z.array(z.number()),
    state: z.union([z.literal('approved'), z.literal('rejected')]),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsReviewPendingDeploymentsForRunResponseSchema = z.array(deploymentSchema);

export const actionsReviewPendingDeploymentsForRunErrorSchema = z.unknown();

export const actionsReRunWorkflowDataSchema = z.object({
  body: z
    .object({
      enable_debug_logging: z.boolean().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsReRunWorkflowResponseSchema = emptyObjectSchema;

export const actionsReRunWorkflowErrorSchema = z.unknown();

export const actionsReRunWorkflowFailedJobsDataSchema = z.object({
  body: z
    .object({
      enable_debug_logging: z.boolean().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsReRunWorkflowFailedJobsResponseSchema = emptyObjectSchema;

export const actionsReRunWorkflowFailedJobsErrorSchema = z.unknown();

export const actionsGetWorkflowRunUsageDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.number(),
  }),
});

export const actionsGetWorkflowRunUsageResponseSchema = workflowRunUsageSchema;

export const actionsGetWorkflowRunUsageErrorSchema = z.unknown();

export const actionsListRepoSecretsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListRepoSecretsResponseSchema = z.object({
  secrets: z.array(actionsSecretSchema),
  total_count: z.number(),
});

export const actionsListRepoSecretsErrorSchema = z.unknown();

export const actionsGetRepoPublicKeyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetRepoPublicKeyResponseSchema = actionsPublicKeySchema;

export const actionsGetRepoPublicKeyErrorSchema = z.unknown();

export const actionsDeleteRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsDeleteRepoSecretResponseSchema = z.void();

export const actionsDeleteRepoSecretErrorSchema = z.unknown();

export const actionsGetRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsGetRepoSecretResponseSchema = actionsSecretSchema;

export const actionsGetRepoSecretErrorSchema = z.unknown();

export const actionsCreateOrUpdateRepoSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const actionsCreateOrUpdateRepoSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const actionsCreateOrUpdateRepoSecretErrorSchema = z.unknown();

export const actionsListRepoVariablesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListRepoVariablesResponseSchema = z.object({
  total_count: z.number(),
  variables: z.array(actionsVariableSchema),
});

export const actionsListRepoVariablesErrorSchema = z.unknown();

export const actionsCreateRepoVariableDataSchema = z.object({
  body: z.object({
    name: z.string(),
    value: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsCreateRepoVariableResponseSchema = emptyObjectSchema;

export const actionsCreateRepoVariableErrorSchema = z.unknown();

export const actionsDeleteRepoVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsDeleteRepoVariableResponseSchema = z.void();

export const actionsDeleteRepoVariableErrorSchema = z.unknown();

export const actionsGetRepoVariableDataSchema = z.object({
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsGetRepoVariableResponseSchema = actionsVariableSchema;

export const actionsGetRepoVariableErrorSchema = z.unknown();

export const actionsUpdateRepoVariableDataSchema = z.object({
  body: z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  }),
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const actionsUpdateRepoVariableResponseSchema = z.void();

export const actionsUpdateRepoVariableErrorSchema = z.unknown();

export const actionsListRepoWorkflowsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListRepoWorkflowsResponseSchema = z.object({
  total_count: z.number(),
  workflows: z.array(workflowSchema),
});

export const actionsListRepoWorkflowsErrorSchema = z.unknown();

export const actionsGetWorkflowDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
});

export const actionsGetWorkflowResponseSchema = workflowSchema;

export const actionsGetWorkflowErrorSchema = z.unknown();

export const actionsDisableWorkflowDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
});

export const actionsDisableWorkflowResponseSchema = z.void();

export const actionsDisableWorkflowErrorSchema = z.unknown();

export const actionsCreateWorkflowDispatchDataSchema = z.object({
  body: z.object({
    inputs: z.record(z.string()).optional(),
    ref: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
});

export const actionsCreateWorkflowDispatchResponseSchema = z.void();

export const actionsCreateWorkflowDispatchErrorSchema = z.unknown();

export const actionsEnableWorkflowDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
});

export const actionsEnableWorkflowResponseSchema = z.void();

export const actionsEnableWorkflowErrorSchema = z.unknown();

export const actionsListWorkflowRunsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
  query: z
    .object({
      actor: z.string().optional(),
      branch: z.string().optional(),
      check_suite_id: z.number().optional(),
      created: z.string().optional(),
      event: z.string().optional(),
      exclude_pull_requests: z.boolean().optional(),
      head_sha: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      status: z
        .union([
          z.literal('completed'),
          z.literal('action_required'),
          z.literal('cancelled'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('skipped'),
          z.literal('stale'),
          z.literal('success'),
          z.literal('timed_out'),
          z.literal('in_progress'),
          z.literal('queued'),
          z.literal('requested'),
          z.literal('waiting'),
          z.literal('pending'),
        ])
        .optional(),
    })
    .optional(),
});

export const actionsListWorkflowRunsResponseSchema = z.object({
  total_count: z.number(),
  workflow_runs: z.array(workflowRunSchema),
});

export const actionsListWorkflowRunsErrorSchema = z.unknown();

export const actionsGetWorkflowUsageDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.number(), z.string()]),
  }),
});

export const actionsGetWorkflowUsageResponseSchema = workflowUsageSchema;

export const actionsGetWorkflowUsageErrorSchema = z.unknown();

export const issuesListAssigneesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issuesListAssigneesResponseSchema = z.array(simpleUserSchema);

export const issuesListAssigneesErrorSchema = basicErrorSchema;

export const issuesCheckUserCanBeAssignedDataSchema = z.object({
  path: z.object({
    assignee: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCheckUserCanBeAssignedResponseSchema = z.void();

export const issuesCheckUserCanBeAssignedErrorSchema = basicErrorSchema;

export const reposListAutolinksDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
    })
    .optional(),
});

export const reposListAutolinksResponseSchema = z.array(autolinkSchema);

export const reposListAutolinksErrorSchema = z.unknown();

export const reposCreateAutolinkDataSchema = z.object({
  body: z.object({
    is_alphanumeric: z.boolean().optional(),
    key_prefix: z.string(),
    url_template: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateAutolinkResponseSchema = autolinkSchema;

export const reposCreateAutolinkErrorSchema = validationErrorSchema;

export const reposDeleteAutolinkDataSchema = z.object({
  path: z.object({
    autolink_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteAutolinkResponseSchema = z.void();

export const reposDeleteAutolinkErrorSchema = basicErrorSchema;

export const reposGetAutolinkDataSchema = z.object({
  path: z.object({
    autolink_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetAutolinkResponseSchema = autolinkSchema;

export const reposGetAutolinkErrorSchema = basicErrorSchema;

export const reposDisableAutomatedSecurityFixesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDisableAutomatedSecurityFixesResponseSchema = z.void();

export const reposDisableAutomatedSecurityFixesErrorSchema = z.unknown();

export const reposEnableAutomatedSecurityFixesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposEnableAutomatedSecurityFixesResponseSchema = z.void();

export const reposEnableAutomatedSecurityFixesErrorSchema = z.unknown();

export const reposListBranchesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      protected: z.boolean().optional(),
    })
    .optional(),
});

export const shortBranchSchema = z.object({
  commit: z.object({
    sha: z.string(),
    url: z.string(),
  }),
  name: z.string(),
  protected: z.boolean(),
  protection: branchProtectionSchema.optional(),
  protection_url: z.string().optional(),
});

export const reposListBranchesErrorSchema = basicErrorSchema;

export const reposGetBranchDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const branchWithProtectionSchema = z.object({
  _links: z.object({
    html: z.string(),
    self: z.string(),
  }),
  commit: commitSchema,
  name: z.string(),
  pattern: z.string().optional(),
  protected: z.boolean(),
  protection: branchProtectionSchema,
  protection_url: z.string(),
  required_approving_review_count: z.number().optional(),
});

export const reposGetBranchErrorSchema = basicErrorSchema;

export const reposDeleteBranchProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteBranchProtectionResponseSchema = z.void();

export const reposDeleteBranchProtectionErrorSchema = basicErrorSchema;

export const reposGetBranchProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetBranchProtectionResponseSchema = branchProtectionSchema;

export const reposGetBranchProtectionErrorSchema = basicErrorSchema;

export const reposUpdateBranchProtectionDataSchema = z.object({
  body: z.object({
    allow_deletions: z.boolean().optional(),
    allow_force_pushes: z.boolean().optional().nullable(),
    allow_fork_syncing: z.boolean().optional(),
    block_creations: z.boolean().optional(),
    enforce_admins: z.boolean().nullable(),
    lock_branch: z.boolean().optional(),
    required_conversation_resolution: z.boolean().optional(),
    required_linear_history: z.boolean().optional(),
    required_pull_request_reviews: z
      .object({
        bypass_pull_request_allowances: z
          .object({
            apps: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            users: z.array(z.string()).optional(),
          })
          .optional(),
        dismiss_stale_reviews: z.boolean().optional(),
        dismissal_restrictions: z
          .object({
            apps: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            users: z.array(z.string()).optional(),
          })
          .optional(),
        require_code_owner_reviews: z.boolean().optional(),
        require_last_push_approval: z.boolean().optional(),
        required_approving_review_count: z.number().optional(),
      })
      .nullable(),
    required_status_checks: z
      .object({
        checks: z
          .array(
            z.object({
              app_id: z.number().optional(),
              context: z.string(),
            }),
          )
          .optional(),
        contexts: z.array(z.string()),
        strict: z.boolean(),
      })
      .nullable(),
    restrictions: z
      .object({
        apps: z.array(z.string()).optional(),
        teams: z.array(z.string()),
        users: z.array(z.string()),
      })
      .nullable(),
  }),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const protectedBranchSchema = z.object({
  allow_deletions: z
    .object({
      enabled: z.boolean(),
    })
    .optional(),
  allow_force_pushes: z
    .object({
      enabled: z.boolean(),
    })
    .optional(),
  allow_fork_syncing: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  block_creations: z
    .object({
      enabled: z.boolean(),
    })
    .optional(),
  enforce_admins: z
    .object({
      enabled: z.boolean(),
      url: z.string(),
    })
    .optional(),
  lock_branch: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  required_conversation_resolution: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  required_linear_history: z
    .object({
      enabled: z.boolean(),
    })
    .optional(),
  required_pull_request_reviews: z
    .object({
      bypass_pull_request_allowances: z
        .object({
          apps: z.array(integrationSchema).optional(),
          teams: z.array(teamSchema),
          users: z.array(simpleUserSchema),
        })
        .optional(),
      dismiss_stale_reviews: z.boolean().optional(),
      dismissal_restrictions: z
        .object({
          apps: z.array(integrationSchema).optional(),
          teams: z.array(teamSchema),
          teams_url: z.string(),
          url: z.string(),
          users: z.array(simpleUserSchema),
          users_url: z.string(),
        })
        .optional(),
      require_code_owner_reviews: z.boolean().optional(),
      require_last_push_approval: z.boolean().optional(),
      required_approving_review_count: z.number().optional(),
      url: z.string(),
    })
    .optional(),
  required_signatures: z
    .object({
      enabled: z.boolean(),
      url: z.string(),
    })
    .optional(),
  required_status_checks: statusCheckPolicySchema.optional(),
  restrictions: branchRestrictionPolicySchema.optional(),
  url: z.string(),
});

export const reposUpdateBranchProtectionErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const reposDeleteAdminBranchProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteAdminBranchProtectionResponseSchema = z.void();

export const reposDeleteAdminBranchProtectionErrorSchema = basicErrorSchema;

export const reposGetAdminBranchProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetAdminBranchProtectionResponseSchema = protectedBranchAdminEnforcedSchema;

export const reposGetAdminBranchProtectionErrorSchema = z.unknown();

export const reposSetAdminBranchProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposSetAdminBranchProtectionResponseSchema = protectedBranchAdminEnforcedSchema;

export const reposSetAdminBranchProtectionErrorSchema = z.unknown();

export const reposDeletePullRequestReviewProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeletePullRequestReviewProtectionResponseSchema = z.void();

export const reposDeletePullRequestReviewProtectionErrorSchema = basicErrorSchema;

export const reposGetPullRequestReviewProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetPullRequestReviewProtectionResponseSchema = protectedBranchPullRequestReviewSchema;

export const reposGetPullRequestReviewProtectionErrorSchema = z.unknown();

export const reposUpdatePullRequestReviewProtectionDataSchema = z.object({
  body: z
    .object({
      bypass_pull_request_allowances: z
        .object({
          apps: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          users: z.array(z.string()).optional(),
        })
        .optional(),
      dismiss_stale_reviews: z.boolean().optional(),
      dismissal_restrictions: z
        .object({
          apps: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          users: z.array(z.string()).optional(),
        })
        .optional(),
      require_code_owner_reviews: z.boolean().optional(),
      require_last_push_approval: z.boolean().optional(),
      required_approving_review_count: z.number().optional(),
    })
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdatePullRequestReviewProtectionResponseSchema = protectedBranchPullRequestReviewSchema;

export const reposUpdatePullRequestReviewProtectionErrorSchema = validationErrorSchema;

export const reposDeleteCommitSignatureProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteCommitSignatureProtectionResponseSchema = z.void();

export const reposDeleteCommitSignatureProtectionErrorSchema = basicErrorSchema;

export const reposGetCommitSignatureProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetCommitSignatureProtectionResponseSchema = protectedBranchAdminEnforcedSchema;

export const reposGetCommitSignatureProtectionErrorSchema = basicErrorSchema;

export const reposCreateCommitSignatureProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateCommitSignatureProtectionResponseSchema = protectedBranchAdminEnforcedSchema;

export const reposCreateCommitSignatureProtectionErrorSchema = basicErrorSchema;

export const reposRemoveStatusCheckProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRemoveStatusCheckProtectionResponseSchema = z.void();

export const reposRemoveStatusCheckProtectionErrorSchema = z.unknown();

export const reposGetStatusChecksProtectionDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetStatusChecksProtectionResponseSchema = statusCheckPolicySchema;

export const reposGetStatusChecksProtectionErrorSchema = basicErrorSchema;

export const reposUpdateStatusCheckProtectionDataSchema = z.object({
  body: z
    .object({
      checks: z
        .array(
          z.object({
            app_id: z.number().optional(),
            context: z.string(),
          }),
        )
        .optional(),
      contexts: z.array(z.string()).optional(),
      strict: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateStatusCheckProtectionResponseSchema = statusCheckPolicySchema;

export const reposUpdateStatusCheckProtectionErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposRemoveStatusCheckContextsDataSchema = z.object({
  body: z
    .union([
      z.object({
        contexts: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRemoveStatusCheckContextsResponseSchema = z.array(z.string());

export const reposRemoveStatusCheckContextsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetAllStatusCheckContextsDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetAllStatusCheckContextsResponseSchema = z.array(z.string());

export const reposGetAllStatusCheckContextsErrorSchema = basicErrorSchema;

export const reposAddStatusCheckContextsDataSchema = z.object({
  body: z
    .union([
      z.object({
        contexts: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposAddStatusCheckContextsResponseSchema = z.array(z.string());

export const reposAddStatusCheckContextsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposSetStatusCheckContextsDataSchema = z.object({
  body: z
    .union([
      z.object({
        contexts: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposSetStatusCheckContextsResponseSchema = z.array(z.string());

export const reposSetStatusCheckContextsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposDeleteAccessRestrictionsDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteAccessRestrictionsResponseSchema = z.void();

export const reposDeleteAccessRestrictionsErrorSchema = z.unknown();

export const reposGetAccessRestrictionsDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetAccessRestrictionsResponseSchema = branchRestrictionPolicySchema;

export const reposGetAccessRestrictionsErrorSchema = basicErrorSchema;

export const reposRemoveAppAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        apps: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRemoveAppAccessRestrictionsResponseSchema = z.array(integrationSchema);

export const reposRemoveAppAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposGetAppsWithAccessToProtectedBranchDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetAppsWithAccessToProtectedBranchResponseSchema = z.array(integrationSchema);

export const reposGetAppsWithAccessToProtectedBranchErrorSchema = basicErrorSchema;

export const reposAddAppAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        apps: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposAddAppAccessRestrictionsResponseSchema = z.array(integrationSchema);

export const reposAddAppAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposSetAppAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        apps: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposSetAppAccessRestrictionsResponseSchema = z.array(integrationSchema);

export const reposSetAppAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposRemoveTeamAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        teams: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRemoveTeamAccessRestrictionsResponseSchema = z.array(teamSchema);

export const reposRemoveTeamAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposGetTeamsWithAccessToProtectedBranchDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetTeamsWithAccessToProtectedBranchResponseSchema = z.array(teamSchema);

export const reposGetTeamsWithAccessToProtectedBranchErrorSchema = basicErrorSchema;

export const reposAddTeamAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        teams: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposAddTeamAccessRestrictionsResponseSchema = z.array(teamSchema);

export const reposAddTeamAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposSetTeamAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        teams: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposSetTeamAccessRestrictionsResponseSchema = z.array(teamSchema);

export const reposSetTeamAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposRemoveUserAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        users: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRemoveUserAccessRestrictionsResponseSchema = z.array(simpleUserSchema);

export const reposRemoveUserAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposGetUsersWithAccessToProtectedBranchDataSchema = z.object({
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetUsersWithAccessToProtectedBranchResponseSchema = z.array(simpleUserSchema);

export const reposGetUsersWithAccessToProtectedBranchErrorSchema = basicErrorSchema;

export const reposAddUserAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        users: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposAddUserAccessRestrictionsResponseSchema = z.array(simpleUserSchema);

export const reposAddUserAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposSetUserAccessRestrictionsDataSchema = z.object({
  body: z
    .union([
      z.object({
        users: z.array(z.string()),
      }),
      z.array(z.string()),
    ])
    .optional(),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposSetUserAccessRestrictionsResponseSchema = z.array(simpleUserSchema);

export const reposSetUserAccessRestrictionsErrorSchema = validationErrorSchema;

export const reposRenameBranchDataSchema = z.object({
  body: z.object({
    new_name: z.string(),
  }),
  path: z.object({
    branch: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRenameBranchResponseSchema = branchWithProtectionSchema;

export const reposRenameBranchErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const checksCreateDataSchema = z.object({
  body: z
    .union([
      z.record(z.union([z.unknown(), z.string()])).and(
        z.object({
          status: z.literal('completed'),
        }),
      ),
      z.record(z.union([z.unknown(), z.string()])).and(
        z.object({
          status: z.union([z.literal('queued'), z.literal('in_progress')]).optional(),
        }),
      ),
    ])
    .and(
      z.object({
        actions: z
          .array(
            z.object({
              description: z.string(),
              identifier: z.string(),
              label: z.string(),
            }),
          )
          .optional(),
        completed_at: z.string().optional(),
        conclusion: z
          .union([
            z.literal('action_required'),
            z.literal('cancelled'),
            z.literal('failure'),
            z.literal('neutral'),
            z.literal('success'),
            z.literal('skipped'),
            z.literal('stale'),
            z.literal('timed_out'),
          ])
          .optional(),
        details_url: z.string().optional(),
        external_id: z.string().optional(),
        head_sha: z.string(),
        name: z.string(),
        output: z
          .object({
            annotations: z
              .array(
                z.object({
                  annotation_level: z.union([z.literal('notice'), z.literal('warning'), z.literal('failure')]),
                  end_column: z.number().optional(),
                  end_line: z.number(),
                  message: z.string(),
                  path: z.string(),
                  raw_details: z.string().optional(),
                  start_column: z.number().optional(),
                  start_line: z.number(),
                  title: z.string().optional(),
                }),
              )
              .optional(),
            images: z
              .array(
                z.object({
                  alt: z.string(),
                  caption: z.string().optional(),
                  image_url: z.string(),
                }),
              )
              .optional(),
            summary: z.string(),
            text: z.string().optional(),
            title: z.string(),
          })
          .optional(),
        started_at: z.string().optional(),
        status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]).optional(),
      }),
    ),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checkRunSchema = z.object({
  app: nullableIntegrationSchema,
  check_suite: z
    .object({
      id: z.number(),
    })
    .nullable(),
  completed_at: z.string().nullable(),
  conclusion: z
    .union([
      z.literal('success'),
      z.literal('failure'),
      z.literal('neutral'),
      z.literal('cancelled'),
      z.literal('skipped'),
      z.literal('timed_out'),
      z.literal('action_required'),
    ])
    .nullable(),
  deployment: deploymentSimpleSchema.optional(),
  details_url: z.string().nullable(),
  external_id: z.string().nullable(),
  head_sha: z.string(),
  html_url: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  output: z.object({
    annotations_count: z.number(),
    annotations_url: z.string(),
    summary: z.string().nullable(),
    text: z.string().nullable(),
    title: z.string().nullable(),
  }),
  pull_requests: z.array(pullRequestMinimalSchema),
  started_at: z.string().nullable(),
  status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]),
  url: z.string(),
});

export const checksCreateErrorSchema = z.unknown();

export const checksGetDataSchema = z.object({
  path: z.object({
    check_run_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checksGetResponseSchema = checkRunSchema;

export const checksGetErrorSchema = z.unknown();

export const checksUpdateDataSchema = z.object({
  body: z.union([
    z.record(z.union([z.unknown(), z.string()])).and(
      z.object({
        status: z.literal('completed').optional(),
      }),
    ),
    z.record(z.union([z.unknown(), z.string()])).and(
      z.object({
        status: z.union([z.literal('queued'), z.literal('in_progress')]).optional(),
      }),
    ),
    z.object({
      actions: z
        .array(
          z.object({
            description: z.string(),
            identifier: z.string(),
            label: z.string(),
          }),
        )
        .optional(),
      completed_at: z.string().optional(),
      conclusion: z
        .union([
          z.literal('action_required'),
          z.literal('cancelled'),
          z.literal('failure'),
          z.literal('neutral'),
          z.literal('success'),
          z.literal('skipped'),
          z.literal('stale'),
          z.literal('timed_out'),
        ])
        .optional(),
      details_url: z.string().optional(),
      external_id: z.string().optional(),
      name: z.string().optional(),
      output: z
        .object({
          annotations: z
            .array(
              z.object({
                annotation_level: z.union([z.literal('notice'), z.literal('warning'), z.literal('failure')]),
                end_column: z.number().optional(),
                end_line: z.number(),
                message: z.string(),
                path: z.string(),
                raw_details: z.string().optional(),
                start_column: z.number().optional(),
                start_line: z.number(),
                title: z.string().optional(),
              }),
            )
            .optional(),
          images: z
            .array(
              z.object({
                alt: z.string(),
                caption: z.string().optional(),
                image_url: z.string(),
              }),
            )
            .optional(),
          summary: z.string(),
          text: z.string().optional(),
          title: z.string().optional(),
        })
        .optional(),
      started_at: z.string().optional(),
      status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]).optional(),
    }),
  ]),
  path: z.object({
    check_run_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checksUpdateResponseSchema = checkRunSchema;

export const checksUpdateErrorSchema = z.unknown();

export const checksListAnnotationsDataSchema = z.object({
  path: z.object({
    check_run_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const checksListAnnotationsResponseSchema = z.array(checkAnnotationSchema);

export const checksListAnnotationsErrorSchema = z.unknown();

export const checksRerequestRunDataSchema = z.object({
  path: z.object({
    check_run_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checksRerequestRunResponseSchema = emptyObjectSchema;

export const checksRerequestRunErrorSchema = basicErrorSchema;

export const checksCreateSuiteDataSchema = z.object({
  body: z.object({
    head_sha: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checkSuiteSchema = z.object({
  after: z.string().nullable(),
  app: nullableIntegrationSchema,
  before: z.string().nullable(),
  check_runs_url: z.string(),
  conclusion: z
    .union([
      z.literal('success'),
      z.literal('failure'),
      z.literal('neutral'),
      z.literal('cancelled'),
      z.literal('skipped'),
      z.literal('timed_out'),
      z.literal('action_required'),
      z.literal('startup_failure'),
      z.literal('stale'),
    ])
    .nullable(),
  created_at: z.string().nullable(),
  head_branch: z.string().nullable(),
  head_commit: simpleCommitSchema,
  head_sha: z.string(),
  id: z.number(),
  latest_check_runs_count: z.number(),
  node_id: z.string(),
  pull_requests: z.array(pullRequestMinimalSchema).nullable(),
  repository: minimalRepositorySchema,
  rerequestable: z.boolean().optional(),
  runs_rerequestable: z.boolean().optional(),
  status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]).nullable(),
  updated_at: z.string().nullable(),
  url: z.string().nullable(),
});

export const checksCreateSuiteErrorSchema = z.unknown();

export const checksSetSuitesPreferencesDataSchema = z.object({
  body: z.object({
    auto_trigger_checks: z
      .array(
        z.object({
          app_id: z.number(),
          setting: z.boolean(),
        }),
      )
      .optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checkSuitePreferenceSchema = z.object({
  preferences: z.object({
    auto_trigger_checks: z
      .array(
        z.object({
          app_id: z.number(),
          setting: z.boolean(),
        }),
      )
      .optional(),
  }),
  repository: minimalRepositorySchema,
});

export const checksSetSuitesPreferencesErrorSchema = z.unknown();

export const checksGetSuiteDataSchema = z.object({
  path: z.object({
    check_suite_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checksGetSuiteResponseSchema = checkSuiteSchema;

export const checksGetSuiteErrorSchema = z.unknown();

export const checksListForSuiteDataSchema = z.object({
  path: z.object({
    check_suite_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      check_name: z.string().optional(),
      filter: z.union([z.literal('latest'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]).optional(),
    })
    .optional(),
});

export const checksListForSuiteResponseSchema = z.object({
  check_runs: z.array(checkRunSchema),
  total_count: z.number(),
});

export const checksListForSuiteErrorSchema = z.unknown();

export const checksRerequestSuiteDataSchema = z.object({
  path: z.object({
    check_suite_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const checksRerequestSuiteResponseSchema = emptyObjectSchema;

export const checksRerequestSuiteErrorSchema = z.unknown();

export const codeScanningListAlertsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      ref: codeScanningRefSchema.optional(),
      severity: codeScanningAlertSeveritySchema.optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: codeScanningAlertStateSchema.optional(),
      tool_guid: codeScanningAnalysisToolGuidSchema.optional(),
      tool_name: codeScanningAnalysisToolNameSchema.optional(),
    })
    .optional(),
});

export const codeScanningAlertItemsSchema = z.object({
  created_at: alertCreatedAtSchema,
  dismissed_at: alertDismissedAtSchema,
  dismissed_by: nullableSimpleUserSchema,
  dismissed_comment: codeScanningAlertDismissedCommentSchema.optional(),
  dismissed_reason: codeScanningAlertDismissedReasonSchema,
  fixed_at: alertFixedAtSchema.optional(),
  html_url: alertHtmlUrlSchema,
  instances_url: alertInstancesUrlSchema,
  most_recent_instance: codeScanningAlertInstanceSchema,
  number: alertNumberSchema,
  rule: codeScanningAlertRuleSummarySchema,
  state: codeScanningAlertStateSchema,
  tool: codeScanningAnalysisToolSchema,
  updated_at: alertUpdatedAtSchema.optional(),
  url: alertUrlSchema,
});

export const codeScanningListAlertsForRepoErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningGetAlertDataSchema = z.object({
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningAlertSchema = z.object({
  created_at: alertCreatedAtSchema,
  dismissed_at: alertDismissedAtSchema,
  dismissed_by: nullableSimpleUserSchema,
  dismissed_comment: codeScanningAlertDismissedCommentSchema.optional(),
  dismissed_reason: codeScanningAlertDismissedReasonSchema,
  fixed_at: alertFixedAtSchema.optional(),
  html_url: alertHtmlUrlSchema,
  instances_url: alertInstancesUrlSchema,
  most_recent_instance: codeScanningAlertInstanceSchema,
  number: alertNumberSchema,
  rule: codeScanningAlertRuleSchema,
  state: codeScanningAlertStateSchema,
  tool: codeScanningAnalysisToolSchema,
  updated_at: alertUpdatedAtSchema.optional(),
  url: alertUrlSchema,
});

export const codeScanningGetAlertErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningUpdateAlertDataSchema = z.object({
  body: z.object({
    dismissed_comment: codeScanningAlertDismissedCommentSchema.optional(),
    dismissed_reason: codeScanningAlertDismissedReasonSchema.optional(),
    state: codeScanningAlertSetStateSchema,
  }),
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningUpdateAlertResponseSchema = codeScanningAlertSchema;

export const codeScanningUpdateAlertErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningListAlertInstancesDataSchema = z.object({
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      ref: codeScanningRefSchema.optional(),
    })
    .optional(),
});

export const codeScanningListAlertInstancesResponseSchema = z.array(codeScanningAlertInstanceSchema);

export const codeScanningListAlertInstancesErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningListRecentAnalysesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      ref: codeScanningRefSchema.optional(),
      sarif_id: codeScanningAnalysisSarifIdSchema.optional(),
      sort: z.literal('created').optional(),
      tool_guid: codeScanningAnalysisToolGuidSchema.optional(),
      tool_name: codeScanningAnalysisToolNameSchema.optional(),
    })
    .optional(),
});

export const codeScanningAnalysisSchema = z.object({
  analysis_key: codeScanningAnalysisAnalysisKeySchema,
  category: codeScanningAnalysisCategorySchema.optional(),
  commit_sha: codeScanningAnalysisCommitShaSchema,
  created_at: codeScanningAnalysisCreatedAtSchema,
  deletable: z.boolean(),
  environment: codeScanningAnalysisEnvironmentSchema,
  error: z.string(),
  id: z.number(),
  ref: codeScanningRefSchema,
  results_count: z.number(),
  rules_count: z.number(),
  sarif_id: codeScanningAnalysisSarifIdSchema,
  tool: codeScanningAnalysisToolSchema,
  url: codeScanningAnalysisUrlSchema,
  warning: z.string(),
});

export const codeScanningListRecentAnalysesErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningDeleteAnalysisDataSchema = z.object({
  path: z.object({
    analysis_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      confirm_delete: z.string().optional().nullable(),
    })
    .optional(),
});

export const codeScanningDeleteAnalysisResponseSchema = codeScanningAnalysisDeletionSchema;

export const codeScanningDeleteAnalysisErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningGetAnalysisDataSchema = z.object({
  path: z.object({
    analysis_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningGetAnalysisResponseSchema = codeScanningAnalysisSchema;

export const codeScanningGetAnalysisErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningListCodeqlDatabasesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningListCodeqlDatabasesResponseSchema = z.array(codeScanningCodeqlDatabaseSchema);

export const codeScanningListCodeqlDatabasesErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningGetCodeqlDatabaseDataSchema = z.object({
  path: z.object({
    language: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningGetCodeqlDatabaseResponseSchema = codeScanningCodeqlDatabaseSchema;

export const codeScanningGetCodeqlDatabaseErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningUploadSarifDataSchema = z.object({
  body: z.object({
    checkout_uri: z.string().optional(),
    commit_sha: codeScanningAnalysisCommitShaSchema,
    ref: codeScanningRefSchema,
    sarif: codeScanningAnalysisSarifFileSchema,
    started_at: z.string().optional(),
    tool_name: z.string().optional(),
    validate: z.boolean().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codeScanningUploadSarifResponseSchema = codeScanningSarifsReceiptSchema;

export const codeScanningUploadSarifErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codeScanningGetSarifDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    sarif_id: z.string(),
  }),
});

export const codeScanningGetSarifResponseSchema = codeScanningSarifsStatusSchema;

export const codeScanningGetSarifErrorSchema = z.union([
  basicErrorSchema,
  z.unknown(),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const reposCodeownersErrorsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      ref: z.string().optional(),
    })
    .optional(),
});

export const reposCodeownersErrorsResponseSchema = codeownersErrorsSchema;

export const reposCodeownersErrorsErrorSchema = z.unknown();

export const codespacesListInRepositoryForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListInRepositoryForAuthenticatedUserResponseSchema = z.object({
  codespaces: z.array(codespaceSchema),
  total_count: z.number(),
});

export const codespacesListInRepositoryForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesCreateWithRepoForAuthenticatedUserDataSchema = z.object({
  body: z
    .object({
      client_ip: z.string().optional(),
      devcontainer_path: z.string().optional(),
      display_name: z.string().optional(),
      idle_timeout_minutes: z.number().optional(),
      location: z.string().optional(),
      machine: z.string().optional(),
      multi_repo_permissions_opt_out: z.boolean().optional(),
      ref: z.string().optional(),
      retention_period_minutes: z.number().optional(),
      working_directory: z.string().optional(),
    })
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codespacesCreateWithRepoForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesCreateWithRepoForAuthenticatedUserErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codespacesListDevcontainersInRepositoryForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListDevcontainersInRepositoryForAuthenticatedUserResponseSchema = z.object({
  devcontainers: z.array(
    z.object({
      name: z.string().optional(),
      path: z.string(),
    }),
  ),
  total_count: z.number(),
});

export const codespacesListDevcontainersInRepositoryForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesRepoMachinesForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      client_ip: z.string().optional(),
      location: z.string().optional(),
    })
    .optional(),
});

export const codespacesRepoMachinesForAuthenticatedUserResponseSchema = z.object({
  machines: z.array(codespaceMachineSchema),
  total_count: z.number(),
});

export const codespacesRepoMachinesForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesPreFlightWithRepoForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      client_ip: z.string().optional(),
      ref: z.string().optional(),
    })
    .optional(),
});

export const codespacesPreFlightWithRepoForAuthenticatedUserResponseSchema = z.object({
  billable_owner: simpleUserSchema.optional(),
  defaults: z
    .object({
      devcontainer_path: z.string().nullable(),
      location: z.string(),
    })
    .optional(),
});

export const codespacesPreFlightWithRepoForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesListRepoSecretsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListRepoSecretsResponseSchema = z.object({
  secrets: z.array(repoCodespacesSecretSchema),
  total_count: z.number(),
});

export const codespacesListRepoSecretsErrorSchema = z.unknown();

export const codespacesGetRepoPublicKeyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const codespacesGetRepoPublicKeyResponseSchema = codespacesPublicKeySchema;

export const codespacesGetRepoPublicKeyErrorSchema = z.unknown();

export const codespacesDeleteRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesDeleteRepoSecretResponseSchema = z.void();

export const codespacesDeleteRepoSecretErrorSchema = z.unknown();

export const codespacesGetRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesGetRepoSecretResponseSchema = repoCodespacesSecretSchema;

export const codespacesGetRepoSecretErrorSchema = z.unknown();

export const codespacesCreateOrUpdateRepoSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const codespacesCreateOrUpdateRepoSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const codespacesCreateOrUpdateRepoSecretErrorSchema = z.unknown();

export const reposListCollaboratorsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      affiliation: z.union([z.literal('outside'), z.literal('direct'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      permission: z
        .union([z.literal('pull'), z.literal('triage'), z.literal('push'), z.literal('maintain'), z.literal('admin')])
        .optional(),
    })
    .optional(),
});

export const reposListCollaboratorsResponseSchema = z.array(collaboratorSchema);

export const reposListCollaboratorsErrorSchema = basicErrorSchema;

export const reposRemoveCollaboratorDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  }),
});

export const reposRemoveCollaboratorResponseSchema = z.void();

export const reposRemoveCollaboratorErrorSchema = z.unknown();

export const reposCheckCollaboratorDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  }),
});

export const reposCheckCollaboratorResponseSchema = z.void();

export const reposCheckCollaboratorErrorSchema = z.unknown();

export const reposAddCollaboratorDataSchema = z.object({
  body: z
    .object({
      permission: z.string().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  }),
});

export const reposAddCollaboratorResponseSchema = z.union([repositoryInvitationSchema, z.void()]);

export const reposAddCollaboratorErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetCollaboratorPermissionLevelDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  }),
});

export const reposGetCollaboratorPermissionLevelResponseSchema = repositoryCollaboratorPermissionSchema;

export const reposGetCollaboratorPermissionLevelErrorSchema = basicErrorSchema;

export const reposListCommitCommentsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListCommitCommentsForRepoResponseSchema = z.array(commitCommentSchema);

export const reposListCommitCommentsForRepoErrorSchema = z.unknown();

export const reposDeleteCommitCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteCommitCommentResponseSchema = z.void();

export const reposDeleteCommitCommentErrorSchema = basicErrorSchema;

export const reposGetCommitCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetCommitCommentResponseSchema = commitCommentSchema;

export const reposGetCommitCommentErrorSchema = basicErrorSchema;

export const reposUpdateCommitCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateCommitCommentResponseSchema = commitCommentSchema;

export const reposUpdateCommitCommentErrorSchema = basicErrorSchema;

export const reactionsListForCommitCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForCommitCommentResponseSchema = z.array(reactionSchema);

export const reactionsListForCommitCommentErrorSchema = basicErrorSchema;

export const reactionsCreateForCommitCommentDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reactionsCreateForCommitCommentResponseSchema = reactionSchema;

export const reactionsCreateForCommitCommentErrorSchema = validationErrorSchema;

export const reactionsDeleteForCommitCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    reaction_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsDeleteForCommitCommentResponseSchema = z.void();

export const reactionsDeleteForCommitCommentErrorSchema = z.unknown();

export const reposListCommitsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      author: z.string().optional(),
      page: z.number().optional(),
      path: z.string().optional(),
      per_page: z.number().optional(),
      sha: z.string().optional(),
      since: z.string().optional(),
      until: z.string().optional(),
    })
    .optional(),
});

export const reposListCommitsResponseSchema = z.array(commitSchema);

export const reposListCommitsErrorSchema = basicErrorSchema;

export const reposListBranchesForHeadCommitDataSchema = z.object({
  path: z.object({
    commit_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposListBranchesForHeadCommitResponseSchema = z.array(branchShortSchema);

export const reposListBranchesForHeadCommitErrorSchema = validationErrorSchema;

export const reposListCommentsForCommitDataSchema = z.object({
  path: z.object({
    commit_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListCommentsForCommitResponseSchema = z.array(commitCommentSchema);

export const reposListCommentsForCommitErrorSchema = z.unknown();

export const reposCreateCommitCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
    line: z.number().optional(),
    path: z.string().optional(),
    position: z.number().optional(),
  }),
  path: z.object({
    commit_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateCommitCommentResponseSchema = commitCommentSchema;

export const reposCreateCommitCommentErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposListPullRequestsAssociatedWithCommitDataSchema = z.object({
  path: z.object({
    commit_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListPullRequestsAssociatedWithCommitResponseSchema = z.array(pullRequestSimpleSchema);

export const reposListPullRequestsAssociatedWithCommitErrorSchema = z.unknown();

export const reposGetCommitDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposGetCommitResponseSchema = commitSchema;

export const reposGetCommitErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const checksListForRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      app_id: z.number().optional(),
      check_name: z.string().optional(),
      filter: z.union([z.literal('latest'), z.literal('all')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      status: z.union([z.literal('queued'), z.literal('in_progress'), z.literal('completed')]).optional(),
    })
    .optional(),
});

export const checksListForRefResponseSchema = z.object({
  check_runs: z.array(checkRunSchema),
  total_count: z.number(),
});

export const checksListForRefErrorSchema = z.unknown();

export const checksListSuitesForRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      app_id: z.number().optional(),
      check_name: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const checksListSuitesForRefResponseSchema = z.object({
  check_suites: z.array(checkSuiteSchema),
  total_count: z.number(),
});

export const checksListSuitesForRefErrorSchema = z.unknown();

export const reposGetCombinedStatusForRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const combinedCommitStatusSchema = z.object({
  commit_url: z.string(),
  repository: minimalRepositorySchema,
  sha: z.string(),
  state: z.string(),
  statuses: z.array(simpleCommitStatusSchema),
  total_count: z.number(),
  url: z.string(),
});

export const reposGetCombinedStatusForRefErrorSchema = basicErrorSchema;

export const reposListCommitStatusesForRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListCommitStatusesForRefResponseSchema = z.array(statusSchema);

export const reposListCommitStatusesForRefErrorSchema = basicErrorSchema;

export const reposGetCommunityProfileMetricsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const communityProfileSchema = z.object({
  content_reports_enabled: z.boolean().optional(),
  description: z.string().nullable(),
  documentation: z.string().nullable(),
  files: z.object({
    code_of_conduct: nullableCodeOfConductSimpleSchema,
    code_of_conduct_file: nullableCommunityHealthFileSchema,
    contributing: nullableCommunityHealthFileSchema,
    issue_template: nullableCommunityHealthFileSchema,
    license: nullableLicenseSimpleSchema,
    pull_request_template: nullableCommunityHealthFileSchema,
    readme: nullableCommunityHealthFileSchema,
  }),
  health_percentage: z.number(),
  updated_at: z.string().nullable(),
});

export const reposGetCommunityProfileMetricsErrorSchema = z.unknown();

export const reposCompareCommitsDataSchema = z.object({
  path: z.object({
    basehead: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const commitComparisonSchema = z.object({
  ahead_by: z.number(),
  base_commit: commitSchema,
  behind_by: z.number(),
  commits: z.array(commitSchema),
  diff_url: z.string(),
  files: z.array(diffEntrySchema).optional(),
  html_url: z.string(),
  merge_base_commit: commitSchema,
  patch_url: z.string(),
  permalink_url: z.string(),
  status: z.union([z.literal('diverged'), z.literal('ahead'), z.literal('behind'), z.literal('identical')]),
  total_commits: z.number(),
  url: z.string(),
});

export const reposCompareCommitsErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const reposDeleteFileDataSchema = z.object({
  body: z.object({
    author: z
      .object({
        email: z.string().optional(),
        name: z.string().optional(),
      })
      .optional(),
    branch: z.string().optional(),
    committer: z
      .object({
        email: z.string().optional(),
        name: z.string().optional(),
      })
      .optional(),
    message: z.string(),
    sha: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    path: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteFileResponseSchema = fileCommitSchema;

export const reposDeleteFileErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const reposGetContentDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    path: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      ref: z.string().optional(),
    })
    .optional(),
});

export const reposGetContentResponseSchema = z.union([
  contentDirectorySchema,
  contentFileSchema,
  contentSymlinkSchema,
  contentSubmoduleSchema,
]);

export const reposGetContentErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const reposCreateOrUpdateFileContentsDataSchema = z.object({
  body: z.object({
    author: z
      .object({
        date: z.string().optional(),
        email: z.string(),
        name: z.string(),
      })
      .optional(),
    branch: z.string().optional(),
    committer: z
      .object({
        date: z.string().optional(),
        email: z.string(),
        name: z.string(),
      })
      .optional(),
    content: z.string(),
    message: z.string(),
    sha: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    path: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateOrUpdateFileContentsResponseSchema = fileCommitSchema;

export const reposCreateOrUpdateFileContentsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposListContributorsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      anon: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListContributorsResponseSchema = z.union([z.array(contributorSchema), z.void()]);

export const reposListContributorsErrorSchema = basicErrorSchema;

export const dependabotListAlertsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      ecosystem: z.string().optional(),
      first: z.number().optional(),
      last: z.number().optional(),
      manifest: z.string().optional(),
      package: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      scope: z.union([z.literal('development'), z.literal('runtime')]).optional(),
      severity: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.string().optional(),
    })
    .optional(),
});

export const dependabotListAlertsForRepoResponseSchema = z.array(dependabotAlertSchema);

export const dependabotListAlertsForRepoErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const dependabotGetAlertDataSchema = z.object({
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const dependabotGetAlertResponseSchema = dependabotAlertSchema;

export const dependabotGetAlertErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const dependabotUpdateAlertDataSchema = z.object({
  body: z.object({
    dismissed_comment: z.string().optional(),
    dismissed_reason: z
      .union([
        z.literal('fix_started'),
        z.literal('inaccurate'),
        z.literal('no_bandwidth'),
        z.literal('not_used'),
        z.literal('tolerable_risk'),
      ])
      .optional(),
    state: z.union([z.literal('dismissed'), z.literal('open')]),
  }),
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const dependabotUpdateAlertResponseSchema = dependabotAlertSchema;

export const dependabotUpdateAlertErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const dependabotListRepoSecretsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const dependabotListRepoSecretsResponseSchema = z.object({
  secrets: z.array(dependabotSecretSchema),
  total_count: z.number(),
});

export const dependabotListRepoSecretsErrorSchema = z.unknown();

export const dependabotGetRepoPublicKeyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const dependabotGetRepoPublicKeyResponseSchema = dependabotPublicKeySchema;

export const dependabotGetRepoPublicKeyErrorSchema = z.unknown();

export const dependabotDeleteRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotDeleteRepoSecretResponseSchema = z.void();

export const dependabotDeleteRepoSecretErrorSchema = z.unknown();

export const dependabotGetRepoSecretDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotGetRepoSecretResponseSchema = dependabotSecretSchema;

export const dependabotGetRepoSecretErrorSchema = z.unknown();

export const dependabotCreateOrUpdateRepoSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  }),
});

export const dependabotCreateOrUpdateRepoSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const dependabotCreateOrUpdateRepoSecretErrorSchema = z.unknown();

export const dependencyGraphDiffRangeDataSchema = z.object({
  path: z.object({
    basehead: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      name: z.string().optional(),
    })
    .optional(),
});

export const dependencyGraphDiffRangeResponseSchema = dependencyGraphDiffSchema;

export const dependencyGraphDiffRangeErrorSchema = basicErrorSchema;

export const dependencyGraphCreateRepositorySnapshotDataSchema = z.object({
  body: snapshotSchema,
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const dependencyGraphCreateRepositorySnapshotResponseSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  message: z.string(),
  result: z.string(),
});

export const dependencyGraphCreateRepositorySnapshotErrorSchema = z.unknown();

export const reposListDeploymentsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      environment: z.string().optional().nullable(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      ref: z.string().optional(),
      sha: z.string().optional(),
      task: z.string().optional(),
    })
    .optional(),
});

export const reposListDeploymentsResponseSchema = z.array(deploymentSchema);

export const reposListDeploymentsErrorSchema = z.unknown();

export const reposCreateDeploymentDataSchema = z.object({
  body: z.object({
    auto_merge: z.boolean().optional(),
    description: z.string().optional().nullable(),
    environment: z.string().optional(),
    payload: z.union([z.record(z.unknown()), z.string()]).optional(),
    production_environment: z.boolean().optional(),
    ref: z.string(),
    required_contexts: z.array(z.string()).optional(),
    task: z.string().optional(),
    transient_environment: z.boolean().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateDeploymentResponseSchema = z.union([
  deploymentSchema,
  z.object({
    message: z.string().optional(),
  }),
]);

export const reposCreateDeploymentErrorSchema = z.union([z.unknown(), validationErrorSchema]);

export const reposDeleteDeploymentDataSchema = z.object({
  path: z.object({
    deployment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteDeploymentResponseSchema = z.void();

export const reposDeleteDeploymentErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const reposGetDeploymentDataSchema = z.object({
  path: z.object({
    deployment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetDeploymentResponseSchema = deploymentSchema;

export const reposGetDeploymentErrorSchema = basicErrorSchema;

export const reposListDeploymentStatusesDataSchema = z.object({
  path: z.object({
    deployment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListDeploymentStatusesResponseSchema = z.array(deploymentStatusSchema);

export const reposListDeploymentStatusesErrorSchema = basicErrorSchema;

export const reposCreateDeploymentStatusDataSchema = z.object({
  body: z.object({
    auto_inactive: z.boolean().optional(),
    description: z.string().optional(),
    environment: z.union([z.literal('production'), z.literal('staging'), z.literal('qa')]).optional(),
    environment_url: z.string().optional(),
    log_url: z.string().optional(),
    state: z.union([
      z.literal('error'),
      z.literal('failure'),
      z.literal('inactive'),
      z.literal('in_progress'),
      z.literal('queued'),
      z.literal('pending'),
      z.literal('success'),
    ]),
    target_url: z.string().optional(),
  }),
  path: z.object({
    deployment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateDeploymentStatusResponseSchema = deploymentStatusSchema;

export const reposCreateDeploymentStatusErrorSchema = validationErrorSchema;

export const reposGetDeploymentStatusDataSchema = z.object({
  path: z.object({
    deployment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
    status_id: z.number(),
  }),
});

export const reposGetDeploymentStatusResponseSchema = deploymentStatusSchema;

export const reposGetDeploymentStatusErrorSchema = basicErrorSchema;

export const reposCreateDispatchEventDataSchema = z.object({
  body: z.object({
    client_payload: z.record(z.unknown()).optional(),
    event_type: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateDispatchEventResponseSchema = z.void();

export const reposCreateDispatchEventErrorSchema = validationErrorSchema;

export const reposGetAllEnvironmentsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const environmentSchema = z.object({
  created_at: z.string(),
  deployment_branch_policy: deploymentBranchPolicySettingsSchema.optional(),
  html_url: z.string(),
  id: z.number(),
  name: z.string(),
  node_id: z.string(),
  protection_rules: z
    .array(
      z.union([
        z.object({
          id: z.number(),
          node_id: z.string(),
          type: z.string(),
          wait_timer: waitTimerSchema.optional(),
        }),
        z.object({
          id: z.number(),
          node_id: z.string(),
          reviewers: z
            .array(
              z.object({
                reviewer: z.union([simpleUserSchema, teamSchema]).optional(),
                type: deploymentReviewerTypeSchema.optional(),
              }),
            )
            .optional(),
          type: z.string(),
        }),
        z.object({
          id: z.number(),
          node_id: z.string(),
          type: z.string(),
        }),
      ]),
    )
    .optional(),
  updated_at: z.string(),
  url: z.string(),
});

export const reposGetAllEnvironmentsErrorSchema = z.unknown();

export const reposDeleteAnEnvironmentDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteAnEnvironmentResponseSchema = z.void();

export const reposDeleteAnEnvironmentErrorSchema = z.unknown();

export const reposGetEnvironmentDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetEnvironmentResponseSchema = environmentSchema;

export const reposGetEnvironmentErrorSchema = z.unknown();

export const reposCreateOrUpdateEnvironmentDataSchema = z.object({
  body: z
    .object({
      deployment_branch_policy: deploymentBranchPolicySettingsSchema.optional(),
      reviewers: z
        .array(
          z.object({
            id: z.number().optional(),
            type: deploymentReviewerTypeSchema.optional(),
          }),
        )
        .optional()
        .nullable(),
      wait_timer: waitTimerSchema.optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateOrUpdateEnvironmentResponseSchema = environmentSchema;

export const reposCreateOrUpdateEnvironmentErrorSchema = basicErrorSchema;

export const reposListDeploymentBranchPoliciesDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListDeploymentBranchPoliciesResponseSchema = z.object({
  branch_policies: z.array(deploymentBranchPolicySchema),
  total_count: z.number(),
});

export const reposListDeploymentBranchPoliciesErrorSchema = z.unknown();

export const reposCreateDeploymentBranchPolicyDataSchema = z.object({
  body: deploymentBranchPolicyNamePatternSchema,
  path: z.object({
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateDeploymentBranchPolicyResponseSchema = deploymentBranchPolicySchema;

export const reposCreateDeploymentBranchPolicyErrorSchema = z.unknown();

export const reposDeleteDeploymentBranchPolicyDataSchema = z.object({
  path: z.object({
    branch_policy_id: z.number(),
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteDeploymentBranchPolicyResponseSchema = z.void();

export const reposDeleteDeploymentBranchPolicyErrorSchema = z.unknown();

export const reposGetDeploymentBranchPolicyDataSchema = z.object({
  path: z.object({
    branch_policy_id: z.number(),
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetDeploymentBranchPolicyResponseSchema = deploymentBranchPolicySchema;

export const reposGetDeploymentBranchPolicyErrorSchema = z.unknown();

export const reposUpdateDeploymentBranchPolicyDataSchema = z.object({
  body: deploymentBranchPolicyNamePatternSchema,
  path: z.object({
    branch_policy_id: z.number(),
    environment_name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateDeploymentBranchPolicyResponseSchema = deploymentBranchPolicySchema;

export const reposUpdateDeploymentBranchPolicyErrorSchema = z.unknown();

export const activityListRepoEventsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListRepoEventsResponseSchema = z.array(eventSchema);

export const activityListRepoEventsErrorSchema = z.unknown();

export const reposListForksDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z
        .union([z.literal('newest'), z.literal('oldest'), z.literal('stargazers'), z.literal('watchers')])
        .optional(),
    })
    .optional(),
});

export const reposListForksResponseSchema = z.array(minimalRepositorySchema);

export const reposListForksErrorSchema = basicErrorSchema;

export const reposCreateForkDataSchema = z.object({
  body: z
    .object({
      default_branch_only: z.boolean().optional(),
      name: z.string().optional(),
      organization: z.string().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateForkResponseSchema = fullRepositorySchema;

export const reposCreateForkErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitCreateBlobDataSchema = z.object({
  body: z.object({
    content: z.string(),
    encoding: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitCreateBlobResponseSchema = shortBlobSchema;

export const gitCreateBlobErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitGetBlobDataSchema = z.object({
  path: z.object({
    file_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitGetBlobResponseSchema = blobSchema;

export const gitGetBlobErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitCreateCommitDataSchema = z.object({
  body: z.object({
    author: z
      .object({
        date: z.string().optional(),
        email: z.string(),
        name: z.string(),
      })
      .optional(),
    committer: z
      .object({
        date: z.string().optional(),
        email: z.string().optional(),
        name: z.string().optional(),
      })
      .optional(),
    message: z.string(),
    parents: z.array(z.string()).optional(),
    signature: z.string().optional(),
    tree: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitCreateCommitResponseSchema = gitCommitSchema;

export const gitCreateCommitErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitGetCommitDataSchema = z.object({
  path: z.object({
    commit_sha: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitGetCommitResponseSchema = gitCommitSchema;

export const gitGetCommitErrorSchema = basicErrorSchema;

export const gitListMatchingRefsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const gitListMatchingRefsResponseSchema = z.array(gitRefSchema);

export const gitListMatchingRefsErrorSchema = z.unknown();

export const gitGetRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const gitGetRefResponseSchema = gitRefSchema;

export const gitGetRefErrorSchema = basicErrorSchema;

export const gitCreateRefDataSchema = z.object({
  body: z.object({
    key: z.string().optional(),
    ref: z.string(),
    sha: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitCreateRefResponseSchema = gitRefSchema;

export const gitCreateRefErrorSchema = validationErrorSchema;

export const gitDeleteRefDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const gitDeleteRefResponseSchema = z.void();

export const gitDeleteRefErrorSchema = validationErrorSchema;

export const gitUpdateRefDataSchema = z.object({
  body: z.object({
    force: z.boolean().optional(),
    sha: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const gitUpdateRefResponseSchema = gitRefSchema;

export const gitUpdateRefErrorSchema = validationErrorSchema;

export const gitCreateTagDataSchema = z.object({
  body: z.object({
    message: z.string(),
    object: z.string(),
    tag: z.string(),
    tagger: z
      .object({
        date: z.string().optional(),
        email: z.string(),
        name: z.string(),
      })
      .optional(),
    type: z.union([z.literal('commit'), z.literal('tree'), z.literal('blob')]),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitCreateTagResponseSchema = gitTagSchema;

export const gitCreateTagErrorSchema = validationErrorSchema;

export const gitGetTagDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    tag_sha: z.string(),
  }),
});

export const gitGetTagResponseSchema = gitTagSchema;

export const gitGetTagErrorSchema = basicErrorSchema;

export const gitCreateTreeDataSchema = z.object({
  body: z.object({
    base_tree: z.string().optional(),
    tree: z.array(
      z.object({
        content: z.string().optional(),
        mode: z
          .union([
            z.literal('100644'),
            z.literal('100755'),
            z.literal('040000'),
            z.literal('160000'),
            z.literal('120000'),
          ])
          .optional(),
        path: z.string().optional(),
        sha: z.string().optional().nullable(),
        type: z.union([z.literal('blob'), z.literal('tree'), z.literal('commit')]).optional(),
      }),
    ),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const gitCreateTreeResponseSchema = gitTreeSchema;

export const gitCreateTreeErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const gitGetTreeDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    tree_sha: z.string(),
  }),
  query: z
    .object({
      recursive: z.string().optional(),
    })
    .optional(),
});

export const gitGetTreeResponseSchema = gitTreeSchema;

export const gitGetTreeErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposListWebhooksDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const hookSchema = z.object({
  active: z.boolean(),
  config: z.object({
    content_type: webhookConfigContentTypeSchema.optional(),
    digest: z.string().optional(),
    email: z.string().optional(),
    insecure_ssl: webhookConfigInsecureSslSchema.optional(),
    password: z.string().optional(),
    room: z.string().optional(),
    secret: webhookConfigSecretSchema.optional(),
    subdomain: z.string().optional(),
    token: z.string().optional(),
    url: webhookConfigUrlSchema.optional(),
  }),
  created_at: z.string(),
  deliveries_url: z.string().optional(),
  events: z.array(z.string()),
  id: z.number(),
  last_response: hookResponseSchema,
  name: z.string(),
  ping_url: z.string(),
  test_url: z.string(),
  type: z.string(),
  updated_at: z.string(),
  url: z.string(),
});

export const reposListWebhooksErrorSchema = basicErrorSchema;

export const reposCreateWebhookDataSchema = z.object({
  body: z
    .object({
      active: z.boolean().optional(),
      config: z
        .object({
          content_type: webhookConfigContentTypeSchema.optional(),
          digest: z.string().optional(),
          insecure_ssl: webhookConfigInsecureSslSchema.optional(),
          secret: webhookConfigSecretSchema.optional(),
          token: z.string().optional(),
          url: webhookConfigUrlSchema.optional(),
        })
        .optional(),
      events: z.array(z.string()).optional(),
      name: z.string().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateWebhookResponseSchema = hookSchema;

export const reposCreateWebhookErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposDeleteWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteWebhookResponseSchema = z.void();

export const reposDeleteWebhookErrorSchema = basicErrorSchema;

export const reposGetWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetWebhookResponseSchema = hookSchema;

export const reposGetWebhookErrorSchema = basicErrorSchema;

export const reposUpdateWebhookDataSchema = z.object({
  body: z.object({
    active: z.boolean().optional(),
    add_events: z.array(z.string()).optional(),
    config: z
      .object({
        address: z.string().optional(),
        content_type: webhookConfigContentTypeSchema.optional(),
        insecure_ssl: webhookConfigInsecureSslSchema.optional(),
        room: z.string().optional(),
        secret: webhookConfigSecretSchema.optional(),
        url: webhookConfigUrlSchema,
      })
      .optional(),
    events: z.array(z.string()).optional(),
    remove_events: z.array(z.string()).optional(),
  }),
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateWebhookResponseSchema = hookSchema;

export const reposUpdateWebhookErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetWebhookConfigForRepoDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetWebhookConfigForRepoResponseSchema = webhookConfigSchema;

export const reposGetWebhookConfigForRepoErrorSchema = z.unknown();

export const reposUpdateWebhookConfigForRepoDataSchema = z.object({
  body: z
    .object({
      content_type: webhookConfigContentTypeSchema.optional(),
      insecure_ssl: webhookConfigInsecureSslSchema.optional(),
      secret: webhookConfigSecretSchema.optional(),
      url: webhookConfigUrlSchema.optional(),
    })
    .optional(),
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateWebhookConfigForRepoResponseSchema = webhookConfigSchema;

export const reposUpdateWebhookConfigForRepoErrorSchema = z.unknown();

export const reposListWebhookDeliveriesDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      cursor: z.string().optional(),
      per_page: z.number().optional(),
      redelivery: z.boolean().optional(),
    })
    .optional(),
});

export const reposListWebhookDeliveriesResponseSchema = z.array(hookDeliveryItemSchema);

export const reposListWebhookDeliveriesErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetWebhookDeliveryResponseSchema = hookDeliverySchema;

export const reposGetWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposRedeliverWebhookDeliveryDataSchema = z.object({
  path: z.object({
    delivery_id: z.number(),
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRedeliverWebhookDeliveryResponseSchema = z.record(z.unknown());

export const reposRedeliverWebhookDeliveryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposPingWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposPingWebhookResponseSchema = z.void();

export const reposPingWebhookErrorSchema = basicErrorSchema;

export const reposTestPushWebhookDataSchema = z.object({
  path: z.object({
    hook_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposTestPushWebhookResponseSchema = z.void();

export const reposTestPushWebhookErrorSchema = basicErrorSchema;

export const migrationsCancelImportDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsCancelImportResponseSchema = z.void();

export const migrationsCancelImportErrorSchema = basicErrorSchema;

export const migrationsGetImportStatusDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsGetImportStatusResponseSchema = importSchema;

export const migrationsGetImportStatusErrorSchema = basicErrorSchema;

export const migrationsUpdateImportDataSchema = z.object({
  body: z
    .object({
      tfvc_project: z.string().optional(),
      vcs: z.union([z.literal('subversion'), z.literal('tfvc'), z.literal('git'), z.literal('mercurial')]).optional(),
      vcs_password: z.string().optional(),
      vcs_username: z.string().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsUpdateImportResponseSchema = importSchema;

export const migrationsUpdateImportErrorSchema = basicErrorSchema;

export const migrationsStartImportDataSchema = z.object({
  body: z.object({
    tfvc_project: z.string().optional(),
    vcs: z.union([z.literal('subversion'), z.literal('git'), z.literal('mercurial'), z.literal('tfvc')]).optional(),
    vcs_password: z.string().optional(),
    vcs_url: z.string(),
    vcs_username: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsStartImportResponseSchema = importSchema;

export const migrationsStartImportErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const migrationsGetCommitAuthorsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      since: z.number().optional(),
    })
    .optional(),
});

export const migrationsGetCommitAuthorsResponseSchema = z.array(porterAuthorSchema);

export const migrationsGetCommitAuthorsErrorSchema = basicErrorSchema;

export const migrationsMapCommitAuthorDataSchema = z.object({
  body: z
    .object({
      email: z.string().optional(),
      name: z.string().optional(),
    })
    .optional(),
  path: z.object({
    author_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsMapCommitAuthorResponseSchema = porterAuthorSchema;

export const migrationsMapCommitAuthorErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const migrationsGetLargeFilesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsGetLargeFilesResponseSchema = z.array(porterLargeFileSchema);

export const migrationsGetLargeFilesErrorSchema = basicErrorSchema;

export const migrationsSetLfsPreferenceDataSchema = z.object({
  body: z.object({
    use_lfs: z.union([z.literal('opt_in'), z.literal('opt_out')]),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const migrationsSetLfsPreferenceResponseSchema = importSchema;

export const migrationsSetLfsPreferenceErrorSchema = z.union([validationErrorSchema, basicErrorSchema]);

export const appsGetRepoInstallationDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const appsGetRepoInstallationResponseSchema = installationSchema;

export const appsGetRepoInstallationErrorSchema = basicErrorSchema;

export const interactionsRemoveRestrictionsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const interactionsRemoveRestrictionsForRepoResponseSchema = z.void();

export const interactionsRemoveRestrictionsForRepoErrorSchema = z.unknown();

export const interactionsGetRestrictionsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const interactionsGetRestrictionsForRepoResponseSchema = z.union([
  interactionLimitResponseSchema,
  z.record(z.unknown()),
]);

export const interactionsGetRestrictionsForRepoErrorSchema = z.unknown();

export const interactionsSetRestrictionsForRepoDataSchema = z.object({
  body: interactionLimitSchema,
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const interactionsSetRestrictionsForRepoResponseSchema = interactionLimitResponseSchema;

export const interactionsSetRestrictionsForRepoErrorSchema = z.unknown();

export const reposListInvitationsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListInvitationsResponseSchema = z.array(repositoryInvitationSchema);

export const reposListInvitationsErrorSchema = z.unknown();

export const reposDeleteInvitationDataSchema = z.object({
  path: z.object({
    invitation_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteInvitationResponseSchema = z.void();

export const reposDeleteInvitationErrorSchema = z.unknown();

export const reposUpdateInvitationDataSchema = z.object({
  body: z
    .object({
      permissions: z
        .union([z.literal('read'), z.literal('write'), z.literal('maintain'), z.literal('triage'), z.literal('admin')])
        .optional(),
    })
    .optional(),
  path: z.object({
    invitation_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateInvitationResponseSchema = repositoryInvitationSchema;

export const reposUpdateInvitationErrorSchema = z.unknown();

export const issuesListForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      assignee: z.string().optional(),
      creator: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      labels: z.string().optional(),
      mentioned: z.string().optional(),
      milestone: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated'), z.literal('comments')]).optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const issuesListForRepoResponseSchema = z.array(issueSchema);

export const issuesListForRepoErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesCreateDataSchema = z.object({
  body: z.object({
    assignee: z.string().optional().nullable(),
    assignees: z.array(z.string()).optional(),
    body: z.string().optional(),
    labels: z
      .array(
        z.union([
          z.string(),
          z.object({
            color: z.string().optional().nullable(),
            description: z.string().optional().nullable(),
            id: z.number().optional(),
            name: z.string().optional(),
          }),
        ]),
      )
      .optional(),
    milestone: z.union([z.string(), z.number()]).optional().nullable(),
    title: z.union([z.string(), z.number()]),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCreateResponseSchema = issueSchema;

export const issuesCreateErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const issuesListCommentsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const issuesListCommentsForRepoResponseSchema = z.array(issueCommentSchema);

export const issuesListCommentsForRepoErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesDeleteCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesDeleteCommentResponseSchema = z.void();

export const issuesDeleteCommentErrorSchema = z.unknown();

export const issuesGetCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesGetCommentResponseSchema = issueCommentSchema;

export const issuesGetCommentErrorSchema = basicErrorSchema;

export const issuesUpdateCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesUpdateCommentResponseSchema = issueCommentSchema;

export const issuesUpdateCommentErrorSchema = validationErrorSchema;

export const reactionsListForIssueCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForIssueCommentResponseSchema = z.array(reactionSchema);

export const reactionsListForIssueCommentErrorSchema = basicErrorSchema;

export const reactionsCreateForIssueCommentDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reactionsCreateForIssueCommentResponseSchema = reactionSchema;

export const reactionsCreateForIssueCommentErrorSchema = validationErrorSchema;

export const reactionsDeleteForIssueCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    reaction_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsDeleteForIssueCommentResponseSchema = z.void();

export const reactionsDeleteForIssueCommentErrorSchema = z.unknown();

export const issuesListEventsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issueEventSchema = z.object({
  actor: nullableSimpleUserSchema,
  assignee: nullableSimpleUserSchema.optional(),
  assigner: nullableSimpleUserSchema.optional(),
  author_association: authorAssociationSchema.optional(),
  commit_id: z.string().nullable(),
  commit_url: z.string().nullable(),
  created_at: z.string(),
  dismissed_review: issueEventDismissedReviewSchema.optional(),
  event: z.string(),
  id: z.number(),
  issue: nullableIssueSchema.optional(),
  label: issueEventLabelSchema.optional(),
  lock_reason: z.string().optional().nullable(),
  milestone: issueEventMilestoneSchema.optional(),
  node_id: z.string(),
  performed_via_github_app: nullableIntegrationSchema.optional(),
  project_card: issueEventProjectCardSchema.optional(),
  rename: issueEventRenameSchema.optional(),
  requested_reviewer: nullableSimpleUserSchema.optional(),
  requested_team: teamSchema.optional(),
  review_requester: nullableSimpleUserSchema.optional(),
  url: z.string(),
});

export const issuesListEventsForRepoErrorSchema = validationErrorSchema;

export const issuesGetEventDataSchema = z.object({
  path: z.object({
    event_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesGetEventResponseSchema = issueEventSchema;

export const issuesGetEventErrorSchema = basicErrorSchema;

export const issuesGetDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesGetResponseSchema = issueSchema;

export const issuesGetErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const issuesUpdateDataSchema = z.object({
  body: z
    .object({
      assignee: z.string().optional().nullable(),
      assignees: z.array(z.string()).optional(),
      body: z.string().optional().nullable(),
      labels: z
        .array(
          z.union([
            z.string(),
            z.object({
              color: z.string().optional().nullable(),
              description: z.string().optional().nullable(),
              id: z.number().optional(),
              name: z.string().optional(),
            }),
          ]),
        )
        .optional(),
      milestone: z.union([z.string(), z.number()]).optional().nullable(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      state_reason: z
        .union([z.literal('completed'), z.literal('not_planned'), z.literal('reopened')])
        .optional()
        .nullable(),
      title: z.union([z.string(), z.number()]).optional().nullable(),
    })
    .optional(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesUpdateResponseSchema = issueSchema;

export const issuesUpdateErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const issuesRemoveAssigneesDataSchema = z.object({
  body: z
    .object({
      assignees: z.array(z.string()).optional(),
    })
    .optional(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesRemoveAssigneesResponseSchema = issueSchema;

export const issuesRemoveAssigneesErrorSchema = z.unknown();

export const issuesAddAssigneesDataSchema = z.object({
  body: z
    .object({
      assignees: z.array(z.string()).optional(),
    })
    .optional(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesAddAssigneesResponseSchema = issueSchema;

export const issuesAddAssigneesErrorSchema = z.unknown();

export const issuesCheckUserCanBeAssignedToIssueDataSchema = z.object({
  path: z.object({
    assignee: z.string(),
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCheckUserCanBeAssignedToIssueResponseSchema = z.void();

export const issuesCheckUserCanBeAssignedToIssueErrorSchema = basicErrorSchema;

export const issuesListCommentsDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const issuesListCommentsResponseSchema = z.array(issueCommentSchema);

export const issuesListCommentsErrorSchema = basicErrorSchema;

export const issuesCreateCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCreateCommentResponseSchema = issueCommentSchema;

export const issuesCreateCommentErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesListEventsDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issueEventForIssueSchema = z.union([
  labeledIssueEventSchema,
  unlabeledIssueEventSchema,
  assignedIssueEventSchema,
  unassignedIssueEventSchema,
  milestonedIssueEventSchema,
  demilestonedIssueEventSchema,
  renamedIssueEventSchema,
  reviewRequestedIssueEventSchema,
  reviewRequestRemovedIssueEventSchema,
  reviewDismissedIssueEventSchema,
  lockedIssueEventSchema,
  addedToProjectIssueEventSchema,
  movedColumnInProjectIssueEventSchema,
  removedFromProjectIssueEventSchema,
  convertedNoteToIssueIssueEventSchema,
]);

export const issuesListEventsErrorSchema = basicErrorSchema;

export const issuesRemoveAllLabelsDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesRemoveAllLabelsResponseSchema = z.void();

export const issuesRemoveAllLabelsErrorSchema = basicErrorSchema;

export const issuesListLabelsOnIssueDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issuesListLabelsOnIssueResponseSchema = z.array(labelSchema);

export const issuesListLabelsOnIssueErrorSchema = basicErrorSchema;

export const issuesAddLabelsDataSchema = z.object({
  body: z
    .union([
      z.object({
        labels: z.array(z.string()).optional(),
      }),
      z.array(z.string()),
      z.object({
        labels: z
          .array(
            z.object({
              name: z.string(),
            }),
          )
          .optional(),
      }),
      z.array(
        z.object({
          name: z.string(),
        }),
      ),
      z.string(),
    ])
    .optional(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesAddLabelsResponseSchema = z.array(labelSchema);

export const issuesAddLabelsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesSetLabelsDataSchema = z.object({
  body: z
    .union([
      z.object({
        labels: z.array(z.string()).optional(),
      }),
      z.array(z.string()),
      z.object({
        labels: z
          .array(
            z.object({
              name: z.string(),
            }),
          )
          .optional(),
      }),
      z.array(
        z.object({
          name: z.string(),
        }),
      ),
      z.string(),
    ])
    .optional(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesSetLabelsResponseSchema = z.array(labelSchema);

export const issuesSetLabelsErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesRemoveLabelDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesRemoveLabelResponseSchema = z.array(labelSchema);

export const issuesRemoveLabelErrorSchema = basicErrorSchema;

export const issuesUnlockDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesUnlockResponseSchema = z.void();

export const issuesUnlockErrorSchema = basicErrorSchema;

export const issuesLockDataSchema = z.object({
  body: z
    .object({
      lock_reason: z
        .union([z.literal('off-topic'), z.literal('too heated'), z.literal('resolved'), z.literal('spam')])
        .optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesLockResponseSchema = z.void();

export const issuesLockErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reactionsListForIssueDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForIssueResponseSchema = z.array(reactionSchema);

export const reactionsListForIssueErrorSchema = basicErrorSchema;

export const reactionsCreateForIssueDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reactionsCreateForIssueResponseSchema = reactionSchema;

export const reactionsCreateForIssueErrorSchema = validationErrorSchema;

export const reactionsDeleteForIssueDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    reaction_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsDeleteForIssueResponseSchema = z.void();

export const reactionsDeleteForIssueErrorSchema = z.unknown();

export const issuesListEventsForTimelineDataSchema = z.object({
  path: z.object({
    issue_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const timelineIssueEventsSchema = z.union([
  labeledIssueEventSchema,
  unlabeledIssueEventSchema,
  milestonedIssueEventSchema,
  demilestonedIssueEventSchema,
  renamedIssueEventSchema,
  reviewRequestedIssueEventSchema,
  reviewRequestRemovedIssueEventSchema,
  reviewDismissedIssueEventSchema,
  lockedIssueEventSchema,
  addedToProjectIssueEventSchema,
  movedColumnInProjectIssueEventSchema,
  removedFromProjectIssueEventSchema,
  convertedNoteToIssueIssueEventSchema,
  timelineCommentEventSchema,
  timelineCrossReferencedEventSchema,
  timelineCommittedEventSchema,
  timelineReviewedEventSchema,
  timelineLineCommentedEventSchema,
  timelineCommitCommentedEventSchema,
  timelineAssignedIssueEventSchema,
  timelineUnassignedIssueEventSchema,
  stateChangeIssueEventSchema,
]);

export const issuesListEventsForTimelineErrorSchema = basicErrorSchema;

export const reposListDeployKeysDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListDeployKeysResponseSchema = z.array(deployKeySchema);

export const reposListDeployKeysErrorSchema = z.unknown();

export const reposCreateDeployKeyDataSchema = z.object({
  body: z.object({
    key: z.string(),
    read_only: z.boolean().optional(),
    title: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateDeployKeyResponseSchema = deployKeySchema;

export const reposCreateDeployKeyErrorSchema = validationErrorSchema;

export const reposDeleteDeployKeyDataSchema = z.object({
  path: z.object({
    key_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteDeployKeyResponseSchema = z.void();

export const reposDeleteDeployKeyErrorSchema = z.unknown();

export const reposGetDeployKeyDataSchema = z.object({
  path: z.object({
    key_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetDeployKeyResponseSchema = deployKeySchema;

export const reposGetDeployKeyErrorSchema = basicErrorSchema;

export const issuesListLabelsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issuesListLabelsForRepoResponseSchema = z.array(labelSchema);

export const issuesListLabelsForRepoErrorSchema = basicErrorSchema;

export const issuesCreateLabelDataSchema = z.object({
  body: z.object({
    color: z.string().optional(),
    description: z.string().optional(),
    name: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCreateLabelResponseSchema = labelSchema;

export const issuesCreateLabelErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesDeleteLabelDataSchema = z.object({
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesDeleteLabelResponseSchema = z.void();

export const issuesDeleteLabelErrorSchema = z.unknown();

export const issuesGetLabelDataSchema = z.object({
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesGetLabelResponseSchema = labelSchema;

export const issuesGetLabelErrorSchema = basicErrorSchema;

export const issuesUpdateLabelDataSchema = z.object({
  body: z
    .object({
      color: z.string().optional(),
      description: z.string().optional(),
      new_name: z.string().optional(),
    })
    .optional(),
  path: z.object({
    name: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesUpdateLabelResponseSchema = labelSchema;

export const issuesUpdateLabelErrorSchema = z.unknown();

export const reposListLanguagesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposListLanguagesResponseSchema = languageSchema;

export const reposListLanguagesErrorSchema = z.unknown();

export const reposDisableLfsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDisableLfsForRepoResponseSchema = z.void();

export const reposDisableLfsForRepoErrorSchema = z.unknown();

export const reposEnableLfsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposEnableLfsForRepoResponseSchema = z.record(z.unknown());

export const reposEnableLfsForRepoErrorSchema = z.unknown();

export const licensesGetForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const licensesGetForRepoResponseSchema = licenseContentSchema;

export const licensesGetForRepoErrorSchema = z.unknown();

export const reposMergeUpstreamDataSchema = z.object({
  body: z.object({
    branch: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposMergeUpstreamResponseSchema = mergedUpstreamSchema;

export const reposMergeUpstreamErrorSchema = z.unknown();

export const reposMergeDataSchema = z.object({
  body: z.object({
    base: z.string(),
    commit_message: z.string().optional(),
    head: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposMergeResponseSchema = z.union([commitSchema, z.void()]);

export const reposMergeErrorSchema = z.union([basicErrorSchema, z.unknown(), validationErrorSchema]);

export const issuesListMilestonesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z.union([z.literal('due_on'), z.literal('completeness')]).optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const issuesListMilestonesResponseSchema = z.array(milestoneSchema);

export const issuesListMilestonesErrorSchema = basicErrorSchema;

export const issuesCreateMilestoneDataSchema = z.object({
  body: z.object({
    description: z.string().optional(),
    due_on: z.string().optional(),
    state: z.union([z.literal('open'), z.literal('closed')]).optional(),
    title: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesCreateMilestoneResponseSchema = milestoneSchema;

export const issuesCreateMilestoneErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const issuesDeleteMilestoneDataSchema = z.object({
  path: z.object({
    milestone_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesDeleteMilestoneResponseSchema = z.void();

export const issuesDeleteMilestoneErrorSchema = basicErrorSchema;

export const issuesGetMilestoneDataSchema = z.object({
  path: z.object({
    milestone_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesGetMilestoneResponseSchema = milestoneSchema;

export const issuesGetMilestoneErrorSchema = basicErrorSchema;

export const issuesUpdateMilestoneDataSchema = z.object({
  body: z
    .object({
      description: z.string().optional(),
      due_on: z.string().optional(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      title: z.string().optional(),
    })
    .optional(),
  path: z.object({
    milestone_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const issuesUpdateMilestoneResponseSchema = milestoneSchema;

export const issuesUpdateMilestoneErrorSchema = z.unknown();

export const issuesListLabelsForMilestoneDataSchema = z.object({
  path: z.object({
    milestone_number: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const issuesListLabelsForMilestoneResponseSchema = z.array(labelSchema);

export const issuesListLabelsForMilestoneErrorSchema = z.unknown();

export const activityListRepoNotificationsForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      all: z.boolean().optional(),
      before: z.string().optional(),
      page: z.number().optional(),
      participating: z.boolean().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const activityListRepoNotificationsForAuthenticatedUserResponseSchema = z.array(threadSchema);

export const activityListRepoNotificationsForAuthenticatedUserErrorSchema = z.unknown();

export const activityMarkRepoNotificationsAsReadDataSchema = z.object({
  body: z
    .object({
      last_read_at: z.string().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityMarkRepoNotificationsAsReadResponseSchema = z.union([
  z.object({
    message: z.string().optional(),
    url: z.string().optional(),
  }),
  z.unknown(),
]);

export const activityMarkRepoNotificationsAsReadErrorSchema = z.unknown();

export const reposDeletePagesSiteDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeletePagesSiteResponseSchema = z.void();

export const reposDeletePagesSiteErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetPagesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const pageSchema = z.object({
  build_type: z
    .union([z.literal('legacy'), z.literal('workflow')])
    .optional()
    .nullable(),
  cname: z.string().nullable(),
  custom_404: z.boolean(),
  html_url: z.string().optional(),
  https_certificate: pagesHttpsCertificateSchema.optional(),
  https_enforced: z.boolean().optional(),
  pending_domain_unverified_at: z.string().optional().nullable(),
  protected_domain_state: z
    .union([z.literal('pending'), z.literal('verified'), z.literal('unverified')])
    .optional()
    .nullable(),
  public: z.boolean(),
  source: pagesSourceHashSchema.optional(),
  status: z.union([z.literal('built'), z.literal('building'), z.literal('errored')]).nullable(),
  url: z.string(),
});

export const reposGetPagesErrorSchema = basicErrorSchema;

export const reposCreatePagesSiteDataSchema = z.object({
  body: z
    .union([
      z.unknown(),
      z.object({
        build_type: z.union([z.literal('legacy'), z.literal('workflow')]).optional(),
        source: z
          .object({
            branch: z.string(),
            path: z.union([z.literal('/'), z.literal('/docs')]).optional(),
          })
          .optional(),
      }),
    ])
    .nullable(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreatePagesSiteResponseSchema = pageSchema;

export const reposCreatePagesSiteErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposUpdateInformationAboutPagesSiteDataSchema = z.object({
  body: z.union([
    z.unknown(),
    z.object({
      build_type: z.union([z.literal('legacy'), z.literal('workflow')]).optional(),
      cname: z.string().optional().nullable(),
      https_enforced: z.boolean().optional(),
      source: z
        .union([
          z.literal('gh-pages'),
          z.literal('master'),
          z.literal('master /docs'),
          z.object({
            branch: z.string(),
            path: z.union([z.literal('/'), z.literal('/docs')]),
          }),
        ])
        .optional(),
    }),
  ]),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateInformationAboutPagesSiteResponseSchema = z.void();

export const reposUpdateInformationAboutPagesSiteErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposListPagesBuildsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListPagesBuildsResponseSchema = z.array(pageBuildSchema);

export const reposListPagesBuildsErrorSchema = z.unknown();

export const reposRequestPagesBuildDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposRequestPagesBuildResponseSchema = pageBuildStatusSchema;

export const reposRequestPagesBuildErrorSchema = z.unknown();

export const reposGetLatestPagesBuildDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetLatestPagesBuildResponseSchema = pageBuildSchema;

export const reposGetLatestPagesBuildErrorSchema = z.unknown();

export const reposGetPagesBuildDataSchema = z.object({
  path: z.object({
    build_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetPagesBuildResponseSchema = pageBuildSchema;

export const reposGetPagesBuildErrorSchema = z.unknown();

export const reposCreatePagesDeploymentDataSchema = z.object({
  body: z.object({
    artifact_url: z.string(),
    environment: z.string().optional(),
    oidc_token: z.string(),
    pages_build_version: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreatePagesDeploymentResponseSchema = pageDeploymentSchema;

export const reposCreatePagesDeploymentErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetPagesHealthCheckDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetPagesHealthCheckResponseSchema = z.union([pagesHealthCheckSchema, emptyObjectSchema]);

export const reposGetPagesHealthCheckErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const projectsListForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const projectsListForRepoResponseSchema = z.array(projectSchema);

export const projectsListForRepoErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const projectsCreateForRepoDataSchema = z.object({
  body: z.object({
    body: z.string().optional(),
    name: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const projectsCreateForRepoResponseSchema = projectSchema;

export const projectsCreateForRepoErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const pullsListDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      base: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      head: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z
        .union([z.literal('created'), z.literal('updated'), z.literal('popularity'), z.literal('long-running')])
        .optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const pullsListResponseSchema = z.array(pullRequestSimpleSchema);

export const pullsListErrorSchema = z.union([z.unknown(), validationErrorSchema]);

export const pullsCreateDataSchema = z.object({
  body: z.object({
    base: z.string(),
    body: z.string().optional(),
    draft: z.boolean().optional(),
    head: z.string(),
    head_repo: z.string().optional(),
    issue: z.number().optional(),
    maintainer_can_modify: z.boolean().optional(),
    title: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const pullRequestSchema = z.object({
  _links: z.object({
    comments: linkSchema,
    commits: linkSchema,
    html: linkSchema,
    issue: linkSchema,
    review_comment: linkSchema,
    review_comments: linkSchema,
    self: linkSchema,
    statuses: linkSchema,
  }),
  active_lock_reason: z.string().optional().nullable(),
  additions: z.number(),
  assignee: nullableSimpleUserSchema,
  assignees: z.array(simpleUserSchema).optional().nullable(),
  author_association: authorAssociationSchema,
  auto_merge: autoMergeSchema,
  base: z.object({
    label: z.string(),
    ref: z.string(),
    repo: z.object({
      allow_forking: z.boolean().optional(),
      allow_merge_commit: z.boolean().optional(),
      allow_rebase_merge: z.boolean().optional(),
      allow_squash_merge: z.boolean().optional(),
      archive_url: z.string(),
      archived: z.boolean(),
      assignees_url: z.string(),
      blobs_url: z.string(),
      branches_url: z.string(),
      clone_url: z.string(),
      collaborators_url: z.string(),
      comments_url: z.string(),
      commits_url: z.string(),
      compare_url: z.string(),
      contents_url: z.string(),
      contributors_url: z.string(),
      created_at: z.string(),
      default_branch: z.string(),
      deployments_url: z.string(),
      description: z.string().nullable(),
      disabled: z.boolean(),
      downloads_url: z.string(),
      events_url: z.string(),
      fork: z.boolean(),
      forks: z.number(),
      forks_count: z.number(),
      forks_url: z.string(),
      full_name: z.string(),
      git_commits_url: z.string(),
      git_refs_url: z.string(),
      git_tags_url: z.string(),
      git_url: z.string(),
      has_discussions: z.boolean(),
      has_downloads: z.boolean(),
      has_issues: z.boolean(),
      has_pages: z.boolean(),
      has_projects: z.boolean(),
      has_wiki: z.boolean(),
      homepage: z.string().nullable(),
      hooks_url: z.string(),
      html_url: z.string(),
      id: z.number(),
      is_template: z.boolean().optional(),
      issue_comment_url: z.string(),
      issue_events_url: z.string(),
      issues_url: z.string(),
      keys_url: z.string(),
      labels_url: z.string(),
      language: z.string().nullable(),
      languages_url: z.string(),
      license: nullableLicenseSimpleSchema,
      master_branch: z.string().optional(),
      merges_url: z.string(),
      milestones_url: z.string(),
      mirror_url: z.string().nullable(),
      name: z.string(),
      node_id: z.string(),
      notifications_url: z.string(),
      open_issues: z.number(),
      open_issues_count: z.number(),
      owner: z.object({
        avatar_url: z.string(),
        events_url: z.string(),
        followers_url: z.string(),
        following_url: z.string(),
        gists_url: z.string(),
        gravatar_id: z.string().nullable(),
        html_url: z.string(),
        id: z.number(),
        login: z.string(),
        node_id: z.string(),
        organizations_url: z.string(),
        received_events_url: z.string(),
        repos_url: z.string(),
        site_admin: z.boolean(),
        starred_url: z.string(),
        subscriptions_url: z.string(),
        type: z.string(),
        url: z.string(),
      }),
      permissions: z
        .object({
          admin: z.boolean(),
          maintain: z.boolean().optional(),
          pull: z.boolean(),
          push: z.boolean(),
          triage: z.boolean().optional(),
        })
        .optional(),
      private: z.boolean(),
      pulls_url: z.string(),
      pushed_at: z.string(),
      releases_url: z.string(),
      size: z.number(),
      ssh_url: z.string(),
      stargazers_count: z.number(),
      stargazers_url: z.string(),
      statuses_url: z.string(),
      subscribers_url: z.string(),
      subscription_url: z.string(),
      svn_url: z.string(),
      tags_url: z.string(),
      teams_url: z.string(),
      temp_clone_token: z.string().optional(),
      topics: z.array(z.string()).optional(),
      trees_url: z.string(),
      updated_at: z.string(),
      url: z.string(),
      visibility: z.string().optional(),
      watchers: z.number(),
      watchers_count: z.number(),
      web_commit_signoff_required: z.boolean().optional(),
    }),
    sha: z.string(),
    user: z.object({
      avatar_url: z.string(),
      events_url: z.string(),
      followers_url: z.string(),
      following_url: z.string(),
      gists_url: z.string(),
      gravatar_id: z.string().nullable(),
      html_url: z.string(),
      id: z.number(),
      login: z.string(),
      node_id: z.string(),
      organizations_url: z.string(),
      received_events_url: z.string(),
      repos_url: z.string(),
      site_admin: z.boolean(),
      starred_url: z.string(),
      subscriptions_url: z.string(),
      type: z.string(),
      url: z.string(),
    }),
  }),
  body: z.string().nullable(),
  changed_files: z.number(),
  closed_at: z.string().nullable(),
  comments: z.number(),
  comments_url: z.string(),
  commits: z.number(),
  commits_url: z.string(),
  created_at: z.string(),
  deletions: z.number(),
  diff_url: z.string(),
  draft: z.boolean().optional(),
  head: z.object({
    label: z.string(),
    ref: z.string(),
    repo: z
      .object({
        allow_forking: z.boolean().optional(),
        allow_merge_commit: z.boolean().optional(),
        allow_rebase_merge: z.boolean().optional(),
        allow_squash_merge: z.boolean().optional(),
        archive_url: z.string(),
        archived: z.boolean(),
        assignees_url: z.string(),
        blobs_url: z.string(),
        branches_url: z.string(),
        clone_url: z.string(),
        collaborators_url: z.string(),
        comments_url: z.string(),
        commits_url: z.string(),
        compare_url: z.string(),
        contents_url: z.string(),
        contributors_url: z.string(),
        created_at: z.string(),
        default_branch: z.string(),
        deployments_url: z.string(),
        description: z.string().nullable(),
        disabled: z.boolean(),
        downloads_url: z.string(),
        events_url: z.string(),
        fork: z.boolean(),
        forks: z.number(),
        forks_count: z.number(),
        forks_url: z.string(),
        full_name: z.string(),
        git_commits_url: z.string(),
        git_refs_url: z.string(),
        git_tags_url: z.string(),
        git_url: z.string(),
        has_discussions: z.boolean(),
        has_downloads: z.boolean(),
        has_issues: z.boolean(),
        has_pages: z.boolean(),
        has_projects: z.boolean(),
        has_wiki: z.boolean(),
        homepage: z.string().nullable(),
        hooks_url: z.string(),
        html_url: z.string(),
        id: z.number(),
        is_template: z.boolean().optional(),
        issue_comment_url: z.string(),
        issue_events_url: z.string(),
        issues_url: z.string(),
        keys_url: z.string(),
        labels_url: z.string(),
        language: z.string().nullable(),
        languages_url: z.string(),
        license: z
          .object({
            key: z.string(),
            name: z.string(),
            node_id: z.string(),
            spdx_id: z.string().nullable(),
            url: z.string().nullable(),
          })
          .nullable(),
        master_branch: z.string().optional(),
        merges_url: z.string(),
        milestones_url: z.string(),
        mirror_url: z.string().nullable(),
        name: z.string(),
        node_id: z.string(),
        notifications_url: z.string(),
        open_issues: z.number(),
        open_issues_count: z.number(),
        owner: z.object({
          avatar_url: z.string(),
          events_url: z.string(),
          followers_url: z.string(),
          following_url: z.string(),
          gists_url: z.string(),
          gravatar_id: z.string().nullable(),
          html_url: z.string(),
          id: z.number(),
          login: z.string(),
          node_id: z.string(),
          organizations_url: z.string(),
          received_events_url: z.string(),
          repos_url: z.string(),
          site_admin: z.boolean(),
          starred_url: z.string(),
          subscriptions_url: z.string(),
          type: z.string(),
          url: z.string(),
        }),
        permissions: z
          .object({
            admin: z.boolean(),
            maintain: z.boolean().optional(),
            pull: z.boolean(),
            push: z.boolean(),
            triage: z.boolean().optional(),
          })
          .optional(),
        private: z.boolean(),
        pulls_url: z.string(),
        pushed_at: z.string(),
        releases_url: z.string(),
        size: z.number(),
        ssh_url: z.string(),
        stargazers_count: z.number(),
        stargazers_url: z.string(),
        statuses_url: z.string(),
        subscribers_url: z.string(),
        subscription_url: z.string(),
        svn_url: z.string(),
        tags_url: z.string(),
        teams_url: z.string(),
        temp_clone_token: z.string().optional(),
        topics: z.array(z.string()).optional(),
        trees_url: z.string(),
        updated_at: z.string(),
        url: z.string(),
        visibility: z.string().optional(),
        watchers: z.number(),
        watchers_count: z.number(),
        web_commit_signoff_required: z.boolean().optional(),
      })
      .nullable(),
    sha: z.string(),
    user: z.object({
      avatar_url: z.string(),
      events_url: z.string(),
      followers_url: z.string(),
      following_url: z.string(),
      gists_url: z.string(),
      gravatar_id: z.string().nullable(),
      html_url: z.string(),
      id: z.number(),
      login: z.string(),
      node_id: z.string(),
      organizations_url: z.string(),
      received_events_url: z.string(),
      repos_url: z.string(),
      site_admin: z.boolean(),
      starred_url: z.string(),
      subscriptions_url: z.string(),
      type: z.string(),
      url: z.string(),
    }),
  }),
  html_url: z.string(),
  id: z.number(),
  issue_url: z.string(),
  labels: z.array(
    z.object({
      color: z.string(),
      default: z.boolean(),
      description: z.string().nullable(),
      id: z.number(),
      name: z.string(),
      node_id: z.string(),
      url: z.string(),
    }),
  ),
  locked: z.boolean(),
  maintainer_can_modify: z.boolean(),
  merge_commit_sha: z.string().nullable(),
  mergeable: z.boolean().nullable(),
  mergeable_state: z.string(),
  merged: z.boolean(),
  merged_at: z.string().nullable(),
  merged_by: nullableSimpleUserSchema,
  milestone: nullableMilestoneSchema,
  node_id: z.string(),
  number: z.number(),
  patch_url: z.string(),
  rebaseable: z.boolean().optional().nullable(),
  requested_reviewers: z.array(simpleUserSchema).optional().nullable(),
  requested_teams: z.array(teamSimpleSchema).optional().nullable(),
  review_comment_url: z.string(),
  review_comments: z.number(),
  review_comments_url: z.string(),
  state: z.union([z.literal('open'), z.literal('closed')]),
  statuses_url: z.string(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user: nullableSimpleUserSchema,
});

export const pullsCreateErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const pullsListReviewCommentsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated'), z.literal('created_at')]).optional(),
    })
    .optional(),
});

export const pullsListReviewCommentsForRepoResponseSchema = z.array(pullRequestReviewCommentSchema);

export const pullsListReviewCommentsForRepoErrorSchema = z.unknown();

export const pullsDeleteReviewCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const pullsDeleteReviewCommentResponseSchema = z.void();

export const pullsDeleteReviewCommentErrorSchema = basicErrorSchema;

export const pullsGetReviewCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const pullsGetReviewCommentResponseSchema = pullRequestReviewCommentSchema;

export const pullsGetReviewCommentErrorSchema = basicErrorSchema;

export const pullsUpdateReviewCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const pullsUpdateReviewCommentResponseSchema = pullRequestReviewCommentSchema;

export const pullsUpdateReviewCommentErrorSchema = z.unknown();

export const reactionsListForPullRequestReviewCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForPullRequestReviewCommentResponseSchema = z.array(reactionSchema);

export const reactionsListForPullRequestReviewCommentErrorSchema = basicErrorSchema;

export const reactionsCreateForPullRequestReviewCommentDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reactionsCreateForPullRequestReviewCommentResponseSchema = reactionSchema;

export const reactionsCreateForPullRequestReviewCommentErrorSchema = validationErrorSchema;

export const reactionsDeleteForPullRequestCommentDataSchema = z.object({
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    reaction_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsDeleteForPullRequestCommentResponseSchema = z.void();

export const reactionsDeleteForPullRequestCommentErrorSchema = z.unknown();

export const pullsGetDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsGetResponseSchema = pullRequestSchema;

export const pullsGetErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const pullsUpdateDataSchema = z.object({
  body: z
    .object({
      base: z.string().optional(),
      body: z.string().optional(),
      maintainer_can_modify: z.boolean().optional(),
      state: z.union([z.literal('open'), z.literal('closed')]).optional(),
      title: z.string().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsUpdateResponseSchema = pullRequestSchema;

export const pullsUpdateErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const codespacesCreateWithPrForAuthenticatedUserDataSchema = z.object({
  body: z
    .object({
      client_ip: z.string().optional(),
      devcontainer_path: z.string().optional(),
      display_name: z.string().optional(),
      idle_timeout_minutes: z.number().optional(),
      location: z.string().optional(),
      machine: z.string().optional(),
      multi_repo_permissions_opt_out: z.boolean().optional(),
      retention_period_minutes: z.number().optional(),
      working_directory: z.string().optional(),
    })
    .nullable(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const codespacesCreateWithPrForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesCreateWithPrForAuthenticatedUserErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const pullsListReviewCommentsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const pullsListReviewCommentsResponseSchema = z.array(pullRequestReviewCommentSchema);

export const pullsListReviewCommentsErrorSchema = z.unknown();

export const pullsCreateReviewCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
    commit_id: z.string(),
    in_reply_to: z.number().optional(),
    line: z.number(),
    path: z.string(),
    position: z.number().optional(),
    side: z.union([z.literal('LEFT'), z.literal('RIGHT')]).optional(),
    start_line: z.number().optional(),
    start_side: z.union([z.literal('LEFT'), z.literal('RIGHT'), z.literal('side')]).optional(),
  }),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsCreateReviewCommentResponseSchema = pullRequestReviewCommentSchema;

export const pullsCreateReviewCommentErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const pullsCreateReplyForReviewCommentDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_id: z.number(),
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsCreateReplyForReviewCommentResponseSchema = pullRequestReviewCommentSchema;

export const pullsCreateReplyForReviewCommentErrorSchema = basicErrorSchema;

export const pullsListCommitsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const pullsListCommitsResponseSchema = z.array(commitSchema);

export const pullsListCommitsErrorSchema = z.unknown();

export const pullsListFilesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const pullsListFilesResponseSchema = z.array(diffEntrySchema);

export const pullsListFilesErrorSchema = z.union([
  validationErrorSchema,
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const pullsCheckIfMergedDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsCheckIfMergedResponseSchema = z.void();

export const pullsCheckIfMergedErrorSchema = z.unknown();

export const pullsMergeDataSchema = z.object({
  body: z
    .object({
      commit_message: z.string().optional(),
      commit_title: z.string().optional(),
      merge_method: z.union([z.literal('merge'), z.literal('squash'), z.literal('rebase')]).optional(),
      sha: z.string().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsMergeResponseSchema = pullRequestMergeResultSchema;

export const pullsMergeErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
  validationErrorSchema,
]);

export const pullsRemoveRequestedReviewersDataSchema = z.object({
  body: z.object({
    reviewers: z.array(z.string()),
    team_reviewers: z.array(z.string()).optional(),
  }),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsRemoveRequestedReviewersResponseSchema = pullRequestSimpleSchema;

export const pullsRemoveRequestedReviewersErrorSchema = validationErrorSchema;

export const pullsListRequestedReviewersDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsListRequestedReviewersResponseSchema = pullRequestReviewRequestSchema;

export const pullsListRequestedReviewersErrorSchema = z.unknown();

export const pullsRequestReviewersDataSchema = z.object({
  body: z
    .union([
      z.unknown(),
      z.object({
        reviewers: z.array(z.string()).optional(),
        team_reviewers: z.array(z.string()).optional(),
      }),
    ])
    .optional(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsRequestReviewersResponseSchema = pullRequestSimpleSchema;

export const pullsRequestReviewersErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const pullsListReviewsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const pullsListReviewsResponseSchema = z.array(pullRequestReviewSchema);

export const pullsListReviewsErrorSchema = z.unknown();

export const pullsCreateReviewDataSchema = z.object({
  body: z
    .object({
      body: z.string().optional(),
      comments: z
        .array(
          z.object({
            body: z.string(),
            line: z.number().optional(),
            path: z.string(),
            position: z.number().optional(),
            side: z.string().optional(),
            start_line: z.number().optional(),
            start_side: z.string().optional(),
          }),
        )
        .optional(),
      commit_id: z.string().optional(),
      event: z.union([z.literal('APPROVE'), z.literal('REQUEST_CHANGES'), z.literal('COMMENT')]).optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsCreateReviewResponseSchema = pullRequestReviewSchema;

export const pullsCreateReviewErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const pullsDeletePendingReviewDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
});

export const pullsDeletePendingReviewResponseSchema = pullRequestReviewSchema;

export const pullsDeletePendingReviewErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const pullsGetReviewDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
});

export const pullsGetReviewResponseSchema = pullRequestReviewSchema;

export const pullsGetReviewErrorSchema = basicErrorSchema;

export const pullsUpdateReviewDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
});

export const pullsUpdateReviewResponseSchema = pullRequestReviewSchema;

export const pullsUpdateReviewErrorSchema = validationErrorSimpleSchema;

export const pullsListCommentsForReviewDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const pullsListCommentsForReviewResponseSchema = z.array(reviewCommentSchema);

export const pullsListCommentsForReviewErrorSchema = basicErrorSchema;

export const pullsDismissReviewDataSchema = z.object({
  body: z.object({
    event: z.literal('DISMISS').optional(),
    message: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
});

export const pullsDismissReviewResponseSchema = pullRequestReviewSchema;

export const pullsDismissReviewErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const pullsSubmitReviewDataSchema = z.object({
  body: z.object({
    body: z.string().optional(),
    event: z.union([z.literal('APPROVE'), z.literal('REQUEST_CHANGES'), z.literal('COMMENT')]),
  }),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
    review_id: z.number(),
  }),
});

export const pullsSubmitReviewResponseSchema = pullRequestReviewSchema;

export const pullsSubmitReviewErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const pullsUpdateBranchDataSchema = z.object({
  body: z
    .object({
      expected_head_sha: z.string().optional(),
    })
    .optional()
    .nullable(),
  path: z.object({
    owner: z.string(),
    pull_number: z.number(),
    repo: z.string(),
  }),
});

export const pullsUpdateBranchResponseSchema = z.object({
  message: z.string().optional(),
  url: z.string().optional(),
});

export const pullsUpdateBranchErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetReadmeDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      ref: z.string().optional(),
    })
    .optional(),
});

export const reposGetReadmeResponseSchema = contentFileSchema;

export const reposGetReadmeErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposGetReadmeInDirectoryDataSchema = z.object({
  path: z.object({
    dir: z.string(),
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      ref: z.string().optional(),
    })
    .optional(),
});

export const reposGetReadmeInDirectoryResponseSchema = contentFileSchema;

export const reposGetReadmeInDirectoryErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposListReleasesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const releaseSchema = z.object({
  assets: z.array(releaseAssetSchema),
  assets_url: z.string(),
  author: simpleUserSchema,
  body: z.string().optional().nullable(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  created_at: z.string(),
  discussion_url: z.string().optional(),
  draft: z.boolean(),
  html_url: z.string(),
  id: z.number(),
  mentions_count: z.number().optional(),
  name: z.string().nullable(),
  node_id: z.string(),
  prerelease: z.boolean(),
  published_at: z.string().nullable(),
  reactions: reactionRollupSchema.optional(),
  tag_name: z.string(),
  tarball_url: z.string().nullable(),
  target_commitish: z.string(),
  upload_url: z.string(),
  url: z.string(),
  zipball_url: z.string().nullable(),
});

export const reposListReleasesErrorSchema = basicErrorSchema;

export const reposCreateReleaseDataSchema = z.object({
  body: z.object({
    body: z.string().optional(),
    discussion_category_name: z.string().optional(),
    draft: z.boolean().optional(),
    generate_release_notes: z.boolean().optional(),
    make_latest: z.union([z.literal('true'), z.literal('false'), z.literal('legacy')]).optional(),
    name: z.string().optional(),
    prerelease: z.boolean().optional(),
    tag_name: z.string(),
    target_commitish: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateReleaseResponseSchema = releaseSchema;

export const reposCreateReleaseErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const reposDeleteReleaseAssetDataSchema = z.object({
  path: z.object({
    asset_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDeleteReleaseAssetResponseSchema = z.void();

export const reposDeleteReleaseAssetErrorSchema = z.unknown();

export const reposGetReleaseAssetDataSchema = z.object({
  path: z.object({
    asset_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetReleaseAssetResponseSchema = releaseAssetSchema;

export const reposGetReleaseAssetErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const reposUpdateReleaseAssetDataSchema = z.object({
  body: z
    .object({
      label: z.string().optional(),
      name: z.string().optional(),
      state: z.string().optional(),
    })
    .optional(),
  path: z.object({
    asset_id: z.number(),
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposUpdateReleaseAssetResponseSchema = releaseAssetSchema;

export const reposUpdateReleaseAssetErrorSchema = z.unknown();

export const reposGenerateReleaseNotesDataSchema = z.object({
  body: z.object({
    configuration_file_path: z.string().optional(),
    previous_tag_name: z.string().optional(),
    tag_name: z.string(),
    target_commitish: z.string().optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGenerateReleaseNotesResponseSchema = releaseNotesContentSchema;

export const reposGenerateReleaseNotesErrorSchema = basicErrorSchema;

export const reposGetLatestReleaseDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetLatestReleaseResponseSchema = releaseSchema;

export const reposGetLatestReleaseErrorSchema = z.unknown();

export const reposGetReleaseByTagDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    tag: z.string(),
  }),
});

export const reposGetReleaseByTagResponseSchema = releaseSchema;

export const reposGetReleaseByTagErrorSchema = basicErrorSchema;

export const reposDeleteReleaseDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
});

export const reposDeleteReleaseResponseSchema = z.void();

export const reposDeleteReleaseErrorSchema = z.unknown();

export const reposGetReleaseDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
});

export const reposGetReleaseResponseSchema = releaseSchema;

export const reposGetReleaseErrorSchema = basicErrorSchema;

export const reposUpdateReleaseDataSchema = z.object({
  body: z
    .object({
      body: z.string().optional(),
      discussion_category_name: z.string().optional(),
      draft: z.boolean().optional(),
      make_latest: z.union([z.literal('true'), z.literal('false'), z.literal('legacy')]).optional(),
      name: z.string().optional(),
      prerelease: z.boolean().optional(),
      tag_name: z.string().optional(),
      target_commitish: z.string().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
});

export const reposUpdateReleaseResponseSchema = releaseSchema;

export const reposUpdateReleaseErrorSchema = basicErrorSchema;

export const reposListReleaseAssetsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListReleaseAssetsResponseSchema = z.array(releaseAssetSchema);

export const reposListReleaseAssetsErrorSchema = z.unknown();

export const reposUploadReleaseAssetResponseSchema = releaseAssetSchema;

export const reposUploadReleaseAssetErrorSchema = z.unknown();

export const reactionsListForReleaseDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('laugh'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForReleaseResponseSchema = z.array(reactionSchema);

export const reactionsListForReleaseErrorSchema = basicErrorSchema;

export const reactionsCreateForReleaseDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('laugh'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    owner: z.string(),
    release_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsCreateForReleaseResponseSchema = reactionSchema;

export const reactionsCreateForReleaseErrorSchema = validationErrorSchema;

export const reactionsDeleteForReleaseDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    reaction_id: z.number(),
    release_id: z.number(),
    repo: z.string(),
  }),
});

export const reactionsDeleteForReleaseResponseSchema = z.void();

export const reactionsDeleteForReleaseErrorSchema = z.unknown();

export const secretScanningListAlertsForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      after: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      resolution: z.string().optional(),
      secret_type: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
      state: z.union([z.literal('open'), z.literal('resolved')]).optional(),
    })
    .optional(),
});

export const secretScanningListAlertsForRepoResponseSchema = z.array(secretScanningAlertSchema);

export const secretScanningListAlertsForRepoErrorSchema = z.union([
  z.unknown(),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const secretScanningGetAlertDataSchema = z.object({
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const secretScanningGetAlertResponseSchema = secretScanningAlertSchema;

export const secretScanningGetAlertErrorSchema = z.union([
  z.unknown(),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const secretScanningUpdateAlertDataSchema = z.object({
  body: z.object({
    resolution: secretScanningAlertResolutionSchema.optional(),
    resolution_comment: secretScanningAlertResolutionCommentSchema.optional(),
    state: secretScanningAlertStateSchema,
  }),
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
});

export const secretScanningUpdateAlertResponseSchema = secretScanningAlertSchema;

export const secretScanningUpdateAlertErrorSchema = z.union([
  z.unknown(),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const secretScanningListLocationsForAlertDataSchema = z.object({
  path: z.object({
    alert_number: alertNumberSchema,
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const secretScanningListLocationsForAlertResponseSchema = z.array(secretScanningLocationSchema);

export const secretScanningListLocationsForAlertErrorSchema = z.union([
  z.unknown(),
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const activityListStargazersForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListStargazersForRepoResponseSchema = z.union([
  z.array(simpleUserSchema),
  z.array(stargazerSchema),
]);

export const activityListStargazersForRepoErrorSchema = validationErrorSchema;

export const reposGetCodeFrequencyStatsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetCodeFrequencyStatsResponseSchema = z.union([
  z.array(codeFrequencyStatSchema),
  z.record(z.unknown()),
  z.void(),
]);

export const reposGetCodeFrequencyStatsErrorSchema = z.unknown();

export const reposGetCommitActivityStatsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetCommitActivityStatsResponseSchema = z.union([
  z.array(commitActivitySchema),
  z.record(z.unknown()),
  z.void(),
]);

export const reposGetCommitActivityStatsErrorSchema = z.unknown();

export const reposGetContributorsStatsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetContributorsStatsResponseSchema = z.union([
  z.array(contributorActivitySchema),
  z.record(z.unknown()),
  z.void(),
]);

export const reposGetContributorsStatsErrorSchema = z.unknown();

export const reposGetParticipationStatsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetParticipationStatsResponseSchema = participationStatsSchema;

export const reposGetParticipationStatsErrorSchema = basicErrorSchema;

export const reposGetPunchCardStatsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetPunchCardStatsResponseSchema = z.union([z.array(codeFrequencyStatSchema), z.void()]);

export const reposGetPunchCardStatsErrorSchema = z.unknown();

export const reposCreateCommitStatusDataSchema = z.object({
  body: z.object({
    context: z.string().optional(),
    description: z.string().optional().nullable(),
    state: z.union([z.literal('error'), z.literal('failure'), z.literal('pending'), z.literal('success')]),
    target_url: z.string().optional().nullable(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    sha: z.string(),
  }),
});

export const reposCreateCommitStatusResponseSchema = statusSchema;

export const reposCreateCommitStatusErrorSchema = z.unknown();

export const activityListWatchersForRepoDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListWatchersForRepoResponseSchema = z.array(simpleUserSchema);

export const activityListWatchersForRepoErrorSchema = z.unknown();

export const activityDeleteRepoSubscriptionDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityDeleteRepoSubscriptionResponseSchema = z.void();

export const activityDeleteRepoSubscriptionErrorSchema = z.unknown();

export const activityGetRepoSubscriptionDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityGetRepoSubscriptionResponseSchema = repositorySubscriptionSchema;

export const activityGetRepoSubscriptionErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const activitySetRepoSubscriptionDataSchema = z.object({
  body: z
    .object({
      ignored: z.boolean().optional(),
      subscribed: z.boolean().optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activitySetRepoSubscriptionResponseSchema = repositorySubscriptionSchema;

export const activitySetRepoSubscriptionErrorSchema = z.unknown();

export const reposListTagsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListTagsResponseSchema = z.array(tagSchema);

export const reposListTagsErrorSchema = z.unknown();

export const reposListTagProtectionDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposListTagProtectionResponseSchema = z.array(tagProtectionSchema);

export const reposListTagProtectionErrorSchema = basicErrorSchema;

export const reposCreateTagProtectionDataSchema = z.object({
  body: z.object({
    pattern: z.string(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateTagProtectionResponseSchema = tagProtectionSchema;

export const reposCreateTagProtectionErrorSchema = basicErrorSchema;

export const reposDeleteTagProtectionDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    tag_protection_id: z.number(),
  }),
});

export const reposDeleteTagProtectionResponseSchema = z.void();

export const reposDeleteTagProtectionErrorSchema = basicErrorSchema;

export const reposDownloadTarballArchiveDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const reposListTeamsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListTeamsResponseSchema = z.array(teamSchema);

export const reposListTeamsErrorSchema = z.unknown();

export const reposGetAllTopicsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposGetAllTopicsResponseSchema = topicSchema;

export const reposGetAllTopicsErrorSchema = basicErrorSchema;

export const reposReplaceAllTopicsDataSchema = z.object({
  body: z.object({
    names: z.array(z.string()),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposReplaceAllTopicsResponseSchema = topicSchema;

export const reposReplaceAllTopicsErrorSchema = z.union([basicErrorSchema, validationErrorSimpleSchema]);

export const reposGetClonesDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      per: z.union([z.literal('day'), z.literal('week')]).optional(),
    })
    .optional(),
});

export const cloneTrafficSchema = z.object({
  clones: z.array(trafficSchema),
  count: z.number(),
  uniques: z.number(),
});

export const reposGetClonesErrorSchema = basicErrorSchema;

export const reposGetTopPathsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetTopPathsResponseSchema = z.array(contentTrafficSchema);

export const reposGetTopPathsErrorSchema = basicErrorSchema;

export const reposGetTopReferrersDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposGetTopReferrersResponseSchema = z.array(referrerTrafficSchema);

export const reposGetTopReferrersErrorSchema = basicErrorSchema;

export const reposGetViewsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  query: z
    .object({
      per: z.union([z.literal('day'), z.literal('week')]).optional(),
    })
    .optional(),
});

export const reposGetViewsResponseSchema = viewTrafficSchema;

export const reposGetViewsErrorSchema = basicErrorSchema;

export const reposTransferDataSchema = z.object({
  body: z.object({
    new_name: z.string().optional(),
    new_owner: z.string(),
    team_ids: z.array(z.number()).optional(),
  }),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposTransferResponseSchema = minimalRepositorySchema;

export const reposTransferErrorSchema = z.unknown();

export const reposDisableVulnerabilityAlertsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposDisableVulnerabilityAlertsResponseSchema = z.void();

export const reposDisableVulnerabilityAlertsErrorSchema = z.unknown();

export const reposCheckVulnerabilityAlertsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposCheckVulnerabilityAlertsResponseSchema = z.void();

export const reposCheckVulnerabilityAlertsErrorSchema = z.unknown();

export const reposEnableVulnerabilityAlertsDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const reposEnableVulnerabilityAlertsResponseSchema = z.void();

export const reposEnableVulnerabilityAlertsErrorSchema = z.unknown();

export const reposDownloadZipballArchiveDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    ref: z.string(),
    repo: z.string(),
  }),
});

export const reposCreateUsingTemplateDataSchema = z.object({
  body: z.object({
    description: z.string().optional(),
    include_all_branches: z.boolean().optional(),
    name: z.string(),
    owner: z.string().optional(),
    private: z.boolean().optional(),
  }),
  path: z.object({
    template_owner: z.string(),
    template_repo: z.string(),
  }),
});

export const reposCreateUsingTemplateResponseSchema = repositorySchema;

export const reposCreateUsingTemplateErrorSchema = z.unknown();

export const reposListPublicDataSchema = z.object({
  query: z
    .object({
      since: z.number().optional(),
    })
    .optional(),
});

export const reposListPublicResponseSchema = z.array(minimalRepositorySchema);

export const reposListPublicErrorSchema = z.union([z.unknown(), validationErrorSchema]);

export const actionsListEnvironmentSecretsDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListEnvironmentSecretsResponseSchema = z.object({
  secrets: z.array(actionsSecretSchema),
  total_count: z.number(),
});

export const actionsListEnvironmentSecretsErrorSchema = z.unknown();

export const actionsGetEnvironmentPublicKeyDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsGetEnvironmentPublicKeyResponseSchema = actionsPublicKeySchema;

export const actionsGetEnvironmentPublicKeyErrorSchema = z.unknown();

export const actionsDeleteEnvironmentSecretDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const actionsDeleteEnvironmentSecretResponseSchema = z.void();

export const actionsDeleteEnvironmentSecretErrorSchema = z.unknown();

export const actionsGetEnvironmentSecretDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const actionsGetEnvironmentSecretResponseSchema = actionsSecretSchema;

export const actionsGetEnvironmentSecretErrorSchema = z.unknown();

export const actionsCreateOrUpdateEnvironmentSecretDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string(),
    key_id: z.string(),
  }),
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const actionsCreateOrUpdateEnvironmentSecretResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const actionsCreateOrUpdateEnvironmentSecretErrorSchema = z.unknown();

export const actionsListEnvironmentVariablesDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const actionsListEnvironmentVariablesResponseSchema = z.object({
  total_count: z.number(),
  variables: z.array(actionsVariableSchema),
});

export const actionsListEnvironmentVariablesErrorSchema = z.unknown();

export const actionsCreateEnvironmentVariableDataSchema = z.object({
  body: z.object({
    name: z.string(),
    value: z.string(),
  }),
  path: z.object({
    environment_name: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsCreateEnvironmentVariableResponseSchema = emptyObjectSchema;

export const actionsCreateEnvironmentVariableErrorSchema = z.unknown();

export const actionsDeleteEnvironmentVariableDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    name: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsDeleteEnvironmentVariableResponseSchema = z.void();

export const actionsDeleteEnvironmentVariableErrorSchema = z.unknown();

export const actionsGetEnvironmentVariableDataSchema = z.object({
  path: z.object({
    environment_name: z.string(),
    name: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsGetEnvironmentVariableResponseSchema = actionsVariableSchema;

export const actionsGetEnvironmentVariableErrorSchema = z.unknown();

export const actionsUpdateEnvironmentVariableDataSchema = z.object({
  body: z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  }),
  path: z.object({
    environment_name: z.string(),
    name: z.string(),
    repository_id: z.number(),
  }),
});

export const actionsUpdateEnvironmentVariableResponseSchema = z.void();

export const actionsUpdateEnvironmentVariableErrorSchema = z.unknown();

export const searchCodeDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    sort: z.literal('indexed').optional(),
  }),
});

export const codeSearchResultItemSchema = z.object({
  file_size: z.number().optional(),
  git_url: z.string(),
  html_url: z.string(),
  language: z.string().optional().nullable(),
  last_modified_at: z.string().optional(),
  line_numbers: z.array(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  repository: minimalRepositorySchema,
  score: z.number(),
  sha: z.string(),
  text_matches: searchResultTextMatchesSchema.optional(),
  url: z.string(),
});

export const searchCodeErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const searchCommitsDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    sort: z.union([z.literal('author-date'), z.literal('committer-date')]).optional(),
  }),
});

export const commitSearchResultItemSchema = z.object({
  author: nullableSimpleUserSchema,
  comments_url: z.string(),
  commit: z.object({
    author: z.object({
      date: z.string(),
      email: z.string(),
      name: z.string(),
    }),
    comment_count: z.number(),
    committer: nullableGitUserSchema,
    message: z.string(),
    tree: z.object({
      sha: z.string(),
      url: z.string(),
    }),
    url: z.string(),
    verification: verificationSchema.optional(),
  }),
  committer: nullableGitUserSchema,
  html_url: z.string(),
  node_id: z.string(),
  parents: z.array(
    z.object({
      html_url: z.string().optional(),
      sha: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
  repository: minimalRepositorySchema,
  score: z.number(),
  sha: z.string(),
  text_matches: searchResultTextMatchesSchema.optional(),
  url: z.string(),
});

export const searchCommitsErrorSchema = z.unknown();

export const searchIssuesAndPullRequestsDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    sort: z
      .union([
        z.literal('comments'),
        z.literal('reactions'),
        z.literal('reactions-+1'),
        z.literal('reactions--1'),
        z.literal('reactions-smile'),
        z.literal('reactions-thinking_face'),
        z.literal('reactions-heart'),
        z.literal('reactions-tada'),
        z.literal('interactions'),
        z.literal('created'),
        z.literal('updated'),
      ])
      .optional(),
  }),
});

export const searchIssuesAndPullRequestsResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(issueSearchResultItemSchema),
  total_count: z.number(),
});

export const searchIssuesAndPullRequestsErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const searchLabelsDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    repository_id: z.number(),
    sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
  }),
});

export const searchLabelsResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(labelSearchResultItemSchema),
  total_count: z.number(),
});

export const searchLabelsErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const searchReposDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    sort: z
      .union([z.literal('stars'), z.literal('forks'), z.literal('help-wanted-issues'), z.literal('updated')])
      .optional(),
  }),
});

export const searchReposResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(repoSearchResultItemSchema),
  total_count: z.number(),
});

export const searchReposErrorSchema = z.union([
  z.unknown(),
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const searchTopicsDataSchema = z.object({
  query: z.object({
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
  }),
});

export const searchTopicsResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(topicSearchResultItemSchema),
  total_count: z.number(),
});

export const searchTopicsErrorSchema = z.unknown();

export const searchUsersDataSchema = z.object({
  query: z.object({
    order: z.union([z.literal('desc'), z.literal('asc')]).optional(),
    page: z.number().optional(),
    per_page: z.number().optional(),
    q: z.string(),
    sort: z.union([z.literal('followers'), z.literal('repositories'), z.literal('joined')]).optional(),
  }),
});

export const searchUsersResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(userSearchResultItemSchema),
  total_count: z.number(),
});

export const searchUsersErrorSchema = z.union([
  z.unknown(),
  validationErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const teamsDeleteLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
});

export const teamsDeleteLegacyResponseSchema = z.void();

export const teamsDeleteLegacyErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsGetLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
});

export const teamsGetLegacyResponseSchema = teamFullSchema;

export const teamsGetLegacyErrorSchema = basicErrorSchema;

export const teamsUpdateLegacyDataSchema = z.object({
  body: z.object({
    description: z.string().optional(),
    name: z.string(),
    parent_team_id: z.number().optional().nullable(),
    permission: z.union([z.literal('pull'), z.literal('push'), z.literal('admin')]).optional(),
    privacy: z.union([z.literal('secret'), z.literal('closed')]).optional(),
  }),
  path: z.object({
    team_id: z.number(),
  }),
});

export const teamsUpdateLegacyResponseSchema = teamFullSchema;

export const teamsUpdateLegacyErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsListDiscussionsLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListDiscussionsLegacyResponseSchema = z.array(teamDiscussionSchema);

export const teamsListDiscussionsLegacyErrorSchema = z.unknown();

export const teamsCreateDiscussionLegacyDataSchema = z.object({
  body: z.object({
    body: z.string(),
    private: z.boolean().optional(),
    title: z.string(),
  }),
  path: z.object({
    team_id: z.number(),
  }),
});

export const teamsCreateDiscussionLegacyResponseSchema = teamDiscussionSchema;

export const teamsCreateDiscussionLegacyErrorSchema = z.unknown();

export const teamsDeleteDiscussionLegacyDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsDeleteDiscussionLegacyResponseSchema = z.void();

export const teamsDeleteDiscussionLegacyErrorSchema = z.unknown();

export const teamsGetDiscussionLegacyDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsGetDiscussionLegacyResponseSchema = teamDiscussionSchema;

export const teamsGetDiscussionLegacyErrorSchema = z.unknown();

export const teamsUpdateDiscussionLegacyDataSchema = z.object({
  body: z
    .object({
      body: z.string().optional(),
      title: z.string().optional(),
    })
    .optional(),
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsUpdateDiscussionLegacyResponseSchema = teamDiscussionSchema;

export const teamsUpdateDiscussionLegacyErrorSchema = z.unknown();

export const teamsListDiscussionCommentsLegacyDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListDiscussionCommentsLegacyResponseSchema = z.array(teamDiscussionCommentSchema);

export const teamsListDiscussionCommentsLegacyErrorSchema = z.unknown();

export const teamsCreateDiscussionCommentLegacyDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsCreateDiscussionCommentLegacyResponseSchema = teamDiscussionCommentSchema;

export const teamsCreateDiscussionCommentLegacyErrorSchema = z.unknown();

export const teamsDeleteDiscussionCommentLegacyDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsDeleteDiscussionCommentLegacyResponseSchema = z.void();

export const teamsDeleteDiscussionCommentLegacyErrorSchema = z.unknown();

export const teamsGetDiscussionCommentLegacyDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsGetDiscussionCommentLegacyResponseSchema = teamDiscussionCommentSchema;

export const teamsGetDiscussionCommentLegacyErrorSchema = z.unknown();

export const teamsUpdateDiscussionCommentLegacyDataSchema = z.object({
  body: z.object({
    body: z.string(),
  }),
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const teamsUpdateDiscussionCommentLegacyResponseSchema = teamDiscussionCommentSchema;

export const teamsUpdateDiscussionCommentLegacyErrorSchema = z.unknown();

export const reactionsListForTeamDiscussionCommentLegacyDataSchema = z.object({
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    team_id: z.number(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForTeamDiscussionCommentLegacyResponseSchema = z.array(reactionSchema);

export const reactionsListForTeamDiscussionCommentLegacyErrorSchema = z.unknown();

export const reactionsCreateForTeamDiscussionCommentLegacyDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    comment_number: z.number(),
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const reactionsCreateForTeamDiscussionCommentLegacyResponseSchema = reactionSchema;

export const reactionsCreateForTeamDiscussionCommentLegacyErrorSchema = z.unknown();

export const reactionsListForTeamDiscussionLegacyDataSchema = z.object({
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
  query: z
    .object({
      content: z
        .union([
          z.literal('+1'),
          z.literal('-1'),
          z.literal('laugh'),
          z.literal('confused'),
          z.literal('heart'),
          z.literal('hooray'),
          z.literal('rocket'),
          z.literal('eyes'),
        ])
        .optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reactionsListForTeamDiscussionLegacyResponseSchema = z.array(reactionSchema);

export const reactionsListForTeamDiscussionLegacyErrorSchema = z.unknown();

export const reactionsCreateForTeamDiscussionLegacyDataSchema = z.object({
  body: z.object({
    content: z.union([
      z.literal('+1'),
      z.literal('-1'),
      z.literal('laugh'),
      z.literal('confused'),
      z.literal('heart'),
      z.literal('hooray'),
      z.literal('rocket'),
      z.literal('eyes'),
    ]),
  }),
  path: z.object({
    discussion_number: z.number(),
    team_id: z.number(),
  }),
});

export const reactionsCreateForTeamDiscussionLegacyResponseSchema = reactionSchema;

export const reactionsCreateForTeamDiscussionLegacyErrorSchema = z.unknown();

export const teamsListPendingInvitationsLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListPendingInvitationsLegacyResponseSchema = z.array(organizationInvitationSchema);

export const teamsListPendingInvitationsLegacyErrorSchema = z.unknown();

export const teamsListMembersLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      role: z.union([z.literal('member'), z.literal('maintainer'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const teamsListMembersLegacyResponseSchema = z.array(simpleUserSchema);

export const teamsListMembersLegacyErrorSchema = basicErrorSchema;

export const teamsRemoveMemberLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsRemoveMemberLegacyResponseSchema = z.void();

export const teamsRemoveMemberLegacyErrorSchema = z.unknown();

export const teamsGetMemberLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsGetMemberLegacyResponseSchema = z.void();

export const teamsGetMemberLegacyErrorSchema = z.unknown();

export const teamsAddMemberLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsAddMemberLegacyResponseSchema = z.void();

export const teamsAddMemberLegacyErrorSchema = z.union([basicErrorSchema, z.unknown()]);

export const teamsRemoveMembershipForUserLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsRemoveMembershipForUserLegacyResponseSchema = z.void();

export const teamsRemoveMembershipForUserLegacyErrorSchema = z.unknown();

export const teamsGetMembershipForUserLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsGetMembershipForUserLegacyResponseSchema = teamMembershipSchema;

export const teamsGetMembershipForUserLegacyErrorSchema = basicErrorSchema;

export const teamsAddOrUpdateMembershipForUserLegacyDataSchema = z.object({
  body: z
    .object({
      role: z.union([z.literal('member'), z.literal('maintainer')]).optional(),
    })
    .optional(),
  path: z.object({
    team_id: z.number(),
    username: z.string(),
  }),
});

export const teamsAddOrUpdateMembershipForUserLegacyResponseSchema = teamMembershipSchema;

export const teamsAddOrUpdateMembershipForUserLegacyErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const teamsListProjectsLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListProjectsLegacyResponseSchema = z.array(teamProjectSchema);

export const teamsListProjectsLegacyErrorSchema = basicErrorSchema;

export const teamsRemoveProjectLegacyDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
    team_id: z.number(),
  }),
});

export const teamsRemoveProjectLegacyResponseSchema = z.void();

export const teamsRemoveProjectLegacyErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsCheckPermissionsForProjectLegacyDataSchema = z.object({
  path: z.object({
    project_id: z.number(),
    team_id: z.number(),
  }),
});

export const teamsCheckPermissionsForProjectLegacyResponseSchema = teamProjectSchema;

export const teamsCheckPermissionsForProjectLegacyErrorSchema = z.unknown();

export const teamsAddOrUpdateProjectPermissionsLegacyDataSchema = z.object({
  body: z
    .object({
      permission: z.union([z.literal('read'), z.literal('write'), z.literal('admin')]).optional(),
    })
    .optional(),
  path: z.object({
    project_id: z.number(),
    team_id: z.number(),
  }),
});

export const teamsAddOrUpdateProjectPermissionsLegacyResponseSchema = z.void();

export const teamsAddOrUpdateProjectPermissionsLegacyErrorSchema = z.union([
  z.object({
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
  basicErrorSchema,
  validationErrorSchema,
]);

export const teamsListReposLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListReposLegacyResponseSchema = z.array(minimalRepositorySchema);

export const teamsListReposLegacyErrorSchema = basicErrorSchema;

export const teamsRemoveRepoLegacyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    team_id: z.number(),
  }),
});

export const teamsRemoveRepoLegacyResponseSchema = z.void();

export const teamsRemoveRepoLegacyErrorSchema = z.unknown();

export const teamsCheckPermissionsForRepoLegacyDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    team_id: z.number(),
  }),
});

export const teamsCheckPermissionsForRepoLegacyResponseSchema = z.union([teamRepositorySchema, z.void()]);

export const teamsCheckPermissionsForRepoLegacyErrorSchema = z.unknown();

export const teamsAddOrUpdateRepoPermissionsLegacyDataSchema = z.object({
  body: z
    .object({
      permission: z.union([z.literal('pull'), z.literal('push'), z.literal('admin')]).optional(),
    })
    .optional(),
  path: z.object({
    owner: z.string(),
    repo: z.string(),
    team_id: z.number(),
  }),
});

export const teamsAddOrUpdateRepoPermissionsLegacyResponseSchema = z.void();

export const teamsAddOrUpdateRepoPermissionsLegacyErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const teamsListChildLegacyDataSchema = z.object({
  path: z.object({
    team_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListChildLegacyResponseSchema = z.array(teamSchema);

export const teamsListChildLegacyErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const usersGetAuthenticatedResponseSchema = z.union([privateUserSchema, publicUserSchema]);

export const usersGetAuthenticatedErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersUpdateAuthenticatedDataSchema = z.object({
  body: z
    .object({
      bio: z.string().optional(),
      blog: z.string().optional(),
      company: z.string().optional(),
      email: z.string().optional(),
      hireable: z.boolean().optional(),
      location: z.string().optional(),
      name: z.string().optional(),
      twitter_username: z.string().optional().nullable(),
    })
    .optional(),
});

export const usersUpdateAuthenticatedResponseSchema = privateUserSchema;

export const usersUpdateAuthenticatedErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const usersListBlockedByAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListBlockedByAuthenticatedUserResponseSchema = z.array(simpleUserSchema);

export const usersListBlockedByAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersUnblockDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersUnblockResponseSchema = z.void();

export const usersUnblockErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersCheckBlockedDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersCheckBlockedResponseSchema = z.void();

export const usersCheckBlockedErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersBlockDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersBlockResponseSchema = z.void();

export const usersBlockErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const codespacesListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      repository_id: z.number().optional(),
    })
    .optional(),
});

export const codespacesListForAuthenticatedUserResponseSchema = z.object({
  codespaces: z.array(codespaceSchema),
  total_count: z.number(),
});

export const codespacesListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesCreateForAuthenticatedUserDataSchema = z.object({
  body: z.union([
    z.object({
      client_ip: z.string().optional(),
      devcontainer_path: z.string().optional(),
      display_name: z.string().optional(),
      idle_timeout_minutes: z.number().optional(),
      location: z.string().optional(),
      machine: z.string().optional(),
      multi_repo_permissions_opt_out: z.boolean().optional(),
      ref: z.string().optional(),
      repository_id: z.number(),
      retention_period_minutes: z.number().optional(),
      working_directory: z.string().optional(),
    }),
    z.object({
      devcontainer_path: z.string().optional(),
      idle_timeout_minutes: z.number().optional(),
      location: z.string().optional(),
      machine: z.string().optional(),
      pull_request: z.object({
        pull_request_number: z.number(),
        repository_id: z.number(),
      }),
      working_directory: z.string().optional(),
    }),
  ]),
});

export const codespacesCreateForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesCreateForAuthenticatedUserErrorSchema = z.union([
  basicErrorSchema,
  z.object({
    code: z.string().optional(),
    documentation_url: z.string().optional(),
    message: z.string().optional(),
  }),
]);

export const codespacesListSecretsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const codespacesListSecretsForAuthenticatedUserResponseSchema = z.object({
  secrets: z.array(codespacesSecretSchema),
  total_count: z.number(),
});

export const codespacesListSecretsForAuthenticatedUserErrorSchema = z.unknown();

export const codespacesGetPublicKeyForAuthenticatedUserResponseSchema = codespacesUserPublicKeySchema;

export const codespacesGetPublicKeyForAuthenticatedUserErrorSchema = z.unknown();

export const codespacesDeleteSecretForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    secret_name: z.string(),
  }),
});

export const codespacesDeleteSecretForAuthenticatedUserResponseSchema = z.void();

export const codespacesDeleteSecretForAuthenticatedUserErrorSchema = z.unknown();

export const codespacesGetSecretForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    secret_name: z.string(),
  }),
});

export const codespacesGetSecretForAuthenticatedUserResponseSchema = codespacesSecretSchema;

export const codespacesGetSecretForAuthenticatedUserErrorSchema = z.unknown();

export const codespacesCreateOrUpdateSecretForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string(),
    selected_repository_ids: z.array(z.union([z.number(), z.string()])).optional(),
  }),
  path: z.object({
    secret_name: z.string(),
  }),
});

export const codespacesCreateOrUpdateSecretForAuthenticatedUserResponseSchema = z.union([emptyObjectSchema, z.void()]);

export const codespacesCreateOrUpdateSecretForAuthenticatedUserErrorSchema = z.union([
  basicErrorSchema,
  validationErrorSchema,
]);

export const codespacesListRepositoriesForSecretForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    secret_name: z.string(),
  }),
});

export const codespacesListRepositoriesForSecretForAuthenticatedUserResponseSchema = z.object({
  repositories: z.array(minimalRepositorySchema),
  total_count: z.number(),
});

export const codespacesListRepositoriesForSecretForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesSetRepositoriesForSecretForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    selected_repository_ids: z.array(z.number()),
  }),
  path: z.object({
    secret_name: z.string(),
  }),
});

export const codespacesSetRepositoriesForSecretForAuthenticatedUserResponseSchema = z.void();

export const codespacesSetRepositoriesForSecretForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesRemoveRepositoryForSecretForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const codespacesRemoveRepositoryForSecretForAuthenticatedUserResponseSchema = z.void();

export const codespacesRemoveRepositoryForSecretForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesAddRepositoryForSecretForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    repository_id: z.number(),
    secret_name: z.string(),
  }),
});

export const codespacesAddRepositoryForSecretForAuthenticatedUserResponseSchema = z.void();

export const codespacesAddRepositoryForSecretForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesDeleteForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesDeleteForAuthenticatedUserResponseSchema = z.record(z.unknown());

export const codespacesDeleteForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesGetForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesGetForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesGetForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesUpdateForAuthenticatedUserDataSchema = z.object({
  body: z
    .object({
      display_name: z.string().optional(),
      machine: z.string().optional(),
      recent_folders: z.array(z.string()).optional(),
    })
    .optional(),
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesUpdateForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesUpdateForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesExportForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesExportForAuthenticatedUserResponseSchema = codespaceExportDetailsSchema;

export const codespacesExportForAuthenticatedUserErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const codespacesGetExportDetailsForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
    export_id: z.string(),
  }),
});

export const codespacesGetExportDetailsForAuthenticatedUserResponseSchema = codespaceExportDetailsSchema;

export const codespacesGetExportDetailsForAuthenticatedUserErrorSchema = basicErrorSchema;

export const codespacesCodespaceMachinesForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesCodespaceMachinesForAuthenticatedUserResponseSchema = z.object({
  machines: z.array(codespaceMachineSchema),
  total_count: z.number(),
});

export const codespacesCodespaceMachinesForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesPublishForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    name: z.string().optional(),
    private: z.boolean().optional(),
  }),
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespaceWithFullRepositorySchema = z.object({
  billable_owner: simpleUserSchema,
  created_at: z.string(),
  devcontainer_path: z.string().optional().nullable(),
  display_name: z.string().optional().nullable(),
  environment_id: z.string().nullable(),
  git_status: z.object({
    ahead: z.number().optional(),
    behind: z.number().optional(),
    has_uncommitted_changes: z.boolean().optional(),
    has_unpushed_changes: z.boolean().optional(),
    ref: z.string().optional(),
  }),
  id: z.number(),
  idle_timeout_minutes: z.number().nullable(),
  idle_timeout_notice: z.string().optional().nullable(),
  last_used_at: z.string(),
  location: z.union([z.literal('EastUs'), z.literal('SouthEastAsia'), z.literal('WestEurope'), z.literal('WestUs2')]),
  machine: nullableCodespaceMachineSchema,
  machines_url: z.string(),
  name: z.string(),
  owner: simpleUserSchema,
  pending_operation: z.boolean().optional().nullable(),
  pending_operation_disabled_reason: z.string().optional().nullable(),
  prebuild: z.boolean().nullable(),
  publish_url: z.string().optional().nullable(),
  pulls_url: z.string().nullable(),
  recent_folders: z.array(z.string()),
  repository: fullRepositorySchema,
  retention_expires_at: z.string().optional().nullable(),
  retention_period_minutes: z.number().optional().nullable(),
  runtime_constraints: z
    .object({
      allowed_port_privacy_settings: z.array(z.string()).optional().nullable(),
    })
    .optional(),
  start_url: z.string(),
  state: z.union([
    z.literal('Unknown'),
    z.literal('Created'),
    z.literal('Queued'),
    z.literal('Provisioning'),
    z.literal('Available'),
    z.literal('Awaiting'),
    z.literal('Unavailable'),
    z.literal('Deleted'),
    z.literal('Moved'),
    z.literal('Shutdown'),
    z.literal('Archived'),
    z.literal('Starting'),
    z.literal('ShuttingDown'),
    z.literal('Failed'),
    z.literal('Exporting'),
    z.literal('Updating'),
    z.literal('Rebuilding'),
  ]),
  stop_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
  web_url: z.string(),
});

export const codespacesPublishForAuthenticatedUserErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const codespacesStartForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesStartForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesStartForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const codespacesStopForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    codespace_name: z.string(),
  }),
});

export const codespacesStopForAuthenticatedUserResponseSchema = codespaceSchema;

export const codespacesStopForAuthenticatedUserErrorSchema = basicErrorSchema;

export const usersSetPrimaryEmailVisibilityForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    visibility: z.union([z.literal('public'), z.literal('private')]),
  }),
});

export const usersSetPrimaryEmailVisibilityForAuthenticatedUserResponseSchema = z.array(emailSchema);

export const usersSetPrimaryEmailVisibilityForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersDeleteEmailForAuthenticatedUserDataSchema = z.object({
  body: z
    .union([
      z.object({
        emails: z.array(z.string()),
      }),
      z.array(z.string()),
      z.string(),
    ])
    .optional(),
});

export const usersDeleteEmailForAuthenticatedUserResponseSchema = z.void();

export const usersDeleteEmailForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersListEmailsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListEmailsForAuthenticatedUserResponseSchema = z.array(emailSchema);

export const usersListEmailsForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersAddEmailForAuthenticatedUserDataSchema = z.object({
  body: z
    .union([
      z.object({
        emails: z.array(z.string()),
      }),
      z.array(z.string()),
      z.string(),
    ])
    .optional(),
});

export const usersAddEmailForAuthenticatedUserResponseSchema = z.array(emailSchema);

export const usersAddEmailForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersListFollowersForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListFollowersForAuthenticatedUserResponseSchema = z.array(simpleUserSchema);

export const usersListFollowersForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersListFollowedByAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListFollowedByAuthenticatedUserResponseSchema = z.array(simpleUserSchema);

export const usersListFollowedByAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersUnfollowDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersUnfollowResponseSchema = z.void();

export const usersUnfollowErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersCheckPersonIsFollowedByAuthenticatedDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersCheckPersonIsFollowedByAuthenticatedResponseSchema = z.void();

export const usersCheckPersonIsFollowedByAuthenticatedErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersFollowDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersFollowResponseSchema = z.void();

export const usersFollowErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersListGpgKeysForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListGpgKeysForAuthenticatedUserResponseSchema = z.array(gpgKeySchema);

export const usersListGpgKeysForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersCreateGpgKeyForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    armored_public_key: z.string(),
    name: z.string().optional(),
  }),
});

export const usersCreateGpgKeyForAuthenticatedUserResponseSchema = gpgKeySchema;

export const usersCreateGpgKeyForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersDeleteGpgKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    gpg_key_id: z.number(),
  }),
});

export const usersDeleteGpgKeyForAuthenticatedUserResponseSchema = z.void();

export const usersDeleteGpgKeyForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersGetGpgKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    gpg_key_id: z.number(),
  }),
});

export const usersGetGpgKeyForAuthenticatedUserResponseSchema = gpgKeySchema;

export const usersGetGpgKeyForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsListInstallationsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListInstallationsForAuthenticatedUserResponseSchema = z.object({
  installations: z.array(installationSchema),
  total_count: z.number(),
});

export const appsListInstallationsForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsListInstallationReposForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListInstallationReposForAuthenticatedUserResponseSchema = z.object({
  repositories: z.array(repositorySchema),
  repository_selection: z.string().optional(),
  total_count: z.number(),
});

export const appsListInstallationReposForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsRemoveRepoFromInstallationForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
    repository_id: z.number(),
  }),
});

export const appsRemoveRepoFromInstallationForAuthenticatedUserResponseSchema = z.void();

export const appsRemoveRepoFromInstallationForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsAddRepoToInstallationForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    installation_id: z.number(),
    repository_id: z.number(),
  }),
});

export const appsAddRepoToInstallationForAuthenticatedUserResponseSchema = z.void();

export const appsAddRepoToInstallationForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const interactionsRemoveRestrictionsForAuthenticatedUserResponseSchema = z.void();

export const interactionsRemoveRestrictionsForAuthenticatedUserErrorSchema = z.unknown();

export const interactionsGetRestrictionsForAuthenticatedUserResponseSchema = z.union([
  z.union([interactionLimitResponseSchema, z.record(z.unknown())]),
  z.void(),
]);

export const interactionsGetRestrictionsForAuthenticatedUserErrorSchema = z.unknown();

export const interactionsSetRestrictionsForAuthenticatedUserDataSchema = z.object({
  body: interactionLimitSchema,
});

export const interactionsSetRestrictionsForAuthenticatedUserResponseSchema = interactionLimitResponseSchema;

export const interactionsSetRestrictionsForAuthenticatedUserErrorSchema = validationErrorSchema;

export const issuesListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      filter: z
        .union([
          z.literal('assigned'),
          z.literal('created'),
          z.literal('mentioned'),
          z.literal('subscribed'),
          z.literal('repos'),
          z.literal('all'),
        ])
        .optional(),
      labels: z.string().optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z.union([z.literal('created'), z.literal('updated'), z.literal('comments')]).optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const issuesListForAuthenticatedUserResponseSchema = z.array(issueSchema);

export const issuesListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersListPublicSshKeysForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListPublicSshKeysForAuthenticatedUserResponseSchema = z.array(keySchema);

export const usersListPublicSshKeysForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersCreatePublicSshKeyForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    key: z.string(),
    title: z.string().optional(),
  }),
});

export const usersCreatePublicSshKeyForAuthenticatedUserResponseSchema = keySchema;

export const usersCreatePublicSshKeyForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersDeletePublicSshKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    key_id: z.number(),
  }),
});

export const usersDeletePublicSshKeyForAuthenticatedUserResponseSchema = z.void();

export const usersDeletePublicSshKeyForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersGetPublicSshKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    key_id: z.number(),
  }),
});

export const usersGetPublicSshKeyForAuthenticatedUserResponseSchema = keySchema;

export const usersGetPublicSshKeyForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsListSubscriptionsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListSubscriptionsForAuthenticatedUserResponseSchema = z.array(userMarketplacePurchaseSchema);

export const appsListSubscriptionsForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const appsListSubscriptionsForAuthenticatedUserStubbedDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const appsListSubscriptionsForAuthenticatedUserStubbedResponseSchema = z.array(userMarketplacePurchaseSchema);

export const appsListSubscriptionsForAuthenticatedUserStubbedErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const orgsListMembershipsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('active'), z.literal('pending')]).optional(),
    })
    .optional(),
});

export const orgsListMembershipsForAuthenticatedUserResponseSchema = z.array(orgMembershipSchema);

export const orgsListMembershipsForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const orgsGetMembershipForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
  }),
});

export const orgsGetMembershipForAuthenticatedUserResponseSchema = orgMembershipSchema;

export const orgsGetMembershipForAuthenticatedUserErrorSchema = basicErrorSchema;

export const orgsUpdateMembershipForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    state: z.literal('active'),
  }),
  path: z.object({
    org: z.string(),
  }),
});

export const orgsUpdateMembershipForAuthenticatedUserResponseSchema = orgMembershipSchema;

export const orgsUpdateMembershipForAuthenticatedUserErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const migrationsListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const migrationsListForAuthenticatedUserResponseSchema = z.array(migrationSchema);

export const migrationsListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const migrationsStartForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    exclude: z.array(z.literal('repositories')).optional(),
    exclude_attachments: z.boolean().optional(),
    exclude_git_data: z.boolean().optional(),
    exclude_metadata: z.boolean().optional(),
    exclude_owner_projects: z.boolean().optional(),
    exclude_releases: z.boolean().optional(),
    lock_repositories: z.boolean().optional(),
    org_metadata_only: z.boolean().optional(),
    repositories: z.array(z.string()),
  }),
});

export const migrationsStartForAuthenticatedUserResponseSchema = migrationSchema;

export const migrationsStartForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const migrationsGetStatusForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
  }),
  query: z
    .object({
      exclude: z.array(z.string()).optional(),
    })
    .optional(),
});

export const migrationsGetStatusForAuthenticatedUserResponseSchema = migrationSchema;

export const migrationsGetStatusForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const migrationsDeleteArchiveForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
  }),
});

export const migrationsDeleteArchiveForAuthenticatedUserResponseSchema = z.void();

export const migrationsDeleteArchiveForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const migrationsGetArchiveForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
  }),
});

export const migrationsUnlockRepoForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
    repo_name: z.string(),
  }),
});

export const migrationsUnlockRepoForAuthenticatedUserResponseSchema = z.void();

export const migrationsUnlockRepoForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const migrationsListReposForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    migration_id: z.number(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const migrationsListReposForAuthenticatedUserResponseSchema = z.array(minimalRepositorySchema);

export const migrationsListReposForAuthenticatedUserErrorSchema = basicErrorSchema;

export const orgsListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListForAuthenticatedUserResponseSchema = z.array(organizationSimpleSchema);

export const orgsListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const packagesListPackagesForAuthenticatedUserDataSchema = z.object({
  query: z.object({
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]).optional(),
  }),
});

export const packagesListPackagesForAuthenticatedUserResponseSchema = z.array(packageSchema);

export const packagesListPackagesForAuthenticatedUserErrorSchema = z.unknown();

export const packagesDeletePackageForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
});

export const packagesDeletePackageForAuthenticatedUserResponseSchema = z.void();

export const packagesDeletePackageForAuthenticatedUserErrorSchema = basicErrorSchema;

export const packagesGetPackageForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
});

export const packagesGetPackageForAuthenticatedUserResponseSchema = packageSchema;

export const packagesGetPackageForAuthenticatedUserErrorSchema = z.unknown();

export const packagesRestorePackageForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
  query: z
    .object({
      token: z.string().optional(),
    })
    .optional(),
});

export const packagesRestorePackageForAuthenticatedUserResponseSchema = z.void();

export const packagesRestorePackageForAuthenticatedUserErrorSchema = basicErrorSchema;

export const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('active'), z.literal('deleted')]).optional(),
    })
    .optional(),
});

export const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponseSchema =
  z.array(packageVersionSchema);

export const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserErrorSchema = basicErrorSchema;

export const packagesDeletePackageVersionForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesDeletePackageVersionForAuthenticatedUserResponseSchema = z.void();

export const packagesDeletePackageVersionForAuthenticatedUserErrorSchema = basicErrorSchema;

export const packagesGetPackageVersionForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesGetPackageVersionForAuthenticatedUserResponseSchema = packageVersionSchema;

export const packagesGetPackageVersionForAuthenticatedUserErrorSchema = z.unknown();

export const packagesRestorePackageVersionForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
  }),
});

export const packagesRestorePackageVersionForAuthenticatedUserResponseSchema = z.void();

export const packagesRestorePackageVersionForAuthenticatedUserErrorSchema = basicErrorSchema;

export const projectsCreateForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    body: z.string().optional().nullable(),
    name: z.string(),
  }),
});

export const projectsCreateForAuthenticatedUserResponseSchema = projectSchema;

export const projectsCreateForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSimpleSchema,
]);

export const usersListPublicEmailsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListPublicEmailsForAuthenticatedUserResponseSchema = z.array(emailSchema);

export const usersListPublicEmailsForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const reposListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      affiliation: z.string().optional(),
      before: z.string().optional(),
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
      sort: z
        .union([z.literal('created'), z.literal('updated'), z.literal('pushed'), z.literal('full_name')])
        .optional(),
      type: z
        .union([z.literal('all'), z.literal('owner'), z.literal('public'), z.literal('private'), z.literal('member')])
        .optional(),
      visibility: z.union([z.literal('all'), z.literal('public'), z.literal('private')]).optional(),
    })
    .optional(),
});

export const reposListForAuthenticatedUserResponseSchema = z.array(repositorySchema);

export const reposListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema, validationErrorSchema]);

export const reposCreateForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    allow_auto_merge: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_rebase_merge: z.boolean().optional(),
    allow_squash_merge: z.boolean().optional(),
    auto_init: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    description: z.string().optional(),
    gitignore_template: z.string().optional(),
    has_discussions: z.boolean().optional(),
    has_downloads: z.boolean().optional(),
    has_issues: z.boolean().optional(),
    has_projects: z.boolean().optional(),
    has_wiki: z.boolean().optional(),
    homepage: z.string().optional(),
    is_template: z.boolean().optional(),
    license_template: z.string().optional(),
    merge_commit_message: z.union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')]).optional(),
    merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')]).optional(),
    name: z.string(),
    private: z.boolean().optional(),
    squash_merge_commit_message: z
      .union([z.literal('PR_BODY'), z.literal('COMMIT_MESSAGES'), z.literal('BLANK')])
      .optional(),
    squash_merge_commit_title: z.union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')]).optional(),
    team_id: z.number().optional(),
  }),
});

export const reposCreateForAuthenticatedUserResponseSchema = repositorySchema;

export const reposCreateForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const reposListInvitationsForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const reposListInvitationsForAuthenticatedUserResponseSchema = z.array(repositoryInvitationSchema);

export const reposListInvitationsForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const reposDeclineInvitationForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    invitation_id: z.number(),
  }),
});

export const reposDeclineInvitationForAuthenticatedUserResponseSchema = z.void();

export const reposDeclineInvitationForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const reposAcceptInvitationForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    invitation_id: z.number(),
  }),
});

export const reposAcceptInvitationForAuthenticatedUserResponseSchema = z.void();

export const reposAcceptInvitationForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersListSshSigningKeysForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListSshSigningKeysForAuthenticatedUserResponseSchema = z.array(sshSigningKeySchema);

export const usersListSshSigningKeysForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersCreateSshSigningKeyForAuthenticatedUserDataSchema = z.object({
  body: z.object({
    key: z.string(),
    title: z.string().optional(),
  }),
});

export const usersCreateSshSigningKeyForAuthenticatedUserResponseSchema = sshSigningKeySchema;

export const usersCreateSshSigningKeyForAuthenticatedUserErrorSchema = z.union([
  z.unknown(),
  basicErrorSchema,
  validationErrorSchema,
]);

export const usersDeleteSshSigningKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    ssh_signing_key_id: z.number(),
  }),
});

export const usersDeleteSshSigningKeyForAuthenticatedUserResponseSchema = z.void();

export const usersDeleteSshSigningKeyForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersGetSshSigningKeyForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    ssh_signing_key_id: z.number(),
  }),
});

export const usersGetSshSigningKeyForAuthenticatedUserResponseSchema = sshSigningKeySchema;

export const usersGetSshSigningKeyForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityListReposStarredByAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const activityListReposStarredByAuthenticatedUserResponseSchema = z.array(repositorySchema);

export const activityListReposStarredByAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityUnstarRepoForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityUnstarRepoForAuthenticatedUserResponseSchema = z.void();

export const activityUnstarRepoForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityCheckRepoIsStarredByAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityCheckRepoIsStarredByAuthenticatedUserResponseSchema = z.void();

export const activityCheckRepoIsStarredByAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityStarRepoForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
});

export const activityStarRepoForAuthenticatedUserResponseSchema = z.void();

export const activityStarRepoForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const activityListWatchedReposForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListWatchedReposForAuthenticatedUserResponseSchema = z.array(minimalRepositorySchema);

export const activityListWatchedReposForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const teamsListForAuthenticatedUserDataSchema = z.object({
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const teamsListForAuthenticatedUserResponseSchema = z.array(teamFullSchema);

export const teamsListForAuthenticatedUserErrorSchema = z.union([z.unknown(), basicErrorSchema]);

export const usersListDataSchema = z.object({
  query: z
    .object({
      per_page: z.number().optional(),
      since: z.number().optional(),
    })
    .optional(),
});

export const usersListResponseSchema = z.array(simpleUserSchema);

export const usersListErrorSchema = z.unknown();

export const usersGetByUsernameDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const usersGetByUsernameResponseSchema = z.union([privateUserSchema, publicUserSchema]);

export const usersGetByUsernameErrorSchema = basicErrorSchema;

export const activityListEventsForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListEventsForAuthenticatedUserResponseSchema = z.array(eventSchema);

export const activityListEventsForAuthenticatedUserErrorSchema = z.unknown();

export const activityListOrgEventsForAuthenticatedUserDataSchema = z.object({
  path: z.object({
    org: z.string(),
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListOrgEventsForAuthenticatedUserResponseSchema = z.array(eventSchema);

export const activityListOrgEventsForAuthenticatedUserErrorSchema = z.unknown();

export const activityListPublicEventsForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListPublicEventsForUserResponseSchema = z.array(eventSchema);

export const activityListPublicEventsForUserErrorSchema = z.unknown();

export const usersListFollowersForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListFollowersForUserResponseSchema = z.array(simpleUserSchema);

export const usersListFollowersForUserErrorSchema = z.unknown();

export const usersListFollowingForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListFollowingForUserResponseSchema = z.array(simpleUserSchema);

export const usersListFollowingForUserErrorSchema = z.unknown();

export const usersCheckFollowingForUserDataSchema = z.object({
  path: z.object({
    target_user: z.string(),
    username: z.string(),
  }),
});

export const usersCheckFollowingForUserResponseSchema = z.void();

export const usersCheckFollowingForUserErrorSchema = z.unknown();

export const gistsListForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      since: z.string().optional(),
    })
    .optional(),
});

export const gistsListForUserResponseSchema = z.array(baseGistSchema);

export const gistsListForUserErrorSchema = validationErrorSchema;

export const usersListGpgKeysForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListGpgKeysForUserResponseSchema = z.array(gpgKeySchema);

export const usersListGpgKeysForUserErrorSchema = z.unknown();

export const usersGetContextForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      subject_id: z.string().optional(),
      subject_type: z
        .union([z.literal('organization'), z.literal('repository'), z.literal('issue'), z.literal('pull_request')])
        .optional(),
    })
    .optional(),
});

export const usersGetContextForUserResponseSchema = hovercardSchema;

export const usersGetContextForUserErrorSchema = z.union([basicErrorSchema, validationErrorSchema]);

export const appsGetUserInstallationDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const appsGetUserInstallationResponseSchema = installationSchema;

export const appsGetUserInstallationErrorSchema = z.unknown();

export const usersListPublicKeysForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListPublicKeysForUserResponseSchema = z.array(keySimpleSchema);

export const usersListPublicKeysForUserErrorSchema = z.unknown();

export const orgsListForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const orgsListForUserResponseSchema = z.array(organizationSimpleSchema);

export const orgsListForUserErrorSchema = z.unknown();

export const packagesListPackagesForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z.object({
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    visibility: z.union([z.literal('public'), z.literal('private'), z.literal('internal')]).optional(),
  }),
});

export const packagesListPackagesForUserResponseSchema = z.array(packageSchema);

export const packagesListPackagesForUserErrorSchema = basicErrorSchema;

export const packagesDeletePackageForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    username: z.string(),
  }),
});

export const packagesDeletePackageForUserResponseSchema = z.void();

export const packagesDeletePackageForUserErrorSchema = basicErrorSchema;

export const packagesGetPackageForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    username: z.string(),
  }),
});

export const packagesGetPackageForUserResponseSchema = packageSchema;

export const packagesGetPackageForUserErrorSchema = z.unknown();

export const packagesRestorePackageForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    username: z.string(),
  }),
  query: z
    .object({
      token: z.string().optional(),
    })
    .optional(),
});

export const packagesRestorePackageForUserResponseSchema = z.void();

export const packagesRestorePackageForUserErrorSchema = basicErrorSchema;

export const packagesGetAllPackageVersionsForPackageOwnedByUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    username: z.string(),
  }),
});

export const packagesGetAllPackageVersionsForPackageOwnedByUserResponseSchema = z.array(packageVersionSchema);

export const packagesGetAllPackageVersionsForPackageOwnedByUserErrorSchema = basicErrorSchema;

export const packagesDeletePackageVersionForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
    username: z.string(),
  }),
});

export const packagesDeletePackageVersionForUserResponseSchema = z.void();

export const packagesDeletePackageVersionForUserErrorSchema = basicErrorSchema;

export const packagesGetPackageVersionForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
    username: z.string(),
  }),
});

export const packagesGetPackageVersionForUserResponseSchema = packageVersionSchema;

export const packagesGetPackageVersionForUserErrorSchema = z.unknown();

export const packagesRestorePackageVersionForUserDataSchema = z.object({
  path: z.object({
    package_name: z.string(),
    package_type: z.union([
      z.literal('npm'),
      z.literal('maven'),
      z.literal('rubygems'),
      z.literal('docker'),
      z.literal('nuget'),
      z.literal('container'),
    ]),
    package_version_id: z.number(),
    username: z.string(),
  }),
});

export const packagesRestorePackageVersionForUserResponseSchema = z.void();

export const packagesRestorePackageVersionForUserErrorSchema = basicErrorSchema;

export const projectsListForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
      state: z.union([z.literal('open'), z.literal('closed'), z.literal('all')]).optional(),
    })
    .optional(),
});

export const projectsListForUserResponseSchema = z.array(projectSchema);

export const projectsListForUserErrorSchema = validationErrorSchema;

export const activityListReceivedEventsForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListReceivedEventsForUserResponseSchema = z.array(eventSchema);

export const activityListReceivedEventsForUserErrorSchema = z.unknown();

export const activityListReceivedPublicEventsForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListReceivedPublicEventsForUserResponseSchema = z.array(eventSchema);

export const activityListReceivedPublicEventsForUserErrorSchema = z.unknown();

export const reposListForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z
        .union([z.literal('created'), z.literal('updated'), z.literal('pushed'), z.literal('full_name')])
        .optional(),
      type: z.union([z.literal('all'), z.literal('owner'), z.literal('member')]).optional(),
    })
    .optional(),
});

export const reposListForUserResponseSchema = z.array(minimalRepositorySchema);

export const reposListForUserErrorSchema = z.unknown();

export const billingGetGithubActionsBillingUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const billingGetGithubActionsBillingUserResponseSchema = actionsBillingUsageSchema;

export const billingGetGithubActionsBillingUserErrorSchema = z.unknown();

export const billingGetGithubPackagesBillingUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const billingGetGithubPackagesBillingUserResponseSchema = packagesBillingUsageSchema;

export const billingGetGithubPackagesBillingUserErrorSchema = z.unknown();

export const billingGetSharedStorageBillingUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
});

export const billingGetSharedStorageBillingUserResponseSchema = combinedBillingUsageSchema;

export const billingGetSharedStorageBillingUserErrorSchema = z.unknown();

export const usersListSshSigningKeysForUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const usersListSshSigningKeysForUserResponseSchema = z.array(sshSigningKeySchema);

export const usersListSshSigningKeysForUserErrorSchema = z.unknown();

export const activityListReposStarredByUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      direction: z.union([z.literal('asc'), z.literal('desc')]).optional(),
      page: z.number().optional(),
      per_page: z.number().optional(),
      sort: z.union([z.literal('created'), z.literal('updated')]).optional(),
    })
    .optional(),
});

export const activityListReposStarredByUserResponseSchema = z.union([
  z.array(starredRepositorySchema),
  z.array(repositorySchema),
]);

export const activityListReposStarredByUserErrorSchema = z.unknown();

export const activityListReposWatchedByUserDataSchema = z.object({
  path: z.object({
    username: z.string(),
  }),
  query: z
    .object({
      page: z.number().optional(),
      per_page: z.number().optional(),
    })
    .optional(),
});

export const activityListReposWatchedByUserResponseSchema = z.array(minimalRepositorySchema);

export const activityListReposWatchedByUserErrorSchema = z.unknown();

export const metaGetAllVersionsResponseSchema = z.array(z.string());

export const metaGetAllVersionsErrorSchema = basicErrorSchema;

export const metaGetZenResponseSchema = z.string();

export const metaGetZenErrorSchema = z.unknown();

export const webhookCheckRunCompletedSchema = z.object({
  action: z.literal('completed').optional(),
  check_run: checkRunWithSimpleCheckSuiteSchema,
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookDependabotAlertCreatedSchema = z.object({
  action: z.literal('created'),
  alert: dependabotAlertSchema,
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookProjectsV2ItemArchivedSchema = z.object({
  action: z.literal('archived'),
  changes: z.object({
    archived_at: z
      .object({
        from: z.string().optional().nullable(),
        to: z.string().optional().nullable(),
      })
      .optional(),
  }),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema,
  projects_v2_item: projectsV2ItemSchema,
  sender: simpleUserSchema,
});

export const webhookSecretScanningAlertLocationCreatedSchema = z.object({
  action: z.literal('created').optional(),
  alert: secretScanningAlertSchema,
  installation: simpleInstallationSchema.optional(),
  location: secretScanningLocationSchema,
  organization: organizationSimpleSchema.optional(),
  repository: repositorySchema,
  sender: simpleUserSchema,
});

export const webhookSecurityAndAnalysisSchema = z.object({
  changes: z.object({
    from: z
      .object({
        security_and_analysis: securityAndAnalysisSchema.optional(),
      })
      .optional(),
  }),
  enterprise: enterpriseSchema.optional(),
  installation: simpleInstallationSchema.optional(),
  organization: organizationSimpleSchema.optional(),
  repository: fullRepositorySchema,
  sender: simpleUserSchema.optional(),
});

export const appsResetTokenResponseSchema = authorizationSchema;

export const secretScanningListAlertsForEnterpriseResponseSchema = z.array(organizationSecretScanningAlertSchema);

export const activityListPublicEventsResponseSchema = z.array(eventSchema);

export const activityGetFeedsResponseSchema = feedSchema;

export const gistsCreateResponseSchema = gistSimpleSchema;

export const actionsGetGithubActionsPermissionsOrganizationResponseSchema = actionsOrganizationPermissionsSchema;

export const actionsListSelfHostedRunnersForOrgResponseSchema = z.object({
  runners: z.array(runnerSchema),
  total_count: z.number(),
});

export const actionsCreateRegistrationTokenForOrgResponseSchema = authenticationTokenSchema;

export const codeScanningListAlertsForOrgResponseSchema = z.array(codeScanningOrganizationAlertItemsSchema);

export const codespacesListInOrganizationResponseSchema = z.object({
  codespaces: z.array(codespaceSchema),
  total_count: z.number(),
});

export const orgsGetMembershipForUserResponseSchema = orgMembershipSchema;

export const packagesListPackagesForOrganizationResponseSchema = z.array(packageSchema);

export const packagesGetPackageForOrganizationResponseSchema = packageSchema;

export const teamsCreateResponseSchema = teamFullSchema;

export const actionsGetPendingDeploymentsForRunResponseSchema = z.array(pendingDeploymentSchema);

export const reposListBranchesResponseSchema = z.array(shortBranchSchema);

export const reposGetBranchResponseSchema = branchWithProtectionSchema;

export const reposUpdateBranchProtectionResponseSchema = protectedBranchSchema;

export const checksCreateResponseSchema = checkRunSchema;

export const checksCreateSuiteResponseSchema = checkSuiteSchema;

export const checksSetSuitesPreferencesResponseSchema = checkSuitePreferenceSchema;

export const codeScanningListAlertsForRepoResponseSchema = z.array(codeScanningAlertItemsSchema);

export const codeScanningGetAlertResponseSchema = codeScanningAlertSchema;

export const codeScanningListRecentAnalysesResponseSchema = z.array(codeScanningAnalysisSchema);

export const reposGetCombinedStatusForRefResponseSchema = combinedCommitStatusSchema;

export const reposGetCommunityProfileMetricsResponseSchema = communityProfileSchema;

export const reposCompareCommitsResponseSchema = commitComparisonSchema;

export const reposGetAllEnvironmentsResponseSchema = z.object({
  environments: z.array(environmentSchema).optional(),
  total_count: z.number().optional(),
});

export const reposListWebhooksResponseSchema = z.array(hookSchema);

export const issuesListEventsForRepoResponseSchema = z.array(issueEventSchema);

export const issuesListEventsResponseSchema = z.array(issueEventForIssueSchema);

export const issuesListEventsForTimelineResponseSchema = z.array(timelineIssueEventsSchema);

export const reposGetPagesResponseSchema = pageSchema;

export const pullsCreateResponseSchema = pullRequestSchema;

export const reposListReleasesResponseSchema = z.array(releaseSchema);

export const reposGetClonesResponseSchema = cloneTrafficSchema;

export const searchCodeResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(codeSearchResultItemSchema),
  total_count: z.number(),
});

export const searchCommitsResponseSchema = z.object({
  incomplete_results: z.boolean(),
  items: z.array(commitSearchResultItemSchema),
  total_count: z.number(),
});

export const codespacesPublishForAuthenticatedUserResponseSchema = codespaceWithFullRepositorySchema;
